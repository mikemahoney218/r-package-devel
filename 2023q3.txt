From obr|@o||@u @end|ng |rom gm@||@com  Sat Jul  1 07:58:05 2023
From: obr|@o||@u @end|ng |rom gm@||@com (obrl soil)
Date: Sat, 1 Jul 2023 05:58:05 +0000
Subject: [R-pkg-devel] How to request for an Non Maintainer update - NMU
In-Reply-To: <ME3PR01MB7944B16B926E4A1700E2ECCCD452A@ME3PR01MB7944.ausprd01.prod.outlook.com>
References: <ME3PR01MB7944B16B926E4A1700E2ECCCD452A@ME3PR01MB7944.ausprd01.prod.outlook.com>
Message-ID: <DB4PR05MB1055933A638174C5584A8D2B9FC2BA@DB4PR05MB10559.eurprd05.prod.outlook.com>

Hi,

A note for the list, since this may pop up again: ggtern is not abandoned, and is back on CRAN. The active development repo is on bitbucket at https://bitbucket.org/nicholasehamilton/ggtern/src/master/ 

There is also a github repo https://github.com/nicholasehamilton/ggtern that is not active, but does get pinged regularly because its not been made clear that development is ongoing elsewhere. The package DESCRIPTION URL field points to http://www.ggtern.com/, but its not obvious where the active repo is until you navigate to http://www.ggtern.com/docs/ and look at the dev url quoted. 

I wonder if it should be CRAN policy that the DESCRIPTION URL points only to an active repo, but I imagine there would be a significant policing burden associated with such a change.

L

From: R-package-devel <r-package-devel-bounces at r-project.org> on behalf of Bernd.Gruber <Bernd.Gruber at canberra.edu.au>
Sent: Tuesday, June 6, 2023 6:04 PM
To: r-package-devel at r-project.org <r-package-devel at r-project.org>
Subject: [R-pkg-devel] How to request for an Non Maintainer update - NMU 
?
Hi everyone,

I am the maintainer of a package (dartR) that depends on ggtern (a package that seems not to be maintained anymore).
Currently the package was removed from CRAN (about 4 weeks ago) due to a simple error, which can be easily fixed. This was kindly achieved by Roger Bivand (simply the remove of a backslash does the trick).

In an github exchange he also suggested to have an non maintainer update (NMU) for the package in the short term (and find a replacement of orphan the package and find a new maintainer in the long term).

Here is my first question as I did not find an answer googling it.

How can I ask, request for an NMU? Would I simply write to CRAN and describe the situation and send the files that need to be replaced?

The second question is, how I would request to orphan the package and what is the procedure to find a new maintainer (as it relies on ggplot code and this is not really my strength, hence I would try to find someone else to take over).

Thanks a lot, Bernd



==============================================================================
Dr Bernd Gruber????????????????????????????????????????????? )/_
???????????????????????????????????????????????????????? _.--..---"-,--c_
Professor Ecological Modelling????????????????????? \|..'?????????? ._O__)_
Tel: (02) 6206 3804???????????????????????? ,=.??? _.+?? _ \..--( /
Fax: (02) 6201 2328?????????????????????????? \\.-''_.-' \ (???? \_
Institute for Applied Ecology????????????????? `'''?????? `\__?? /\
Faculty of Science and Technology????????????????????????? ')
University of Canberra?? ACT 2601 AUSTRALIA
Email: bernd.gruber at canberra.edu.au<mailto:bernd.gruber at canberra.edu.au>
WWW: bernd-gruber<https://researchprofiles.canberra.edu.au/en/persons/bernd-gruber>

Australian Government Higher Education Provider Number CRICOS #00212K
NOTICE & DISCLAIMER: This email and any files transmitted with it may contain
confidential or copyright material and are for the attention of the addressee
only. If you have received this email in error please notify us by email
reply and delete it from your system. The University of Canberra accepts
no liability for any damage caused by any virus transmitted by this email.
==============================================================================

[UC Logo]<http://www.canberra.edu.au>

[Research Festival,5-8 June 2023]<https://www.canberra.edu.au/about-uc/events/research-festival/research-festival-2023>



The Ngunnawal people are the Traditional Custodians of the ACT where UC's Bruce Campus is situated and are an integral and celebrated part of UC's culture. We also acknowledge other First Nations Peoples.

Australian Government Higher Education Registered Provider (CRICOS) #00212K. TEQSA Provider ID: PRV12003 (Australian University)
Email Disclaimer<https://www.canberra.edu.au/about-uc/disclaimer-copyright-privacy-accessibility>

[UC Facebook]<https://www.facebook.com/UniversityOfCanberra>??? [UC Twitter] <https://twitter.com/UniCanberra>???? [UC Instagram] <https://www.instagram.com/unicanberra/>???? [UC Linkedin] <https://au.linkedin.com/school/university-of-canberra/>???? [UC Youtube] <https://www.youtube.com/user/uniofcanberra>???? [University of Canberra] <http://www.canberra.edu.au>

??????? [[alternative HTML version deleted]]

______________________________________________
R-package-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-package-devel

From kry|ov@r00t @end|ng |rom gm@||@com  Sat Jul  1 21:00:06 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Sat, 1 Jul 2023 22:00:06 +0300
Subject: [R-pkg-devel] New R CMD check warnings for html files
In-Reply-To: <CAEO2ku+=nGbp2KqJNyXPPzFmo1nWGR7ePDL83cfC4AYm-WzK7Q@mail.gmail.com>
References: <CAEO2ku+=nGbp2KqJNyXPPzFmo1nWGR7ePDL83cfC4AYm-WzK7Q@mail.gmail.com>
Message-ID: <20230701220006.1ac80104@parabola>

? Fri, 30 Jun 2023 14:20:00 -0700
arilamstein at gmail.com ?????:

> However, when I run R CMD check I now get a ton of warnings in what I
> assume is the conversion of the man files from .Rd to .html files. I
> assume that CRAN will reject the package due to the warnings.
> However, I don't really understand the warnings, or why they are
> occurring now (they did not happen before).

roxygen2-7.2.3 seems to produce a lot of warnings on your source files.
I don't have a lot of experience with roxygen2, but they may be part of
the problem:

>> 38: [county.R:5] Undocumented R6 methods: initialize and clip
>> 39: [county.R:5] Undocumented R6 field: add_state_outline
>> 40: [county.R:5] Must use one @param for each argument
>> ? $initialize(user.df) is not documented

(and so on for more than 50 warnings... or is it something on my end?)

> The entire file has not changed in 3 years. When I run roxygenize()
> locally the .Rd file does look much (at all?) different than what was
> checked into github year ago

What does `git diff` say after you run roxygenise()? For me, latest
roxygen2 seems to lead to zero HTML warnings and zero Rd changes.

What are your versions of roxygen2 and HTML Tidy? Do you get the HTML
warnings when checking your package on R-hub, Win-Builder, or Mac
Builder?

-- 
Best regards,
Ivan


From chr|@ho|d @end|ng |rom p@yctc@org  Wed Jul  5 10:44:26 2023
From: chr|@ho|d @end|ng |rom p@yctc@org (Chris Evans)
Date: Wed, 5 Jul 2023 09:44:26 +0100
Subject: [R-pkg-devel] Help with a github/Rstudio mess
Message-ID: <fc59ef69-73fd-cb5e-fc96-3e13a5113115@psyctc.org>

I hope this is a legitimate question here.? I have a package of very 
simple functions: https://github.com/cpsyctc/CECPfuns.? For the forseeable
future it's really only to stop me constantly having to rewrite 
functions I use and it is only also used by probably two or three 
colleagues who
also use R and are even less IT/programming/R competent than I am and 
are very happy to use my functions.

I hadn't done any work on it for two years but came back to it yesterday 
and added a function (getCIforQuantiles).? There were warnings about
things that are deprecated now in some of the older functions but 
otherwise things seemed OK.? However, I got a pkgdown error and warning 
after
pushing the updated package to github:

Annotations
1 error and 1 warning
pkgdown
Failed to get R 4.3.1: Failed to get R 4.3.1: Failed to download version 
4.3.1: Error: Unexpected HTTP response: 404
r-lib/actions/setup-r at v1 is deprecated.
r-lib/actions/setup-r at v1 is deprecated. Please update your workflow to 
use the 'v2' version. Also look at the examples at 
https://github.com/r-lib/actions/tree/v2/examples because '@v2' 
workflows are much simpler than 'v1' workflows.

So I tweaked 
https://github.com/cpsyctc/CECPfuns/blob/main/.github/workflows/pkgdown.yaml 
to change
 ?? - uses: r-lib/actions/setup-r at v1
to
 ?? - uses: r-lib/actions/setup-r at v2
rather optimistically hoping that might make the warning go away.

Today I did some work on the new function (trivial, correcting one 
"!is.na(" to the correct "is.na(" !!!).? More importantly, I created the
test-getCIforQuantiles.R file for testthat to test the sanity checks and 
add three simple output checks.

I built the source package locally, committed the changes and tried to 
push the update to github (inside Rstudio) but I get:

 >>> /usr/bin/git push origin HEAD:refs/heads/main
To https://github.com/cpsyctc/CECPfuns.git
 ?! [rejected]??????? HEAD -> main (fetch first)
error: failed to push some refs to 'https://github.com/cpsyctc/CECPfuns.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

OK.? So I try to pull thinking that made sense and that the change to 
pkgdown.yaml on github that I made yesterday is the offending change.

However, when I pull (in Rstudio again) I get this:

 >>> /usr/bin/git pull
fatal: pack has 6 unresolved deltas
fatal: fetch-pack: invalid index-pack output

I have never felt on top of the complexities of git and github but I'm 
clearly way out of my depth.? I am hoping someone here can see what
I need to do to get things back in synch and be able to get back to 
developing the package.

TIA,

Chris

-- 
Chris Evans (he/him)
Visiting Professor, UDLA, Quito, Ecuador & Honorary Professor, 
University of Roehampton, London, UK.
Work web site: https://www.psyctc.org/psyctc/
CORE site: http://www.coresystemtrust.org.uk/
Personal site: https://www.psyctc.org/pelerinage2016/


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Jul  5 11:03:11 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 5 Jul 2023 05:03:11 -0400
Subject: [R-pkg-devel] Help with a github/Rstudio mess
In-Reply-To: <fc59ef69-73fd-cb5e-fc96-3e13a5113115@psyctc.org>
References: <fc59ef69-73fd-cb5e-fc96-3e13a5113115@psyctc.org>
Message-ID: <555198e1-0c39-f25a-8253-f115c4d2dbf9@gmail.com>

I think this isn't the right place to ask for this sort of help. Maybe 
stackoverflow instead?

What I'd do in this case is to rename the local dir holding the 
repository, then clone a new copy from Github.  Assuming that works, 
compare all the files to make sure that you have all recent changes,
commit any that were missed, then throw away the damaged one.

Duncan Murdoch

On 05/07/2023 4:44 a.m., Chris Evans wrote:
> I hope this is a legitimate question here.? I have a package of very
> simple functions: https://github.com/cpsyctc/CECPfuns.? For the forseeable
> future it's really only to stop me constantly having to rewrite
> functions I use and it is only also used by probably two or three
> colleagues who
> also use R and are even less IT/programming/R competent than I am and
> are very happy to use my functions.
> 
> I hadn't done any work on it for two years but came back to it yesterday
> and added a function (getCIforQuantiles).? There were warnings about
> things that are deprecated now in some of the older functions but
> otherwise things seemed OK.? However, I got a pkgdown error and warning
> after
> pushing the updated package to github:
> 
> Annotations
> 1 error and 1 warning
> pkgdown
> Failed to get R 4.3.1: Failed to get R 4.3.1: Failed to download version
> 4.3.1: Error: Unexpected HTTP response: 404
> r-lib/actions/setup-r at v1 is deprecated.
> r-lib/actions/setup-r at v1 is deprecated. Please update your workflow to
> use the 'v2' version. Also look at the examples at
> https://github.com/r-lib/actions/tree/v2/examples because '@v2'
> workflows are much simpler than 'v1' workflows.
> 
> So I tweaked
> https://github.com/cpsyctc/CECPfuns/blob/main/.github/workflows/pkgdown.yaml
> to change
>   ?? - uses: r-lib/actions/setup-r at v1
> to
>   ?? - uses: r-lib/actions/setup-r at v2
> rather optimistically hoping that might make the warning go away.
> 
> Today I did some work on the new function (trivial, correcting one
> "!is.na(" to the correct "is.na(" !!!).? More importantly, I created the
> test-getCIforQuantiles.R file for testthat to test the sanity checks and
> add three simple output checks.
> 
> I built the source package locally, committed the changes and tried to
> push the update to github (inside Rstudio) but I get:
> 
>   >>> /usr/bin/git push origin HEAD:refs/heads/main
> To https://github.com/cpsyctc/CECPfuns.git
>   ?! [rejected]??????? HEAD -> main (fetch first)
> error: failed to push some refs to 'https://github.com/cpsyctc/CECPfuns.git'
> hint: Updates were rejected because the remote contains work that you do
> hint: not have locally. This is usually caused by another repository pushing
> hint: to the same ref. You may want to first integrate the remote changes
> hint: (e.g., 'git pull ...') before pushing again.
> hint: See the 'Note about fast-forwards' in 'git push --help' for details.
> 
> OK.? So I try to pull thinking that made sense and that the change to
> pkgdown.yaml on github that I made yesterday is the offending change.
> 
> However, when I pull (in Rstudio again) I get this:
> 
>   >>> /usr/bin/git pull
> fatal: pack has 6 unresolved deltas
> fatal: fetch-pack: invalid index-pack output
> 
> I have never felt on top of the complexities of git and github but I'm
> clearly way out of my depth.? I am hoping someone here can see what
> I need to do to get things back in synch and be able to get back to
> developing the package.
>


From kry|ov@r00t @end|ng |rom gm@||@com  Wed Jul  5 11:12:29 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Wed, 5 Jul 2023 12:12:29 +0300
Subject: [R-pkg-devel] Help with a github/Rstudio mess
In-Reply-To: <fc59ef69-73fd-cb5e-fc96-3e13a5113115@psyctc.org>
References: <fc59ef69-73fd-cb5e-fc96-3e13a5113115@psyctc.org>
Message-ID: <20230705121229.5f36c7e9@Tarkus>

On Wed, 5 Jul 2023 09:44:26 +0100
Chris Evans <chrishold at psyctc.org> wrote:

> OK.? So I try to pull thinking that made sense and that the change to 
> pkgdown.yaml on github that I made yesterday is the offending change.

You are right about this.

> However, when I pull (in Rstudio again) I get this:
> 
>  >>> /usr/bin/git pull  
> fatal: pack has 6 unresolved deltas
> fatal: fetch-pack: invalid index-pack output

I think it should be possible to get your work online if you push it
into a separate branch:

git checkout -b test-getCIforQuantiles
git push -u origin test-getCIforQuantiles

This still leaves the problem of merging it back into "main", but at
least you'll have a separate copy you'll be able to get back to.

Your clone of the repo seems to have become corrupted somehow. People
on the Internet mention that this may be related to "shallow" clones
(made with git clone --depth=...). `git fsck --full` may provide more
information, but will probably not be able to fix the problem. Removing
the "origin" remote and adding it back again may fix the problem, or
not. https://phabricator.wikimedia.org/T46129 is the most informative
discussion of this problem I could find, and they couldn't solve it
either.

If you have any other important local branches, push them to GitHub (in
a similar manner: git push origin LOCAL_BRANCH_NAME:REMOTE_BRANCH_NAME).
Move your current clone of the repository away and create it anew using
`git clone`. Once you have merged the branches into appropriate places,
you will be able to remove them using git branch -d BRANCH_NAME
(locally) and git push origin :BRANCH_NAME (on GitHub).

-- 
Best regards,
Ivan


From chr|@ho|d @end|ng |rom p@yctc@org  Wed Jul  5 12:04:53 2023
From: chr|@ho|d @end|ng |rom p@yctc@org (Chris Evans)
Date: Wed, 5 Jul 2023 11:04:53 +0100
Subject: [R-pkg-devel] Help with a github/Rstudio mess
In-Reply-To: <20230705121229.5f36c7e9@Tarkus>
References: <fc59ef69-73fd-cb5e-fc96-3e13a5113115@psyctc.org>
 <20230705121229.5f36c7e9@Tarkus>
Message-ID: <bf04b911-3544-d9ac-2474-d16ea241385f@psyctc.org>

First, apologies for being off topic.? I guess I can see that this was 
pretty pure git/github/Rstudio with hindsight.? I am very leary of
stackoverflow, probably wrongly, but I find such a mix of misinformation 
and showboating there.? By contrast this list is a haven for me
to learn. However, point taken and I will try to be focused on the R 
package side if I post here again (quite possible as so much of this
is at my outer limits in skills and experience).

So huge thanks to Ivan for so much background: not sure if it's 
depressing or reassuring to see that this seems to be an erratic but known
thing.? Huge thanks to Duncan as I decided that I understood more of his 
suggested fix than of Ivan's so I would start there ... and it
simply worked!

Many thanks both and to all who have taught me so much here,

Chris

On 05/07/2023 10:12, Ivan Krylov wrote:
> On Wed, 5 Jul 2023 09:44:26 +0100
> Chris Evans <chrishold at psyctc.org> wrote:
>
>> OK.? So I try to pull thinking that made sense and that the change to
>> pkgdown.yaml on github that I made yesterday is the offending change.
> You are right about this.
>
>> However, when I pull (in Rstudio again) I get this:
>>
>>   >>> /usr/bin/git pull
>> fatal: pack has 6 unresolved deltas
>> fatal: fetch-pack: invalid index-pack output
> I think it should be possible to get your work online if you push it
> into a separate branch:
>
> git checkout -b test-getCIforQuantiles
> git push -u origin test-getCIforQuantiles
>
> This still leaves the problem of merging it back into "main", but at
> least you'll have a separate copy you'll be able to get back to.
>
> Your clone of the repo seems to have become corrupted somehow. People
> on the Internet mention that this may be related to "shallow" clones
> (made with git clone --depth=...). `git fsck --full` may provide more
> information, but will probably not be able to fix the problem. Removing
> the "origin" remote and adding it back again may fix the problem, or
> not. https://phabricator.wikimedia.org/T46129 is the most informative
> discussion of this problem I could find, and they couldn't solve it
> either.
>
> If you have any other important local branches, push them to GitHub (in
> a similar manner: git push origin LOCAL_BRANCH_NAME:REMOTE_BRANCH_NAME).
> Move your current clone of the repository away and create it anew using
> `git clone`. Once you have merged the branches into appropriate places,
> you will be able to remove them using git branch -d BRANCH_NAME
> (locally) and git push origin :BRANCH_NAME (on GitHub).
>
-- 
Chris Evans (he/him)
Visiting Professor, UDLA, Quito, Ecuador & Honorary Professor, 
University of Roehampton, London, UK.
Work web site: https://www.psyctc.org/psyctc/
CORE site: http://www.coresystemtrust.org.uk/
Personal site: https://www.psyctc.org/pelerinage2016/
E


From georg|@bo@hn@kov @end|ng |rom m@nche@ter@@c@uk  Wed Jul  5 13:14:21 2023
From: georg|@bo@hn@kov @end|ng |rom m@nche@ter@@c@uk (Georgi Boshnakov)
Date: Wed, 5 Jul 2023 11:14:21 +0000
Subject: [R-pkg-devel] Help with a github/Rstudio mess
In-Reply-To: <555198e1-0c39-f25a-8253-f115c4d2dbf9@gmail.com>
References: <fc59ef69-73fd-cb5e-fc96-3e13a5113115@psyctc.org>
 <555198e1-0c39-f25a-8253-f115c4d2dbf9@gmail.com>
Message-ID: <CWLP265MB3505057F50801DF8829455E1AE2FA@CWLP265MB3505.GBRP265.PROD.OUTLOOK.COM>

If I understand correctly, the errors come from github actions run on github. I think that you should update them first, since github switched to new versions in the meantime.

Georgi Boshnakov

Sent from Outlook for Android<https://aka.ms/AAb9ysg>
________________________________
From: R-package-devel <r-package-devel-bounces at r-project.org> on behalf of Duncan Murdoch <murdoch.duncan at gmail.com>
Sent: Wednesday, July 5, 2023 10:03:11 AM
To: chrishold at psyctc.org <chrishold at psyctc.org>; r-package-devel at r-project.org <r-package-devel at r-project.org>
Subject: Re: [R-pkg-devel] Help with a github/Rstudio mess

I think this isn't the right place to ask for this sort of help. Maybe
stackoverflow instead?

What I'd do in this case is to rename the local dir holding the
repository, then clone a new copy from Github.  Assuming that works,
compare all the files to make sure that you have all recent changes,
commit any that were missed, then throw away the damaged one.

Duncan Murdoch

On 05/07/2023 4:44 a.m., Chris Evans wrote:
> I hope this is a legitimate question here.  I have a package of very
> simple functions: https://urldefense.com/v3/__https://github.com/cpsyctc/CECPfuns__;!!PDiH4ENfjr2_Jw!FZGzBDcbpIrmi_GwRh-AOLdv_s3ZxBSRedrQOny_05Q7aFCZq6Qz2deRH-xf1t-f2t_aYV98T4tnvzDCQlxqxh28IYKhYCCSSxRo1w$ [github[.]com].  For the forseeable
> future it's really only to stop me constantly having to rewrite
> functions I use and it is only also used by probably two or three
> colleagues who
> also use R and are even less IT/programming/R competent than I am and
> are very happy to use my functions.
>
> I hadn't done any work on it for two years but came back to it yesterday
> and added a function (getCIforQuantiles).  There were warnings about
> things that are deprecated now in some of the older functions but
> otherwise things seemed OK.  However, I got a pkgdown error and warning
> after
> pushing the updated package to github:
>
> Annotations
> 1 error and 1 warning
> pkgdown
> Failed to get R 4.3.1: Failed to get R 4.3.1: Failed to download version
> 4.3.1: Error: Unexpected HTTP response: 404
> r-lib/actions/setup-r at v1 is deprecated.
> r-lib/actions/setup-r at v1 is deprecated. Please update your workflow to
> use the 'v2' version. Also look at the examples at
> https://urldefense.com/v3/__https://github.com/r-lib/actions/tree/v2/examples__;!!PDiH4ENfjr2_Jw!FZGzBDcbpIrmi_GwRh-AOLdv_s3ZxBSRedrQOny_05Q7aFCZq6Qz2deRH-xf1t-f2t_aYV98T4tnvzDCQlxqxh28IYKhYCD0u-NayA$ [github[.]com] because '@v2'
> workflows are much simpler than 'v1' workflows.
>
> So I tweaked
> https://urldefense.com/v3/__https://github.com/cpsyctc/CECPfuns/blob/main/.github/workflows/pkgdown.yaml__;!!PDiH4ENfjr2_Jw!FZGzBDcbpIrmi_GwRh-AOLdv_s3ZxBSRedrQOny_05Q7aFCZq6Qz2deRH-xf1t-f2t_aYV98T4tnvzDCQlxqxh28IYKhYCCnQO2uOA$ [github[.]com]
> to change
>      - uses: r-lib/actions/setup-r at v1
> to
>      - uses: r-lib/actions/setup-r at v2
> rather optimistically hoping that might make the warning go away.
>
> Today I did some work on the new function (trivial, correcting one
> "!is.na(" to the correct "is.na(" !!!).  More importantly, I created the
> test-getCIforQuantiles.R file for testthat to test the sanity checks and
> add three simple output checks.
>
> I built the source package locally, committed the changes and tried to
> push the update to github (inside Rstudio) but I get:
>
>   >>> /usr/bin/git push origin HEAD:refs/heads/main
> To https://urldefense.com/v3/__https://github.com/cpsyctc/CECPfuns.git__;!!PDiH4ENfjr2_Jw!FZGzBDcbpIrmi_GwRh-AOLdv_s3ZxBSRedrQOny_05Q7aFCZq6Qz2deRH-xf1t-f2t_aYV98T4tnvzDCQlxqxh28IYKhYCCMv5veZQ$ [github[.]com]
>    ! [rejected]        HEAD -> main (fetch first)
> error: failed to push some refs to 'https://urldefense.com/v3/__https://github.com/cpsyctc/CECPfuns.git__;!!PDiH4ENfjr2_Jw!FZGzBDcbpIrmi_GwRh-AOLdv_s3ZxBSRedrQOny_05Q7aFCZq6Qz2deRH-xf1t-f2t_aYV98T4tnvzDCQlxqxh28IYKhYCCMv5veZQ$ [github[.]com]'
> hint: Updates were rejected because the remote contains work that you do
> hint: not have locally. This is usually caused by another repository pushing
> hint: to the same ref. You may want to first integrate the remote changes
> hint: (e.g., 'git pull ...') before pushing again.
> hint: See the 'Note about fast-forwards' in 'git push --help' for details.
>
> OK.  So I try to pull thinking that made sense and that the change to
> pkgdown.yaml on github that I made yesterday is the offending change.
>
> However, when I pull (in Rstudio again) I get this:
>
>   >>> /usr/bin/git pull
> fatal: pack has 6 unresolved deltas
> fatal: fetch-pack: invalid index-pack output
>
> I have never felt on top of the complexities of git and github but I'm
> clearly way out of my depth.  I am hoping someone here can see what
> I need to do to get things back in synch and be able to get back to
> developing the package.
>

______________________________________________
R-package-devel at r-project.org mailing list
https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-package-devel__;!!PDiH4ENfjr2_Jw!FZGzBDcbpIrmi_GwRh-AOLdv_s3ZxBSRedrQOny_05Q7aFCZq6Qz2deRH-xf1t-f2t_aYV98T4tnvzDCQlxqxh28IYKhYCCPKVmhQw$ [stat[.]ethz[.]ch]

	[[alternative HTML version deleted]]


From @pencer@gr@ve@ @end|ng |rom e||ect|vede|en@e@org  Wed Jul  5 23:44:29 2023
From: @pencer@gr@ve@ @end|ng |rom e||ect|vede|en@e@org (Spencer Graves)
Date: Wed, 5 Jul 2023 16:44:29 -0500
Subject: [R-pkg-devel] GitHub Action not triggered by a commit to a fork
Message-ID: <2fdedef5-ab49-bd14-f6b4-825ac54b0e08@effectivedefense.org>

Hello:


	  Can someone help me understand why a commit to 
"https://github.com/sbgraves237/KFAS" does not trigger the GitHub 
Actions specified in ".github/workflows/check-standard.yaml"?


	  Thanks,
	  Spencer Graves


p.s.  This is a branch of helske/KFAS:master.  That may have something 
to do with the problem.


From d|ego@hern@ngomezherrero @end|ng |rom gm@||@com  Wed Jul  5 23:50:23 2023
From: d|ego@hern@ngomezherrero @end|ng |rom gm@||@com (=?UTF-8?Q?Diego_Hernang=C3=B3mez_Herrero?=)
Date: Wed, 5 Jul 2023 23:50:23 +0200
Subject: [R-pkg-devel] GitHub Action not triggered by a commit to a fork
In-Reply-To: <2fdedef5-ab49-bd14-f6b4-825ac54b0e08@effectivedefense.org>
References: <2fdedef5-ab49-bd14-f6b4-825ac54b0e08@effectivedefense.org>
Message-ID: <CAA-ibaz-ZF665+MXAfL=vA=2Gu28xMc1wbR0TjFYA_2FT+y-oQ@mail.gmail.com>

Hi,

GH actions are disabled by default on forks, have you checked <
https://github.com/sbgraves237/KFAS/actions> and clicked on the green
button?


Best

El mi?, 5 jul 2023 a las 23:45, Spencer Graves (<
spencer.graves at effectivedefense.org>) escribi?:

> Hello:
>
>
>           Can someone help me understand why a commit to
> "https://github.com/sbgraves237/KFAS" does not trigger the GitHub
> Actions specified in ".github/workflows/check-standard.yaml"?
>
>
>           Thanks,
>           Spencer Graves
>
>
> p.s.  This is a branch of helske/KFAS:master.  That may have something
> to do with the problem.
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>


-- 



Have a nice day!

	[[alternative HTML version deleted]]


From @pencer@gr@ve@ @end|ng |rom e||ect|vede|en@e@org  Thu Jul  6 00:56:48 2023
From: @pencer@gr@ve@ @end|ng |rom e||ect|vede|en@e@org (Spencer Graves)
Date: Wed, 5 Jul 2023 17:56:48 -0500
Subject: [R-pkg-devel] GitHub Action not triggered by a commit to a fork
In-Reply-To: <CAA-ibaz-ZF665+MXAfL=vA=2Gu28xMc1wbR0TjFYA_2FT+y-oQ@mail.gmail.com>
References: <2fdedef5-ab49-bd14-f6b4-825ac54b0e08@effectivedefense.org>
 <CAA-ibaz-ZF665+MXAfL=vA=2Gu28xMc1wbR0TjFYA_2FT+y-oQ@mail.gmail.com>
Message-ID: <da45b8f9-c089-9e38-85ed-9240137ffba5@effectivedefense.org>

Hi, Diego:


	  Thanks for the reply.


On 7/5/23 4:50 PM, Diego Hernang?mez Herrero wrote:
> Hi,
> 
> GH actions are disabled by default on forks, have you checked 
> <https://github.com/sbgraves237/KFAS/actions 
> <https://github.com/sbgraves237/KFAS/actions>> and clicked on the green 
> button?


	  Got it.  I pushed another change, and that triggered GitHub Action.


	  Thanks again, Spencer Graves
> 
> 
> Best
> 
> El mi?, 5 jul 2023 a las 23:45, Spencer Graves 
> (<spencer.graves at effectivedefense.org 
> <mailto:spencer.graves at effectivedefense.org>>) escribi?:
> 
>     Hello:
> 
> 
>      ? ? ? ? ? Can someone help me understand why a commit to
>     "https://github.com/sbgraves237/KFAS
>     <https://github.com/sbgraves237/KFAS>" does not trigger the GitHub
>     Actions specified in ".github/workflows/check-standard.yaml"?
> 
> 
>      ? ? ? ? ? Thanks,
>      ? ? ? ? ? Spencer Graves
> 
> 
>     p.s.? This is a branch of helske/KFAS:master.? That may have something
>     to do with the problem.
> 
>     ______________________________________________
>     R-package-devel at r-project.org <mailto:R-package-devel at r-project.org>
>     mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-package-devel
>     <https://stat.ethz.ch/mailman/listinfo/r-package-devel>
> 
> 
> 
> -- 
> 
> 
> 
> Have a nice day!


From @pencer@gr@ve@ @end|ng |rom e||ect|vede|en@e@org  Thu Jul  6 01:50:33 2023
From: @pencer@gr@ve@ @end|ng |rom e||ect|vede|en@e@org (Spencer Graves)
Date: Wed, 5 Jul 2023 18:50:33 -0500
Subject: [R-pkg-devel] gfortran: command not found
Message-ID: <481d3cd0-b1fb-e1c7-a66a-4f1cca8a0826@effectivedefense.org>

Hello:


	  "R CMD build KFAS" under macOS 11.7.8 stopped with:


using C compiler: ?Apple clang version 12.0.5 (clang-1205.0.22.9)?
sh: gfortran: command not found
using SDK: ?MacOSX11.3.sdk?
gfortran -arch x86_64  -fPIC  -Wall -g -O2  -c  approx.f90 -o approx.o
make: gfortran: No such file or directory
make: *** [approx.o] Error 1
ERROR: compilation failed for package ?KFAS'


	  My web search suggests several different ways to fix this problem, 
but I don't know which to try.



	  Suggestions?
	  Thanks,
	  Spencer Graves


p.s.  I have both "brew" and "port" installed.  I recently used "port" 
to upgrade another software package.  A web search suggested the 
following:


sudo port install gcc48
sudo port select -set gcc mp-gcc48


	  However, this comment was posted roughly 9 years ago.  Below please 
find sessionInfo().


sessionInfo()
R version 4.3.1 (2023-06-16)
Platform: x86_64-apple-darwin20 (64-bit)
Running under: macOS Big Sur 11.7.8

Matrix products: default
BLAS: 
/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib 

LAPACK: 
/Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRlapack.dylib; 
  LAPACK version 3.11.0

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

time zone: America/Chicago
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
  [1] compiler_4.3.1  R6_2.5.1        magrittr_2.0.3  cli_3.6.1
  [5] tools_4.3.1     glue_1.6.2      rstudioapi_0.14 roxygen2_7.2.3
  [9] xml2_1.3.4      vctrs_0.6.2     stringi_1.7.12  knitr_1.42
[13] xfun_0.39       stringr_1.5.0   lifecycle_1.0.3 rlang_1.1.1
[17] purrr_1.0.1


From @|mon@urb@nek @end|ng |rom R-project@org  Thu Jul  6 01:57:35 2023
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Thu, 6 Jul 2023 11:57:35 +1200
Subject: [R-pkg-devel] gfortran: command not found
In-Reply-To: <481d3cd0-b1fb-e1c7-a66a-4f1cca8a0826@effectivedefense.org>
References: <481d3cd0-b1fb-e1c7-a66a-4f1cca8a0826@effectivedefense.org>
Message-ID: <AB038664-AD56-446E-99A0-6A7607A548F7@R-project.org>

To quote from the page you downloaded R from:

This release uses Xcode 14.2/14.3 and GNU Fortran 12.2. If you wish to compile R packages which contain Fortran code, you may need to download the corresponding GNU Fortran compiler from https://mac.R-project.org/tools. 



> On Jul 6, 2023, at 11:50 AM, Spencer Graves <spencer.graves at effectivedefense.org> wrote:
> 
> Hello:
> 
> 
> 	  "R CMD build KFAS" under macOS 11.7.8 stopped with:
> 
> 
> using C compiler: ?Apple clang version 12.0.5 (clang-1205.0.22.9)?
> sh: gfortran: command not found
> using SDK: ?MacOSX11.3.sdk?
> gfortran -arch x86_64  -fPIC  -Wall -g -O2  -c  approx.f90 -o approx.o
> make: gfortran: No such file or directory
> make: *** [approx.o] Error 1
> ERROR: compilation failed for package ?KFAS'
> 
> 
> 	  My web search suggests several different ways to fix this problem, but I don't know which to try.
> 
> 
> 
> 	  Suggestions?
> 	  Thanks,
> 	  Spencer Graves
> 
> 
> p.s.  I have both "brew" and "port" installed.  I recently used "port" to upgrade another software package.  A web search suggested the following:
> 
> 
> sudo port install gcc48
> sudo port select -set gcc mp-gcc48
> 
> 
> 	  However, this comment was posted roughly 9 years ago.  Below please find sessionInfo().
> 
> 
> sessionInfo()
> R version 4.3.1 (2023-06-16)
> Platform: x86_64-apple-darwin20 (64-bit)
> Running under: macOS Big Sur 11.7.8
> 
> Matrix products: default
> BLAS: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib 
> LAPACK: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0
> 
> locale:
> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
> 
> time zone: America/Chicago
> tzcode source: internal
> 
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
> 
> loaded via a namespace (and not attached):
> [1] compiler_4.3.1  R6_2.5.1        magrittr_2.0.3  cli_3.6.1
> [5] tools_4.3.1     glue_1.6.2      rstudioapi_0.14 roxygen2_7.2.3
> [9] xml2_1.3.4      vctrs_0.6.2     stringi_1.7.12  knitr_1.42
> [13] xfun_0.39       stringr_1.5.0   lifecycle_1.0.3 rlang_1.1.1
> [17] purrr_1.0.1
> 
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
> 


From v|ncentv@nhee@ @end|ng |rom gm@||@com  Thu Jul  6 09:54:20 2023
From: v|ncentv@nhee@ @end|ng |rom gm@||@com (Vincent van Hees)
Date: Thu, 6 Jul 2023 09:54:20 +0200
Subject: [R-pkg-devel] Warning 'as.data.frame.POSIXct()' is deprecated
Message-ID: <CALnEB16CAR28kTtkvVcEOQj3Tmyc_rwCjckwexnQsA3_ZkFPCg@mail.gmail.com>

Dear all,

I see the following warning in my package test results:

```
Warning
Direct call of 'as.data.frame.POSIXct()' is deprecated.  Use
'as.data.frame.vector()' or 'as.data.frame()' instead
```

The warning is not always there and I struggle to make it reproducible. I
have encountered it in both Ubuntu 22.04 and in Windows 11, in both R 4.3.0
and 4.3.1, in both RStudio and in an GitHub Actions environment (example
<https://github.com/wadpac/GGIR/actions/runs/5463862340/jobs/9945096566>).
The warning gives the impression that I am doing something that R no longer
supports. However, I am not using the command as.data.frame.POSIXct()
anywhere directly in my code.

When I dive into the code where the warnings occur I see patterns like:

```
now = Sys.time()
df = data.frame (time = seq(now, now + 10, by =1),  B  = 1:11)
```

(this is a simplification of for example:
https://github.com/wadpac/GGIR/blob/master/tests/testthat/test_read.myacc.csv.R
)

Does this mean I am discouraged from putting a vector with POSIXct values
in a data.frame?
If yes, what would be the recommended work around?

I have been trying to find documentation or online discussions about this
warning but no luck so far. I see R NEWS
<https://cran.r-project.org/doc/manuals/r-release/NEWS.html> mentions
updates to POSIXct related objects several times in the past year but those
seem to be different issues.

Best,

Vincent

	[[alternative HTML version deleted]]


From t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk  Thu Jul  6 10:26:06 2023
From: t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk (Tim Taylor)
Date: Thu, 6 Jul 2023 09:26:06 +0100
Subject: [R-pkg-devel] Warning 'as.data.frame.POSIXct()' is deprecated
In-Reply-To: <CALnEB16CAR28kTtkvVcEOQj3Tmyc_rwCjckwexnQsA3_ZkFPCg@mail.gmail.com>
References: <CALnEB16CAR28kTtkvVcEOQj3Tmyc_rwCjckwexnQsA3_ZkFPCg@mail.gmail.com>
Message-ID: <1e8bc3aa-1614-3cd4-f0db-01735c152e7f@hiddenelephants.co.uk>

This *may* be an issue in lapply.? Let's see what others day. Reprex below

Sys.setenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_" = TRUE)
dat <- Sys.Date()
as.data.frame(dat)
#>????????? dat
#> 1 2023-07-06
lapply(dat, as.data.frame)
#> Warning: Direct call of 'as.data.frame.Date()' is deprecated.? Use
#> 'as.data.frame.vector()' or 'as.data.frame()' instead
#> [[1]]
#>?????? X[[i]]
#> 1 2023-07-06

Tim

On 06/07/2023 08:54, Vincent van Hees wrote:
> Dear all,
>
> I see the following warning in my package test results:
>
> ```
> Warning
> Direct call of 'as.data.frame.POSIXct()' is deprecated.  Use
> 'as.data.frame.vector()' or 'as.data.frame()' instead
> ```
>
> The warning is not always there and I struggle to make it reproducible. I
> have encountered it in both Ubuntu 22.04 and in Windows 11, in both R 4.3.0
> and 4.3.1, in both RStudio and in an GitHub Actions environment (example
> <https://github.com/wadpac/GGIR/actions/runs/5463862340/jobs/9945096566>).
> The warning gives the impression that I am doing something that R no longer
> supports. However, I am not using the command as.data.frame.POSIXct()
> anywhere directly in my code.
>
> When I dive into the code where the warnings occur I see patterns like:
>
> ```
> now = Sys.time()
> df = data.frame (time = seq(now, now + 10, by =1),  B  = 1:11)
> ```
>
> (this is a simplification of for example:
> https://github.com/wadpac/GGIR/blob/master/tests/testthat/test_read.myacc.csv.R
> )
>
> Does this mean I am discouraged from putting a vector with POSIXct values
> in a data.frame?
> If yes, what would be the recommended work around?
>
> I have been trying to find documentation or online discussions about this
> warning but no luck so far. I see R NEWS
> <https://cran.r-project.org/doc/manuals/r-release/NEWS.html> mentions
> updates to POSIXct related objects several times in the past year but those
> seem to be different issues.
>
> Best,
>
> Vincent
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk  Thu Jul  6 10:41:45 2023
From: t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk (Tim Taylor)
Date: Thu, 6 Jul 2023 09:41:45 +0100
Subject: [R-pkg-devel] Warning 'as.data.frame.POSIXct()' is deprecated
In-Reply-To: <1e8bc3aa-1614-3cd4-f0db-01735c152e7f@hiddenelephants.co.uk>
References: <CALnEB16CAR28kTtkvVcEOQj3Tmyc_rwCjckwexnQsA3_ZkFPCg@mail.gmail.com>
 <1e8bc3aa-1614-3cd4-f0db-01735c152e7f@hiddenelephants.co.uk>
Message-ID: <15178f56-0d28-e7fa-000f-959c00dd63ca@hiddenelephants.co.uk>

Apologies - I've not had enough caffeine just yet. The reprex below 
highlights the issue but I think the code which implemented the change 
*may* need tweaking not lapply.

Tim

On 06/07/2023 09:26, Tim Taylor wrote:
> This *may* be an issue in lapply.? Let's see what others day. Reprex 
> below
>
> Sys.setenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_" = TRUE)
> dat <- Sys.Date()
> as.data.frame(dat)
> #>????????? dat
> #> 1 2023-07-06
> lapply(dat, as.data.frame)
> #> Warning: Direct call of 'as.data.frame.Date()' is deprecated.? Use
> #> 'as.data.frame.vector()' or 'as.data.frame()' instead
> #> [[1]]
> #>?????? X[[i]]
> #> 1 2023-07-06
>
> Tim
>
> On 06/07/2023 08:54, Vincent van Hees wrote:
>> Dear all,
>>
>> I see the following warning in my package test results:
>>
>> ```
>> Warning
>> Direct call of 'as.data.frame.POSIXct()' is deprecated.? Use
>> 'as.data.frame.vector()' or 'as.data.frame()' instead
>> ```
>>
>> The warning is not always there and I struggle to make it 
>> reproducible. I
>> have encountered it in both Ubuntu 22.04 and in Windows 11, in both R 
>> 4.3.0
>> and 4.3.1, in both RStudio and in an GitHub Actions environment (example
>> <https://github.com/wadpac/GGIR/actions/runs/5463862340/jobs/9945096566>). 
>>
>> The warning gives the impression that I am doing something that R no 
>> longer
>> supports. However, I am not using the command as.data.frame.POSIXct()
>> anywhere directly in my code.
>>
>> When I dive into the code where the warnings occur I see patterns like:
>>
>> ```
>> now = Sys.time()
>> df = data.frame (time = seq(now, now + 10, by =1),? B? = 1:11)
>> ```
>>
>> (this is a simplification of for example:
>> https://github.com/wadpac/GGIR/blob/master/tests/testthat/test_read.myacc.csv.R 
>>
>> )
>>
>> Does this mean I am discouraged from putting a vector with POSIXct 
>> values
>> in a data.frame?
>> If yes, what would be the recommended work around?
>>
>> I have been trying to find documentation or online discussions about 
>> this
>> warning but no luck so far. I see R NEWS
>> <https://cran.r-project.org/doc/manuals/r-release/NEWS.html> mentions
>> updates to POSIXct related objects several times in the past year but 
>> those
>> seem to be different issues.
>>
>> Best,
>>
>> Vincent
>>
>> ????[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-package-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From v|ncentv@nhee@ @end|ng |rom gm@||@com  Thu Jul  6 14:31:54 2023
From: v|ncentv@nhee@ @end|ng |rom gm@||@com (Vincent van Hees)
Date: Thu, 6 Jul 2023 14:31:54 +0200
Subject: [R-pkg-devel] Warning 'as.data.frame.POSIXct()' is deprecated
In-Reply-To: <15178f56-0d28-e7fa-000f-959c00dd63ca@hiddenelephants.co.uk>
References: <CALnEB16CAR28kTtkvVcEOQj3Tmyc_rwCjckwexnQsA3_ZkFPCg@mail.gmail.com>
 <1e8bc3aa-1614-3cd4-f0db-01735c152e7f@hiddenelephants.co.uk>
 <15178f56-0d28-e7fa-000f-959c00dd63ca@hiddenelephants.co.uk>
Message-ID: <CALnEB17VsNZC5U_usC+qxXgx4ngZFwGpO2W_Tg8L6WQ9rm83Qg@mail.gmail.com>

Thanks, in that case the REPLEX for the issue may need to be:

> remember = Sys.getenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_")
> Sys.setenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_" = TRUE)
> data.frame(time = Sys.time())
                 time
1 2023-07-06 14:29:37
> data.frame(time = as.POSIXlt(Sys.time()))
                 time
1 2023-07-06 14:29:37
Warning message:
Direct call of 'as.data.frame.POSIXct()' is deprecated.  Use
'as.data.frame.vector()' or 'as.data.frame()' instead
> Sys.setenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_" = remember)

Vincent

On Thu, 6 Jul 2023 at 10:41, Tim Taylor <tim.taylor at hiddenelephants.co.uk>
wrote:

> Apologies - I've not had enough caffeine just yet. The reprex below
> highlights the issue but I think the code which implemented the change
> *may* need tweaking not lapply.
>
> Tim
>
> On 06/07/2023 09:26, Tim Taylor wrote:
> > This *may* be an issue in lapply.  Let's see what others day. Reprex
> > below
> >
> > Sys.setenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_" = TRUE)
> > dat <- Sys.Date()
> > as.data.frame(dat)
> > #>          dat
> > #> 1 2023-07-06
> > lapply(dat, as.data.frame)
> > #> Warning: Direct call of 'as.data.frame.Date()' is deprecated.  Use
> > #> 'as.data.frame.vector()' or 'as.data.frame()' instead
> > #> [[1]]
> > #>       X[[i]]
> > #> 1 2023-07-06
> >
> > Tim
> >
> > On 06/07/2023 08:54, Vincent van Hees wrote:
> >> Dear all,
> >>
> >> I see the following warning in my package test results:
> >>
> >> ```
> >> Warning
> >> Direct call of 'as.data.frame.POSIXct()' is deprecated.  Use
> >> 'as.data.frame.vector()' or 'as.data.frame()' instead
> >> ```
> >>
> >> The warning is not always there and I struggle to make it
> >> reproducible. I
> >> have encountered it in both Ubuntu 22.04 and in Windows 11, in both R
> >> 4.3.0
> >> and 4.3.1, in both RStudio and in an GitHub Actions environment (example
> >> <https://github.com/wadpac/GGIR/actions/runs/5463862340/jobs/9945096566>).
>
> >>
> >> The warning gives the impression that I am doing something that R no
> >> longer
> >> supports. However, I am not using the command as.data.frame.POSIXct()
> >> anywhere directly in my code.
> >>
> >> When I dive into the code where the warnings occur I see patterns like:
> >>
> >> ```
> >> now = Sys.time()
> >> df = data.frame (time = seq(now, now + 10, by =1),  B  = 1:11)
> >> ```
> >>
> >> (this is a simplification of for example:
> >>
> https://github.com/wadpac/GGIR/blob/master/tests/testthat/test_read.myacc.csv.R
> >>
> >> )
> >>
> >> Does this mean I am discouraged from putting a vector with POSIXct
> >> values
> >> in a data.frame?
> >> If yes, what would be the recommended work around?
> >>
> >> I have been trying to find documentation or online discussions about
> >> this
> >> warning but no luck so far. I see R NEWS
> >> <https://cran.r-project.org/doc/manuals/r-release/NEWS.html> mentions
> >> updates to POSIXct related objects several times in the past year but
> >> those
> >> seem to be different issues.
> >>
> >> Best,
> >>
> >> Vincent
> >>
> >>     [[alternative HTML version deleted]]
> >>
> >> ______________________________________________
> >> R-package-devel at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-package-devel
> >
> > ______________________________________________
> > R-package-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-package-devel
>

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Thu Jul  6 15:14:31 2023
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Thu, 6 Jul 2023 08:14:31 -0500
Subject: [R-pkg-devel] Warning 'as.data.frame.POSIXct()' is deprecated
In-Reply-To: <CALnEB17VsNZC5U_usC+qxXgx4ngZFwGpO2W_Tg8L6WQ9rm83Qg@mail.gmail.com>
References: <CALnEB16CAR28kTtkvVcEOQj3Tmyc_rwCjckwexnQsA3_ZkFPCg@mail.gmail.com>
 <1e8bc3aa-1614-3cd4-f0db-01735c152e7f@hiddenelephants.co.uk>
 <15178f56-0d28-e7fa-000f-959c00dd63ca@hiddenelephants.co.uk>
 <CALnEB17VsNZC5U_usC+qxXgx4ngZFwGpO2W_Tg8L6WQ9rm83Qg@mail.gmail.com>
Message-ID: <25766.48695.704943.188152@rob.eddelbuettel.com>


On 6 July 2023 at 14:31, Vincent van Hees wrote:
| Thanks, in that case the REPLEX for the issue may need to be:
| 
| > remember = Sys.getenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_")
| > Sys.setenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_" = TRUE)
| > data.frame(time = Sys.time())
|                  time
| 1 2023-07-06 14:29:37
| > data.frame(time = as.POSIXlt(Sys.time()))
|                  time
| 1 2023-07-06 14:29:37
| Warning message:
| Direct call of 'as.data.frame.POSIXct()' is deprecated.  Use
| 'as.data.frame.vector()' or 'as.data.frame()' instead
| > Sys.setenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_" = remember)

Does _not_ happen in a plain R session.

Does happen when `library(tidyverse)` is executed first. May come from
`tibble` or `vectors`, I have a habit of not using those much. 

Dirk
 
| Vincent
| 
| On Thu, 6 Jul 2023 at 10:41, Tim Taylor <tim.taylor at hiddenelephants.co.uk>
| wrote:
| 
| > Apologies - I've not had enough caffeine just yet. The reprex below
| > highlights the issue but I think the code which implemented the change
| > *may* need tweaking not lapply.
| >
| > Tim
| >
| > On 06/07/2023 09:26, Tim Taylor wrote:
| > > This *may* be an issue in lapply.  Let's see what others day. Reprex
| > > below
| > >
| > > Sys.setenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_" = TRUE)
| > > dat <- Sys.Date()
| > > as.data.frame(dat)
| > > #>          dat
| > > #> 1 2023-07-06
| > > lapply(dat, as.data.frame)
| > > #> Warning: Direct call of 'as.data.frame.Date()' is deprecated.  Use
| > > #> 'as.data.frame.vector()' or 'as.data.frame()' instead
| > > #> [[1]]
| > > #>       X[[i]]
| > > #> 1 2023-07-06
| > >
| > > Tim
| > >
| > > On 06/07/2023 08:54, Vincent van Hees wrote:
| > >> Dear all,
| > >>
| > >> I see the following warning in my package test results:
| > >>
| > >> ```
| > >> Warning
| > >> Direct call of 'as.data.frame.POSIXct()' is deprecated.  Use
| > >> 'as.data.frame.vector()' or 'as.data.frame()' instead
| > >> ```
| > >>
| > >> The warning is not always there and I struggle to make it
| > >> reproducible. I
| > >> have encountered it in both Ubuntu 22.04 and in Windows 11, in both R
| > >> 4.3.0
| > >> and 4.3.1, in both RStudio and in an GitHub Actions environment (example
| > >> <https://github.com/wadpac/GGIR/actions/runs/5463862340/jobs/9945096566>).
| >
| > >>
| > >> The warning gives the impression that I am doing something that R no
| > >> longer
| > >> supports. However, I am not using the command as.data.frame.POSIXct()
| > >> anywhere directly in my code.
| > >>
| > >> When I dive into the code where the warnings occur I see patterns like:
| > >>
| > >> ```
| > >> now = Sys.time()
| > >> df = data.frame (time = seq(now, now + 10, by =1),  B  = 1:11)
| > >> ```
| > >>
| > >> (this is a simplification of for example:
| > >>
| > https://github.com/wadpac/GGIR/blob/master/tests/testthat/test_read.myacc.csv.R
| > >>
| > >> )
| > >>
| > >> Does this mean I am discouraged from putting a vector with POSIXct
| > >> values
| > >> in a data.frame?
| > >> If yes, what would be the recommended work around?
| > >>
| > >> I have been trying to find documentation or online discussions about
| > >> this
| > >> warning but no luck so far. I see R NEWS
| > >> <https://cran.r-project.org/doc/manuals/r-release/NEWS.html> mentions
| > >> updates to POSIXct related objects several times in the past year but
| > >> those
| > >> seem to be different issues.
| > >>
| > >> Best,
| > >>
| > >> Vincent
| > >>
| > >>     [[alternative HTML version deleted]]
| > >>
| > >> ______________________________________________
| > >> R-package-devel at r-project.org mailing list
| > >> https://stat.ethz.ch/mailman/listinfo/r-package-devel
| > >
| > > ______________________________________________
| > > R-package-devel at r-project.org mailing list
| > > https://stat.ethz.ch/mailman/listinfo/r-package-devel
| >
| 
| 	[[alternative HTML version deleted]]
| 
| ______________________________________________
| R-package-devel at r-project.org mailing list
| https://stat.ethz.ch/mailman/listinfo/r-package-devel

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From edd @end|ng |rom deb|@n@org  Thu Jul  6 15:22:24 2023
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Thu, 6 Jul 2023 08:22:24 -0500
Subject: [R-pkg-devel] Warning 'as.data.frame.POSIXct()' is deprecated
In-Reply-To: <25766.48695.704943.188152@rob.eddelbuettel.com>
References: <CALnEB16CAR28kTtkvVcEOQj3Tmyc_rwCjckwexnQsA3_ZkFPCg@mail.gmail.com>
 <1e8bc3aa-1614-3cd4-f0db-01735c152e7f@hiddenelephants.co.uk>
 <15178f56-0d28-e7fa-000f-959c00dd63ca@hiddenelephants.co.uk>
 <CALnEB17VsNZC5U_usC+qxXgx4ngZFwGpO2W_Tg8L6WQ9rm83Qg@mail.gmail.com>
 <25766.48695.704943.188152@rob.eddelbuettel.com>
Message-ID: <25766.49168.981543.584124@rob.eddelbuettel.com>


On 6 July 2023 at 08:14, Dirk Eddelbuettel wrote:
| 
| On 6 July 2023 at 14:31, Vincent van Hees wrote:
| | Thanks, in that case the REPLEX for the issue may need to be:
| | 
| | > remember = Sys.getenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_")
| | > Sys.setenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_" = TRUE)
| | > data.frame(time = Sys.time())
| |                  time
| | 1 2023-07-06 14:29:37
| | > data.frame(time = as.POSIXlt(Sys.time()))
| |                  time
| | 1 2023-07-06 14:29:37
| | Warning message:
| | Direct call of 'as.data.frame.POSIXct()' is deprecated.  Use
| | 'as.data.frame.vector()' or 'as.data.frame()' instead
| | > Sys.setenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_" = remember)
| 
| Does _not_ happen in a plain R session.
| 
| Does happen when `library(tidyverse)` is executed first. May come from
| `tibble` or `vectors`, I have a habit of not using those much. 

Err, no, wait. I may have confused myself here jumping between R-devel and
R (release).  Please disregard, and apologies for the noise.

In any event, assigning a POSIXlt (which is an 11-element list) to a single
column is not a great idiom and we had the POSIXct conversion there for a
while IIRC.

But assigning a POSIXct to a column should always work, and I would be
surprised to find a minimally complete reproducible example showing that it
does not.  

Dirk

| Dirk
|  
| | Vincent
| | 
| | On Thu, 6 Jul 2023 at 10:41, Tim Taylor <tim.taylor at hiddenelephants.co.uk>
| | wrote:
| | 
| | > Apologies - I've not had enough caffeine just yet. The reprex below
| | > highlights the issue but I think the code which implemented the change
| | > *may* need tweaking not lapply.
| | >
| | > Tim
| | >
| | > On 06/07/2023 09:26, Tim Taylor wrote:
| | > > This *may* be an issue in lapply.  Let's see what others day. Reprex
| | > > below
| | > >
| | > > Sys.setenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_" = TRUE)
| | > > dat <- Sys.Date()
| | > > as.data.frame(dat)
| | > > #>          dat
| | > > #> 1 2023-07-06
| | > > lapply(dat, as.data.frame)
| | > > #> Warning: Direct call of 'as.data.frame.Date()' is deprecated.  Use
| | > > #> 'as.data.frame.vector()' or 'as.data.frame()' instead
| | > > #> [[1]]
| | > > #>       X[[i]]
| | > > #> 1 2023-07-06
| | > >
| | > > Tim
| | > >
| | > > On 06/07/2023 08:54, Vincent van Hees wrote:
| | > >> Dear all,
| | > >>
| | > >> I see the following warning in my package test results:
| | > >>
| | > >> ```
| | > >> Warning
| | > >> Direct call of 'as.data.frame.POSIXct()' is deprecated.  Use
| | > >> 'as.data.frame.vector()' or 'as.data.frame()' instead
| | > >> ```
| | > >>
| | > >> The warning is not always there and I struggle to make it
| | > >> reproducible. I
| | > >> have encountered it in both Ubuntu 22.04 and in Windows 11, in both R
| | > >> 4.3.0
| | > >> and 4.3.1, in both RStudio and in an GitHub Actions environment (example
| | > >> <https://github.com/wadpac/GGIR/actions/runs/5463862340/jobs/9945096566>).
| | >
| | > >>
| | > >> The warning gives the impression that I am doing something that R no
| | > >> longer
| | > >> supports. However, I am not using the command as.data.frame.POSIXct()
| | > >> anywhere directly in my code.
| | > >>
| | > >> When I dive into the code where the warnings occur I see patterns like:
| | > >>
| | > >> ```
| | > >> now = Sys.time()
| | > >> df = data.frame (time = seq(now, now + 10, by =1),  B  = 1:11)
| | > >> ```
| | > >>
| | > >> (this is a simplification of for example:
| | > >>
| | > https://github.com/wadpac/GGIR/blob/master/tests/testthat/test_read.myacc.csv.R
| | > >>
| | > >> )
| | > >>
| | > >> Does this mean I am discouraged from putting a vector with POSIXct
| | > >> values
| | > >> in a data.frame?
| | > >> If yes, what would be the recommended work around?
| | > >>
| | > >> I have been trying to find documentation or online discussions about
| | > >> this
| | > >> warning but no luck so far. I see R NEWS
| | > >> <https://cran.r-project.org/doc/manuals/r-release/NEWS.html> mentions
| | > >> updates to POSIXct related objects several times in the past year but
| | > >> those
| | > >> seem to be different issues.
| | > >>
| | > >> Best,
| | > >>
| | > >> Vincent
| | > >>
| | > >>     [[alternative HTML version deleted]]
| | > >>
| | > >> ______________________________________________
| | > >> R-package-devel at r-project.org mailing list
| | > >> https://stat.ethz.ch/mailman/listinfo/r-package-devel
| | > >
| | > > ______________________________________________
| | > > R-package-devel at r-project.org mailing list
| | > > https://stat.ethz.ch/mailman/listinfo/r-package-devel
| | >
| | 
| | 	[[alternative HTML version deleted]]
| | 
| | ______________________________________________
| | R-package-devel at r-project.org mailing list
| | https://stat.ethz.ch/mailman/listinfo/r-package-devel
| 
| -- 
| dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From e@ @end|ng |rom enr|co@chum@nn@net  Thu Jul  6 15:42:12 2023
From: e@ @end|ng |rom enr|co@chum@nn@net (Enrico Schumann)
Date: Thu, 06 Jul 2023 15:42:12 +0200
Subject: [R-pkg-devel] Warning 'as.data.frame.POSIXct()' is deprecated
In-Reply-To: <CALnEB17VsNZC5U_usC+qxXgx4ngZFwGpO2W_Tg8L6WQ9rm83Qg@mail.gmail.com>
 (Vincent van Hees's message of "Thu, 6 Jul 2023 14:31:54 +0200")
References: <CALnEB16CAR28kTtkvVcEOQj3Tmyc_rwCjckwexnQsA3_ZkFPCg@mail.gmail.com>
 <1e8bc3aa-1614-3cd4-f0db-01735c152e7f@hiddenelephants.co.uk>
 <15178f56-0d28-e7fa-000f-959c00dd63ca@hiddenelephants.co.uk>
 <CALnEB17VsNZC5U_usC+qxXgx4ngZFwGpO2W_Tg8L6WQ9rm83Qg@mail.gmail.com>
Message-ID: <87wmzdcg23.fsf@aldus>

On Thu, 06 Jul 2023, Vincent van Hees writes:

> Thanks, in that case the REPLEX for the issue may need to be:
>
>> remember = Sys.getenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_")
>> Sys.setenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_" = TRUE)
>> data.frame(time = Sys.time())
>                  time
> 1 2023-07-06 14:29:37
>> data.frame(time = as.POSIXlt(Sys.time()))
>                  time
> 1 2023-07-06 14:29:37
> Warning message:
> Direct call of 'as.data.frame.POSIXct()' is deprecated.  Use
> 'as.data.frame.vector()' or 'as.data.frame()' instead
>> Sys.setenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_" = remember)


I think it happens because

    data.frame(<POSIXlt>)

calls 'as.data.frame.POSIXlt' (per its S3-class), which
in turn directly calls 'as.data.frame.POSIXct':

    ## as.data.frame.POSIXlt
    function (x, row.names = NULL, optional = FALSE, ...) 
    {
        value <- as.data.frame.POSIXct(as.POSIXct(x), row.names, 
            optional, ...)
        if (!optional) 
            names(value) <- deparse1(substitute(x))
        value
    }
    <environment: namespace:base>

Kind regards
    Enrico

> Vincent
>
> On Thu, 6 Jul 2023 at 10:41, Tim Taylor <tim.taylor at hiddenelephants.co.uk>
> wrote:
>
>> Apologies - I've not had enough caffeine just yet. The reprex below
>> highlights the issue but I think the code which implemented the change
>> *may* need tweaking not lapply.
>>
>> Tim
>>
>> On 06/07/2023 09:26, Tim Taylor wrote:
>> > This *may* be an issue in lapply.  Let's see what others day. Reprex
>> > below
>> >
>> > Sys.setenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_" = TRUE)
>> > dat <- Sys.Date()
>> > as.data.frame(dat)
>> > #>          dat
>> > #> 1 2023-07-06
>> > lapply(dat, as.data.frame)
>> > #> Warning: Direct call of 'as.data.frame.Date()' is deprecated.  Use
>> > #> 'as.data.frame.vector()' or 'as.data.frame()' instead
>> > #> [[1]]
>> > #>       X[[i]]
>> > #> 1 2023-07-06
>> >
>> > Tim
>> >
>> > On 06/07/2023 08:54, Vincent van Hees wrote:
>> >> Dear all,
>> >>
>> >> I see the following warning in my package test results:
>> >>
>> >> ```
>> >> Warning
>> >> Direct call of 'as.data.frame.POSIXct()' is deprecated.  Use
>> >> 'as.data.frame.vector()' or 'as.data.frame()' instead
>> >> ```
>> >>
>> >> The warning is not always there and I struggle to make it
>> >> reproducible. I
>> >> have encountered it in both Ubuntu 22.04 and in Windows 11, in both R
>> >> 4.3.0
>> >> and 4.3.1, in both RStudio and in an GitHub Actions environment (example
>> >> <https://github.com/wadpac/GGIR/actions/runs/5463862340/jobs/9945096566>).
>>
>> >>
>> >> The warning gives the impression that I am doing something that R no
>> >> longer
>> >> supports. However, I am not using the command as.data.frame.POSIXct()
>> >> anywhere directly in my code.
>> >>
>> >> When I dive into the code where the warnings occur I see patterns like:
>> >>
>> >> ```
>> >> now = Sys.time()
>> >> df = data.frame (time = seq(now, now + 10, by =1),  B  = 1:11)
>> >> ```
>> >>
>> >> (this is a simplification of for example:
>> >>
>> https://github.com/wadpac/GGIR/blob/master/tests/testthat/test_read.myacc.csv.R
>> >>
>> >> )
>> >>
>> >> Does this mean I am discouraged from putting a vector with POSIXct
>> >> values
>> >> in a data.frame?
>> >> If yes, what would be the recommended work around?
>> >>
>> >> I have been trying to find documentation or online discussions about
>> >> this
>> >> warning but no luck so far. I see R NEWS
>> >> <https://cran.r-project.org/doc/manuals/r-release/NEWS.html> mentions
>> >> updates to POSIXct related objects several times in the past year but
>> >> those
>> >> seem to be different issues.
>> >>
>> >> Best,
>> >>
>> >> Vincent
>> >>
>> >>     [[alternative HTML version deleted]]
>> >>
>> >> ______________________________________________
>> >> R-package-devel at r-project.org mailing list
>> >> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>> >
>> > ______________________________________________
>> > R-package-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-package-devel
>>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel

-- 
Enrico Schumann
Lucerne, Switzerland
http://enricoschumann.net


From v|ncentv@nhee@ @end|ng |rom gm@||@com  Thu Jul  6 15:54:22 2023
From: v|ncentv@nhee@ @end|ng |rom gm@||@com (Vincent van Hees)
Date: Thu, 6 Jul 2023 15:54:22 +0200
Subject: [R-pkg-devel] Warning 'as.data.frame.POSIXct()' is deprecated
In-Reply-To: <25766.49168.981543.584124@rob.eddelbuettel.com>
References: <CALnEB16CAR28kTtkvVcEOQj3Tmyc_rwCjckwexnQsA3_ZkFPCg@mail.gmail.com>
 <1e8bc3aa-1614-3cd4-f0db-01735c152e7f@hiddenelephants.co.uk>
 <15178f56-0d28-e7fa-000f-959c00dd63ca@hiddenelephants.co.uk>
 <CALnEB17VsNZC5U_usC+qxXgx4ngZFwGpO2W_Tg8L6WQ9rm83Qg@mail.gmail.com>
 <25766.48695.704943.188152@rob.eddelbuettel.com>
 <25766.49168.981543.584124@rob.eddelbuettel.com>
Message-ID: <CALnEB16wamBT7XFT_4ThGoDZ8byv8CVD5ZE2bzmVgiiDdGKjQA@mail.gmail.com>

Thanks Dirk,
My plan will then be to revise my package to avoid using POSIXlt when
POSIXct is also sufficient, given that I am storing timestamps in
data.frames a lot. In the few instances where POSIXlt may be necessary I
will avoid storing them in a data.frame.
Vincent

On Thu, 6 Jul 2023 at 15:22, Dirk Eddelbuettel <edd at debian.org> wrote:

>
> On 6 July 2023 at 08:14, Dirk Eddelbuettel wrote:
> |
> | On 6 July 2023 at 14:31, Vincent van Hees wrote:
> | | Thanks, in that case the REPLEX for the issue may need to be:
> | |
> | | > remember = Sys.getenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_")
> | | > Sys.setenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_" = TRUE)
> | | > data.frame(time = Sys.time())
> | |                  time
> | | 1 2023-07-06 14:29:37
> | | > data.frame(time = as.POSIXlt(Sys.time()))
> | |                  time
> | | 1 2023-07-06 14:29:37
> | | Warning message:
> | | Direct call of 'as.data.frame.POSIXct()' is deprecated.  Use
> | | 'as.data.frame.vector()' or 'as.data.frame()' instead
> | | > Sys.setenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_" = remember)
> |
> | Does _not_ happen in a plain R session.
> |
> | Does happen when `library(tidyverse)` is executed first. May come from
> | `tibble` or `vectors`, I have a habit of not using those much.
>
> Err, no, wait. I may have confused myself here jumping between R-devel and
> R (release).  Please disregard, and apologies for the noise.
>
> In any event, assigning a POSIXlt (which is an 11-element list) to a single
> column is not a great idiom and we had the POSIXct conversion there for a
> while IIRC.
>
> But assigning a POSIXct to a column should always work, and I would be
> surprised to find a minimally complete reproducible example showing that it
> does not.
>
> Dirk
>
> | Dirk
> |
> | | Vincent
> | |
> | | On Thu, 6 Jul 2023 at 10:41, Tim Taylor <
> tim.taylor at hiddenelephants.co.uk>
> | | wrote:
> | |
> | | > Apologies - I've not had enough caffeine just yet. The reprex below
> | | > highlights the issue but I think the code which implemented the
> change
> | | > *may* need tweaking not lapply.
> | | >
> | | > Tim
> | | >
> | | > On 06/07/2023 09:26, Tim Taylor wrote:
> | | > > This *may* be an issue in lapply.  Let's see what others day.
> Reprex
> | | > > below
> | | > >
> | | > > Sys.setenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_" = TRUE)
> | | > > dat <- Sys.Date()
> | | > > as.data.frame(dat)
> | | > > #>          dat
> | | > > #> 1 2023-07-06
> | | > > lapply(dat, as.data.frame)
> | | > > #> Warning: Direct call of 'as.data.frame.Date()' is deprecated.
> Use
> | | > > #> 'as.data.frame.vector()' or 'as.data.frame()' instead
> | | > > #> [[1]]
> | | > > #>       X[[i]]
> | | > > #> 1 2023-07-06
> | | > >
> | | > > Tim
> | | > >
> | | > > On 06/07/2023 08:54, Vincent van Hees wrote:
> | | > >> Dear all,
> | | > >>
> | | > >> I see the following warning in my package test results:
> | | > >>
> | | > >> ```
> | | > >> Warning
> | | > >> Direct call of 'as.data.frame.POSIXct()' is deprecated.  Use
> | | > >> 'as.data.frame.vector()' or 'as.data.frame()' instead
> | | > >> ```
> | | > >>
> | | > >> The warning is not always there and I struggle to make it
> | | > >> reproducible. I
> | | > >> have encountered it in both Ubuntu 22.04 and in Windows 11, in
> both R
> | | > >> 4.3.0
> | | > >> and 4.3.1, in both RStudio and in an GitHub Actions environment
> (example
> | | > >> <
> https://github.com/wadpac/GGIR/actions/runs/5463862340/jobs/9945096566>).
> | | >
> | | > >>
> | | > >> The warning gives the impression that I am doing something that R
> no
> | | > >> longer
> | | > >> supports. However, I am not using the command
> as.data.frame.POSIXct()
> | | > >> anywhere directly in my code.
> | | > >>
> | | > >> When I dive into the code where the warnings occur I see patterns
> like:
> | | > >>
> | | > >> ```
> | | > >> now = Sys.time()
> | | > >> df = data.frame (time = seq(now, now + 10, by =1),  B  = 1:11)
> | | > >> ```
> | | > >>
> | | > >> (this is a simplification of for example:
> | | > >>
> | | >
> https://github.com/wadpac/GGIR/blob/master/tests/testthat/test_read.myacc.csv.R
> | | > >>
> | | > >> )
> | | > >>
> | | > >> Does this mean I am discouraged from putting a vector with POSIXct
> | | > >> values
> | | > >> in a data.frame?
> | | > >> If yes, what would be the recommended work around?
> | | > >>
> | | > >> I have been trying to find documentation or online discussions
> about
> | | > >> this
> | | > >> warning but no luck so far. I see R NEWS
> | | > >> <https://cran.r-project.org/doc/manuals/r-release/NEWS.html>
> mentions
> | | > >> updates to POSIXct related objects several times in the past year
> but
> | | > >> those
> | | > >> seem to be different issues.
> | | > >>
> | | > >> Best,
> | | > >>
> | | > >> Vincent
> | | > >>
> | | > >>     [[alternative HTML version deleted]]
> | | > >>
> | | > >> ______________________________________________
> | | > >> R-package-devel at r-project.org mailing list
> | | > >> https://stat.ethz.ch/mailman/listinfo/r-package-devel
> | | > >
> | | > > ______________________________________________
> | | > > R-package-devel at r-project.org mailing list
> | | > > https://stat.ethz.ch/mailman/listinfo/r-package-devel
> | | >
> | |
> | |     [[alternative HTML version deleted]]
> | |
> | | ______________________________________________
> | | R-package-devel at r-project.org mailing list
> | | https://stat.ethz.ch/mailman/listinfo/r-package-devel
> |
> | --
> | dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>
> --
> dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>

	[[alternative HTML version deleted]]


From t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk  Thu Jul  6 16:11:41 2023
From: t|m@t@y|or @end|ng |rom h|ddene|eph@nt@@co@uk (Tim Taylor)
Date: Thu, 6 Jul 2023 15:11:41 +0100
Subject: [R-pkg-devel] Warning 'as.data.frame.POSIXct()' is deprecated
In-Reply-To: <87wmzdcg23.fsf@aldus>
References: <CALnEB16CAR28kTtkvVcEOQj3Tmyc_rwCjckwexnQsA3_ZkFPCg@mail.gmail.com>
 <1e8bc3aa-1614-3cd4-f0db-01735c152e7f@hiddenelephants.co.uk>
 <15178f56-0d28-e7fa-000f-959c00dd63ca@hiddenelephants.co.uk>
 <CALnEB17VsNZC5U_usC+qxXgx4ngZFwGpO2W_Tg8L6WQ9rm83Qg@mail.gmail.com>
 <87wmzdcg23.fsf@aldus>
Message-ID: <4d7bc097-0ea9-96b2-81ea-36203a7f7310@hiddenelephants.co.uk>

Ah yes ... and reading the as.data.frame help we see (emphasis mine):

"... Direct calls to as.data.frame.<class>() are still possible (*base 
package!*), for 12 atomic base classes, but will deprecated ..."

So it does seem that a lot of these warnings are triggered by base R and 
updating this code may be a work in progress.


A little tangential (but related) to this though is still the fact that 
we can trigger the warning with:

lapply(Sys.Date(), as.data.frame)

so I wonder if the code in base/R/zzz.R 
(https://github.com/wch/r-source/blob/9f1940663f902174034a01197e55fd17c767213a/src/library/base/R/zzz.R#L664-L686) 
does need tweaking?

At this stage this is probably more a question for R-devel though.

Tim


On 06/07/2023 14:42, Enrico Schumann wrote:
> On Thu, 06 Jul 2023, Vincent van Hees writes:
>
>> Thanks, in that case the REPLEX for the issue may need to be:
>>
>>> remember = Sys.getenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_")
>>> Sys.setenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_" = TRUE)
>>> data.frame(time = Sys.time())
>>                   time
>> 1 2023-07-06 14:29:37
>>> data.frame(time = as.POSIXlt(Sys.time()))
>>                   time
>> 1 2023-07-06 14:29:37
>> Warning message:
>> Direct call of 'as.data.frame.POSIXct()' is deprecated.  Use
>> 'as.data.frame.vector()' or 'as.data.frame()' instead
>>> Sys.setenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_" = remember)
>
> I think it happens because
>
>      data.frame(<POSIXlt>)
>
> calls 'as.data.frame.POSIXlt' (per its S3-class), which
> in turn directly calls 'as.data.frame.POSIXct':
>
>      ## as.data.frame.POSIXlt
>      function (x, row.names = NULL, optional = FALSE, ...)
>      {
>          value <- as.data.frame.POSIXct(as.POSIXct(x), row.names,
>              optional, ...)
>          if (!optional)
>              names(value) <- deparse1(substitute(x))
>          value
>      }
>      <environment: namespace:base>
>
> Kind regards
>      Enrico
>
>> Vincent
>>
>> On Thu, 6 Jul 2023 at 10:41, Tim Taylor <tim.taylor at hiddenelephants.co.uk>
>> wrote:
>>
>>> Apologies - I've not had enough caffeine just yet. The reprex below
>>> highlights the issue but I think the code which implemented the change
>>> *may* need tweaking not lapply.
>>>
>>> Tim
>>>
>>> On 06/07/2023 09:26, Tim Taylor wrote:
>>>> This *may* be an issue in lapply.  Let's see what others day. Reprex
>>>> below
>>>>
>>>> Sys.setenv("_R_CHECK_AS_DATA_FRAME_EXPLICIT_METHOD_" = TRUE)
>>>> dat <- Sys.Date()
>>>> as.data.frame(dat)
>>>> #>          dat
>>>> #> 1 2023-07-06
>>>> lapply(dat, as.data.frame)
>>>> #> Warning: Direct call of 'as.data.frame.Date()' is deprecated.  Use
>>>> #> 'as.data.frame.vector()' or 'as.data.frame()' instead
>>>> #> [[1]]
>>>> #>       X[[i]]
>>>> #> 1 2023-07-06
>>>>
>>>> Tim
>>>>
>>>> On 06/07/2023 08:54, Vincent van Hees wrote:
>>>>> Dear all,
>>>>>
>>>>> I see the following warning in my package test results:
>>>>>
>>>>> ```
>>>>> Warning
>>>>> Direct call of 'as.data.frame.POSIXct()' is deprecated.  Use
>>>>> 'as.data.frame.vector()' or 'as.data.frame()' instead
>>>>> ```
>>>>>
>>>>> The warning is not always there and I struggle to make it
>>>>> reproducible. I
>>>>> have encountered it in both Ubuntu 22.04 and in Windows 11, in both R
>>>>> 4.3.0
>>>>> and 4.3.1, in both RStudio and in an GitHub Actions environment (example
>>>>> <https://github.com/wadpac/GGIR/actions/runs/5463862340/jobs/9945096566>).
>>>>> The warning gives the impression that I am doing something that R no
>>>>> longer
>>>>> supports. However, I am not using the command as.data.frame.POSIXct()
>>>>> anywhere directly in my code.
>>>>>
>>>>> When I dive into the code where the warnings occur I see patterns like:
>>>>>
>>>>> ```
>>>>> now = Sys.time()
>>>>> df = data.frame (time = seq(now, now + 10, by =1),  B  = 1:11)
>>>>> ```
>>>>>
>>>>> (this is a simplification of for example:
>>>>>
>>> https://github.com/wadpac/GGIR/blob/master/tests/testthat/test_read.myacc.csv.R
>>>>> )
>>>>>
>>>>> Does this mean I am discouraged from putting a vector with POSIXct
>>>>> values
>>>>> in a data.frame?
>>>>> If yes, what would be the recommended work around?
>>>>>
>>>>> I have been trying to find documentation or online discussions about
>>>>> this
>>>>> warning but no luck so far. I see R NEWS
>>>>> <https://cran.r-project.org/doc/manuals/r-release/NEWS.html> mentions
>>>>> updates to POSIXct related objects several times in the past year but
>>>>> those
>>>>> seem to be different issues.
>>>>>
>>>>> Best,
>>>>>
>>>>> Vincent
>>>>>
>>>>>      [[alternative HTML version deleted]]
>>>>>
>>>>> ______________________________________________
>>>>> R-package-devel at r-project.org mailing list
>>>>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>>>> ______________________________________________
>>>> R-package-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-package-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From dewey @end|ng |rom dunn|ngton@c@  Thu Jul  6 20:22:26 2023
From: dewey @end|ng |rom dunn|ngton@c@ (Dewey Dunnington)
Date: Thu, 06 Jul 2023 15:22:26 -0300
Subject: [R-pkg-devel] Best practices for CRAN package using Go
Message-ID: <399846c80a91ae21c96942890fc8d3b8@dunnington.ca>

Hi all,

I'm wondering if there is any precedent for using Go in a CRAN R 
package. Go is a particularly good language for writing database drivers 
for the Arrow Database Connectivity framework [1][2] and - importantly - 
there are several active developers writing these drivers from which R 
users might be able to benefit (notably, the Snowflake driver, for which 
there isn't currently a readily-available R connector).

I've wrapped two of these drivers for R that seem to build and install 
on MacOS, Linux, and Windows [3][4]; however, I am not sure if the 
pattern I used is suitable for CRAN or whether these packages will have 
to be GitHub-only for the foreseeable future. The pattern is roughly the 
same as for Rust (build a static library and link it), and the build 
process has similar requirements (a `go` binary with which `go build` 
can be run; the build process downloads dependencies as it goes just 
like `cargo build`).

Thanks in advance for any insight!

Cheers,

-dewey

[1] https://arrow.apache.org/adbc
[2] https://cran.r-project.org/package=adbcdrivermanager
[3] 
https://github.com/apache/arrow-adbc/tree/main/r/adbcflightsql#readme
[4] 
https://github.com/apache/arrow-adbc/tree/main/r/adbcsnowflake#readme


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Jul  7 09:15:36 2023
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 7 Jul 2023 09:15:36 +0200
Subject: [R-pkg-devel] Warning 'as.data.frame.POSIXct()' is deprecated
In-Reply-To: <4d7bc097-0ea9-96b2-81ea-36203a7f7310@hiddenelephants.co.uk>
References: <CALnEB16CAR28kTtkvVcEOQj3Tmyc_rwCjckwexnQsA3_ZkFPCg@mail.gmail.com>
 <1e8bc3aa-1614-3cd4-f0db-01735c152e7f@hiddenelephants.co.uk>
 <15178f56-0d28-e7fa-000f-959c00dd63ca@hiddenelephants.co.uk>
 <CALnEB17VsNZC5U_usC+qxXgx4ngZFwGpO2W_Tg8L6WQ9rm83Qg@mail.gmail.com>
 <87wmzdcg23.fsf@aldus>
 <4d7bc097-0ea9-96b2-81ea-36203a7f7310@hiddenelephants.co.uk>
Message-ID: <25767.48024.101154.596908@stat.math.ethz.ch>

>>>>> Tim Taylor 
>>>>>     on Thu, 6 Jul 2023 15:11:41 +0100 writes:

    > Ah yes ... and reading the as.data.frame help we see (emphasis mine):
    > "... Direct calls to as.data.frame.<class>() are still possible (*base 
    > package!*), for 12 atomic base classes, but will deprecated ..."

    > So it does seem that a lot of these warnings are triggered by base R and 
    > updating this code may be a work in progress.


    > A little tangential (but related) to this though is still the fact that 
    > we can trigger the warning with:

    > lapply(Sys.Date(), as.data.frame)

    > so I wonder if the code in base/R/zzz.R 
    > (https://github.com/wch/r-source/blob/9f1940663f902174034a01197e55fd17c767213a/src/library/base/R/zzz.R#L664-L686) 
    > does need tweaking?

    > At this stage this is probably more a question for R-devel though.

Indeed. ... and so I've sent a long reply to you, Enrico,
Vincent *AND* the R-devel mailing list.  In its archives you see it here

     https://stat.ethz.ch/pipermail/r-devel/2023-July/082725.html

With thanks to Vincent, Tim, Enrico, (and Mikael who started
"moving" this to R-devel, see there).

Martin

--
Martin Maechler
ETH Zurich   and   R Core team


From yut@n|@|n| @end|ng |rom gm@||@com  Mon Jul 10 10:24:37 2023
From: yut@n|@|n| @end|ng |rom gm@||@com (Hiroaki Yutani)
Date: Mon, 10 Jul 2023 17:24:37 +0900
Subject: [R-pkg-devel] Is it a wrong assumption that ${R_HOME}/lib always
 exists?
Message-ID: <CALyqOb-9xoBMDg_Xd69Gmju1Fj8rqoRAA2344giXKPiKq=Nr-A@mail.gmail.com>

Hi,

My package, string2path, using Rust fails on the CRAN check of MKL [1],
with an error that seems irrelevant to MKL. The error says:

>   thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value:
Os { code: 2, kind: NotFound, message: "No such file or directory" }',
/data/gannet/ripley/R/packages/tests-MKL/string2path/src/rust/vendor/libR-sys/build.rs:637
:40

The line 637 of build.rs of libR-sys crate is here [2]:

    r_paths.library.canonicalize().unwrap().display()

Compared to the previous version, which didn't experience such a failure,
.canonicalize() was added, and it seems this is the cause. This method
normalizes the path expression like R's normalizePath(), and it fails
because the path specified didn't exist.

libR-sys assumes the path to R's shared libraries is `${R_HOME}/lib` on
Unix-alike platforms. Is it possible that this path doesn't exist on the
MKL server? Actually, it compiles fine on the other Linux platforms, so I'm
wondering what's different there from the other servers.

Best,
Yutani

[1]: https://cran.r-project.org/web/checks/check_results_string2path.html
[2]: https://github.com/extendr/libR-sys/blob/v0.5.0/build.rs#L637C1-L637C58

	[[alternative HTML version deleted]]


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Jul 10 10:51:46 2023
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 10 Jul 2023 10:51:46 +0200
Subject: [R-pkg-devel] 
 Is it a wrong assumption that ${R_HOME}/lib always exists?
In-Reply-To: <CALyqOb-9xoBMDg_Xd69Gmju1Fj8rqoRAA2344giXKPiKq=Nr-A@mail.gmail.com>
References: <CALyqOb-9xoBMDg_Xd69Gmju1Fj8rqoRAA2344giXKPiKq=Nr-A@mail.gmail.com>
Message-ID: <25771.50850.238743.106346@stat.math.ethz.ch>

>>>>> Hiroaki Yutani 
>>>>>     on Mon, 10 Jul 2023 17:24:37 +0900 writes:

[...............]

Short answer to your questsion (from the 'Subject') is :    NO !
For an example, see below:

    > libR-sys assumes the path to R's shared libraries is
    > `${R_HOME}/lib` on Unix-alike platforms.

In some configurations, R does not need *any* shared libraries,
and there,  $R_HOME/lib  does *not* exist.

E.g., I have one of my R-devel versions installed (on Fedora
Linux) with

        ../R/configure --with-blas=-lflexiblas 

using the nice, currently Fedora/Redhat-only "flexiblas"
approach, with which I can nicely switch the versions of BLAS
and Lapack libraries that R works with from within R.

As that version of R is not "shared", i.e., no libR.so , *and*
gets both its BLAS and Lapack libraries from "external" (not
from R), there's no need for a ./lib/  and so none is created.

Martin Maechler
ETH Zurich  and  R Core Team


    > Is it possible
    > that this path doesn't exist on the MKL server? 

    > Actually, it compiles fine on the other Linux platforms,
    > so I'm wondering what's different there from the other
    > servers.


    > Best, Yutani
    > 	[[alternative HTML version deleted]]


From yut@n|@|n| @end|ng |rom gm@||@com  Mon Jul 10 11:41:29 2023
From: yut@n|@|n| @end|ng |rom gm@||@com (Hiroaki Yutani)
Date: Mon, 10 Jul 2023 18:41:29 +0900
Subject: [R-pkg-devel] 
 Is it a wrong assumption that ${R_HOME}/lib always exists?
In-Reply-To: <25771.50850.238743.106346@stat.math.ethz.ch>
References: <CALyqOb-9xoBMDg_Xd69Gmju1Fj8rqoRAA2344giXKPiKq=Nr-A@mail.gmail.com>
 <25771.50850.238743.106346@stat.math.ethz.ch>
Message-ID: <CALyqOb8YQgfR1zDY68HHEwiRfR-50upVih6So-aSPy35mMHp7Q@mail.gmail.com>

Thanks so much for the quick response. It answered everything!
It was my mistake that I didn't consider these types of installations.
I'll fix my package as soon as I can.

Best,
Yutani

2023?7?10?(?) 17:51 Martin Maechler <maechler at stat.math.ethz.ch>:

> >>>>> Hiroaki Yutani
> >>>>>     on Mon, 10 Jul 2023 17:24:37 +0900 writes:
>
> [...............]
>
> Short answer to your questsion (from the 'Subject') is :    NO !
> For an example, see below:
>
>     > libR-sys assumes the path to R's shared libraries is
>     > `${R_HOME}/lib` on Unix-alike platforms.
>
> In some configurations, R does not need *any* shared libraries,
> and there,  $R_HOME/lib  does *not* exist.
>
> E.g., I have one of my R-devel versions installed (on Fedora
> Linux) with
>
>         ../R/configure --with-blas=-lflexiblas
>
> using the nice, currently Fedora/Redhat-only "flexiblas"
> approach, with which I can nicely switch the versions of BLAS
> and Lapack libraries that R works with from within R.
>
> As that version of R is not "shared", i.e., no libR.so , *and*
> gets both its BLAS and Lapack libraries from "external" (not
> from R), there's no need for a ./lib/  and so none is created.
>
> Martin Maechler
> ETH Zurich  and  R Core Team
>
>
>     > Is it possible
>     > that this path doesn't exist on the MKL server?
>
>     > Actually, it compiles fine on the other Linux platforms,
>     > so I'm wondering what's different there from the other
>     > servers.
>
>
>     > Best, Yutani
>     >   [[alternative HTML version deleted]]
>
>

	[[alternative HTML version deleted]]


From kry|ov@r00t @end|ng |rom gm@||@com  Mon Jul 10 16:09:51 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Mon, 10 Jul 2023 17:09:51 +0300
Subject: [R-pkg-devel] Best practices for CRAN package using Go
In-Reply-To: <399846c80a91ae21c96942890fc8d3b8@dunnington.ca>
References: <399846c80a91ae21c96942890fc8d3b8@dunnington.ca>
Message-ID: <20230710170951.35efc274@arachnoid>

? Thu, 06 Jul 2023 15:22:26 -0300
Dewey Dunnington <dewey at dunnington.ca> ?????:

> I've wrapped two of these drivers for R that seem to build and
> install on MacOS, Linux, and Windows [3][4]; however, I am not sure
> if the pattern I used is suitable for CRAN or whether these packages
> will have to be GitHub-only for the foreseeable future.

There are a few parts to following the CRAN policy [*] regarding
external dependencies.

I think (but don't know for sure) that your package will not be allowed
to download Go by itself. The policy says: "Only as a last resort and
with the agreement of the CRAN team should a package download
pre-compiled software."

An already installed Go should be able to "first look to see if [a
dependency] is already installed and if so is of a suitable version"
when installing the dependencies of the Go part of the code. The go.mod
and go.sum files specify the exact versions and checksums of the
dependencies, which satisfies the requirement for fixed dependency
versions ("it is acceptable to download them as part of installation,
but do ensure that the download is of a fixed version rather than the
latest"), so your package seems to be fine in this respect.

One more thing: when bootstrapping the source package, can you run go
mod vendor [**] in order to bundle *all* the Go dependencies together
with the package? Is the resulting directory prohibitively large? Would
it satisfy the CRAN policy preference to "include the library sources
in the package and compile them as part of package installation"
without requiring Internet access? Unfortunately, I don't know enough
about Go to answer these questions myself. I think that a small bundle
of vendored Go code would be preferrable for CRAN but *not* preferrable
for packaging in a GNU/Linux distro like Debian where dynamic linking
(in the widest possible sense) is a strong preference.

-- 
Best regards,
Ivan

[*] https://cran.r-project.org/web/packages/policies.html

[**] https://go.dev/ref/mod#vendoring


From kry|ov@r00t @end|ng |rom gm@||@com  Mon Jul 10 16:30:34 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Mon, 10 Jul 2023 17:30:34 +0300
Subject: [R-pkg-devel] A replacement idiom for \value{\item{\var{...}}{}}
Message-ID: <20230710173034.1c241295@arachnoid>

Hello R-package-devel,

I've got a function that returns a data.frame. The columns (and their
names) of the return value are parametrised by the arguments of the
function. See, for example, the following function:

foo <- function(n = 10, out.M = c(2, 3, 5))
 as.data.frame(setNames(
  lapply(out.M, \(M) M * runif(n)),
  paste0('fooval.', out.M)
 ))

If I call it as foo(out.M = 1), I get a data.frame containing a column
named fooval.1. If I call it as foo(), I get columns fooval.2,
fooval.3, and fooval.5 instead.

I would like to document this relationship between the arguments and
the output value like so:

\arguments{
 \item{out.M}{Return the foo vectors for every M value given here.}
 % more arguments that behave in a similar manner
}
% ...
\value{
 A \code{data.frame} containing the following columns:

 \item{fooval.\var{m}}{
  The foo values, for every \var{m} in \code{out.M}.
 }
 % more parametrised output columns to follow
}

It turns out that \value{} description lists now escape their \item{}
arguments, preventing me from using \var{} markup there, but only in
plain text and HTML outputs. I think that the change occurred in the
last year or so; old versions of R process markup in \item{} arguments
even in \value{} description lists, but they have other Rd problems. I
understand the motivation of the change: in \arguments{} and \value{}
environments, it makes sense to typeset \item{} headings as \code{}.

Should I try to fix Rd2latex (or at least file a ticket) to escape the
\item{...} arguments in \value{} (but not \describe{}!) environments
too?

What would be a better Rd idiom for such function argument ? output
component relationships?

-- 
Best regards,
Ivan


From @eb@meyer @end|ng |rom |@u@de  Mon Jul 10 20:08:23 2023
From: @eb@meyer @end|ng |rom |@u@de (Sebastian Meyer)
Date: Mon, 10 Jul 2023 20:08:23 +0200
Subject: [R-pkg-devel] 
 A replacement idiom for \value{\item{\var{...}}{}}
In-Reply-To: <20230710173034.1c241295@arachnoid>
References: <20230710173034.1c241295@arachnoid>
Message-ID: <ca3da5f8-8b0f-6465-15d7-1c730e08ff0e@fau.de>

Am 10.07.23 um 16:30 schrieb Ivan Krylov:
> Hello R-package-devel,
> 
> I've got a function that returns a data.frame. The columns (and their
> names) of the return value are parametrised by the arguments of the
> function. See, for example, the following function:
> 
> foo <- function(n = 10, out.M = c(2, 3, 5))
>   as.data.frame(setNames(
>    lapply(out.M, \(M) M * runif(n)),
>    paste0('fooval.', out.M)
>   ))
> 
> If I call it as foo(out.M = 1), I get a data.frame containing a column
> named fooval.1. If I call it as foo(), I get columns fooval.2,
> fooval.3, and fooval.5 instead.
> 
> I would like to document this relationship between the arguments and
> the output value like so:
> 
> \arguments{
>   \item{out.M}{Return the foo vectors for every M value given here.}
>   % more arguments that behave in a similar manner
> }
> % ...
> \value{
>   A \code{data.frame} containing the following columns:
> 
>   \item{fooval.\var{m}}{
>    The foo values, for every \var{m} in \code{out.M}.
>   }
>   % more parametrised output columns to follow
> }
> 
> It turns out that \value{} description lists now escape their \item{}
> arguments, preventing me from using \var{} markup there, but only in
> plain text and HTML outputs. I think that the change occurred in the
> last year or so; old versions of R process markup in \item{} arguments
> even in \value{} description lists, but they have other Rd problems. I
> understand the motivation of the change: in \arguments{} and \value{}
> environments, it makes sense to typeset \item{} headings as \code{}.

Thank you for the report. AFAICS, this only affects HTML conversion in R 
 >= 4.3.0. It is an "internally" known limitation (see corresponding 
source code comment in Rd2HTML).

OTOH, WRE does not clearly specify that \item labels in \arguments or 
\value could actually contain any markup. That said, the referenced 
"Parsing Rd files" document 
(<https://developer.r-project.org/parseRd.pdf>) does tell us that 
\item{}{} arguments are parsed as LaTeX-like text, \dots probably being 
the most common example.

> 
> Should I try to fix Rd2latex (or at least file a ticket) to escape the
> \item{...} arguments in \value{} (but not \describe{}!) environments
> too?

Yes, I think this belongs to "R-devel" and a problem report in Bugzilla 
would be useful; the problem being that Rd markup in \item labels is 
handled inconsistently by the Rd converters. It is currently unclear to 
me, however, which one is at fault here. Your example at least provides 
one (admittedly quiet special) use case for LaTeX-like content in an 
\item label of the \value section.

> 
> What would be a better Rd idiom for such function argument ? output
> component relationships?
> 

I think a workaround that currently works for your use case is to use 
\code{fooval.\var{m}} as the label (i.e., wrapped inside \code).

Best regards,

	Sebastian Meyer


From ||gge@ @end|ng |rom @t@t|@t|k@tu-dortmund@de  Wed Jul 12 09:40:20 2023
From: ||gge@ @end|ng |rom @t@t|@t|k@tu-dortmund@de (Uwe Ligges)
Date: Wed, 12 Jul 2023 09:40:20 +0200
Subject: [R-pkg-devel] issues with CRAN incoming submissions / summer break
 announcement
Message-ID: <7c654dd5-721a-cdb6-f432-94b9ddbae176@statistik.tu-dortmund.de>

Dear developers,

CRAN submissions are currently partly not possible due to some 
infrastructure issues. Please so NOT contact us if you see "Unpacking 
failed. Please make sure the tar.gz was created with R CMD build. [...]".

In addition, processing the CRAN incoming queue of packages (CRAN 
pretest) is currently delayed by 2 days.

Both issues are known and CRAN sysadmins will work on the issues.


Note that this year's CRAN submission summer break will be from Jul 21, 
2023 to Aug 7, 2023.

Best,
Uwe Ligges
for the CRAN team


From ru@@e||@g@@|mond @end|ng |rom gm@||@com  Wed Jul 12 15:41:11 2023
From: ru@@e||@g@@|mond @end|ng |rom gm@||@com (Russell Almond)
Date: Wed, 12 Jul 2023 09:41:11 -0400
Subject: [R-pkg-devel] Package Load fails to find 3rd Party DLL
Message-ID: <7feb7697-be2f-7bf8-3e7c-4276a0cb69c8@gmail.com>

I have an R package (RNetica available at 
https://ralmond.r-universe.dev/RNetica and 
https://github.com/ralmond/RNetica) which links to a 3rd party library 
Netica.dll, so RNetica.dll (built from my C code) calls the 3rd party code.

The config.win script downloads Netica.dll and moves it into the 
libs/x64 directory, where it should get loaded when RNetica.dll is 
loaded.? However this is not happening:

Here is the relevant portion of the build log (build is on R-universe, 
but I think it is the same script as CRAN):

```

cp 
"/d/a/ralmond/ralmond/RNETIC~1.RCH/00_PKG~1/RNetica/src/Netica/Netica_API_5
10/lib64/Netica.dll" 
"D:/a/ralmond/ralmond/RNetica.Rcheck/00LOCK-RNetica/00new/R
Netica/libs/x64"
 ? cp 
"/d/a/ralmond/ralmond/RNETIC~1.RCH/00_PKG~1/RNetica/src/Netica/Netica_API_5
10/lib64/Netica.lib" 
"D:/a/ralmond/ralmond/RNetica.Rcheck/00LOCK-RNetica/00new/R
Netica/libs/x64"
 ? C:\rtools43\x86_64-w64-mingw32.static.posix\bin\nm.exe: 'NeticaDLL': 
No such f
ile
 ? gcc -shared -s -static-libgcc -o RNetica.dll tmp.def Cases.o 
Continuous.o Edge
s.o Experience.o Inference.o Networks.o Node.o Random.o Registration.o 
Session.o
 ?-L. 
-LD:/a/ralmond/ralmond/RNetica.Rcheck/00LOCK-RNetica/00new/RNetica/libs/x64
 ?-lNetica -LC:/rtools43/x86_64-w64-mingw32.static.posix/lib/x64 
-LC:/rtools43/x8
6_64-w64-mingw32.static.posix/lib -LC:/R/bin/x64 -lR
 ? C:\rtools43\x86_64-w64-mingw32.static.posix\bin/ld.exe: internal 
error: aborti
ng at ../../binutils-2.40/ld/ldlang.c:527 in compare_section
 ? C:\rtools43\x86_64-w64-mingw32.static.posix\bin/ld.exe: please report 
this bug
 ? collect2.exe: error: ld returned 1 exit status
```

A little bit of searching on the internet, indicates that Windows 
sometimes reports Dll A not found when Dll A needs Dll B and it can't 
find B.

This used to work under older versions of R and the tool chain and I 
don't think I've changed anything related to the C side of the code.

1) Have the paths changed, so I no longer should be moving the (64 bit 
version of the) 3rd party DLL to `libs/x64`?

2) Is there something that has changed with the mingw tools (nm.exe and 
ld.exe) which are changing things?

3) Is there a change on how win32 and win64 variants are handled (I have 
both 32 and 64 bit copies of the 3rd party DLL, I just need to move them 
to the right places).

Thanks for any enlightenment you can offer,

 ??? --Russell Almond




-- 
Russell Almond
https://ralmond.net/

	[[alternative HTML version deleted]]


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Wed Jul 12 16:00:14 2023
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Wed, 12 Jul 2023 07:00:14 -0700
Subject: [R-pkg-devel] Package Load fails to find 3rd Party DLL
In-Reply-To: <7feb7697-be2f-7bf8-3e7c-4276a0cb69c8@gmail.com>
References: <7feb7697-be2f-7bf8-3e7c-4276a0cb69c8@gmail.com>
Message-ID: <02C6131C-2CD4-41FA-9B32-B0B74969F86E@dcn.davis.ca.us>

Use of precompiled code is not allowed in CRAN. This looks like your package needs to be distributed elsewhere... e.g. via GitHub.

On July 12, 2023 6:41:11 AM PDT, Russell Almond <russell.g.almond at gmail.com> wrote:
>I have an R package (RNetica available at 
>https://ralmond.r-universe.dev/RNetica and 
>https://github.com/ralmond/RNetica) which links to a 3rd party library 
>Netica.dll, so RNetica.dll (built from my C code) calls the 3rd party code.
>
>The config.win script downloads Netica.dll and moves it into the 
>libs/x64 directory, where it should get loaded when RNetica.dll is 
>loaded.? However this is not happening:
>
>Here is the relevant portion of the build log (build is on R-universe, 
>but I think it is the same script as CRAN):
>
>```
>
>cp 
>"/d/a/ralmond/ralmond/RNETIC~1.RCH/00_PKG~1/RNetica/src/Netica/Netica_API_5
>10/lib64/Netica.dll" 
>"D:/a/ralmond/ralmond/RNetica.Rcheck/00LOCK-RNetica/00new/R
>Netica/libs/x64"
> ? cp 
>"/d/a/ralmond/ralmond/RNETIC~1.RCH/00_PKG~1/RNetica/src/Netica/Netica_API_5
>10/lib64/Netica.lib" 
>"D:/a/ralmond/ralmond/RNetica.Rcheck/00LOCK-RNetica/00new/R
>Netica/libs/x64"
> ? C:\rtools43\x86_64-w64-mingw32.static.posix\bin\nm.exe: 'NeticaDLL': 
>No such f
>ile
> ? gcc -shared -s -static-libgcc -o RNetica.dll tmp.def Cases.o 
>Continuous.o Edge
>s.o Experience.o Inference.o Networks.o Node.o Random.o Registration.o 
>Session.o
> ?-L. 
>-LD:/a/ralmond/ralmond/RNetica.Rcheck/00LOCK-RNetica/00new/RNetica/libs/x64
> ?-lNetica -LC:/rtools43/x86_64-w64-mingw32.static.posix/lib/x64 
>-LC:/rtools43/x8
>6_64-w64-mingw32.static.posix/lib -LC:/R/bin/x64 -lR
> ? C:\rtools43\x86_64-w64-mingw32.static.posix\bin/ld.exe: internal 
>error: aborti
>ng at ../../binutils-2.40/ld/ldlang.c:527 in compare_section
> ? C:\rtools43\x86_64-w64-mingw32.static.posix\bin/ld.exe: please report 
>this bug
> ? collect2.exe: error: ld returned 1 exit status
>```
>
>A little bit of searching on the internet, indicates that Windows 
>sometimes reports Dll A not found when Dll A needs Dll B and it can't 
>find B.
>
>This used to work under older versions of R and the tool chain and I 
>don't think I've changed anything related to the C side of the code.
>
>1) Have the paths changed, so I no longer should be moving the (64 bit 
>version of the) 3rd party DLL to `libs/x64`?
>
>2) Is there something that has changed with the mingw tools (nm.exe and 
>ld.exe) which are changing things?
>
>3) Is there a change on how win32 and win64 variants are handled (I have 
>both 32 and 64 bit copies of the 3rd party DLL, I just need to move them 
>to the right places).
>
>Thanks for any enlightenment you can offer,
>
> ??? --Russell Almond
>
>
>
>

-- 
Sent from my phone. Please excuse my brevity.


From dewey @end|ng |rom dunn|ngton@c@  Wed Jul 12 16:36:30 2023
From: dewey @end|ng |rom dunn|ngton@c@ (Dewey Dunnington)
Date: Wed, 12 Jul 2023 11:36:30 -0300
Subject: [R-pkg-devel] Best practices for CRAN package using Go
In-Reply-To: <20230710170951.35efc274@arachnoid>
References: <399846c80a91ae21c96942890fc8d3b8@dunnington.ca>
 <20230710170951.35efc274@arachnoid>
Message-ID: <d4522c8b37d7b8e1a3441a50c3988246@dunnington.ca>

Thank you! It seems I needed the refresher on CRAN policy regarding 
downloading sources: it seems like the go.sum/go.mod provide sufficient 
checksumming to comply with the policy, as you noted (with `go mod 
vendor` as a backup if this turns out to not be acceptable). Downloading 
Go is probably out based on the advice for Rust that explicitly forbids 
this.

Cheers!

-dewey

On 2023-07-10 11:09, Ivan Krylov wrote:
> ? Thu, 06 Jul 2023 15:22:26 -0300
> Dewey Dunnington <dewey at dunnington.ca> ?????:
> 
>> I've wrapped two of these drivers for R that seem to build and
>> install on MacOS, Linux, and Windows [3][4]; however, I am not sure
>> if the pattern I used is suitable for CRAN or whether these packages
>> will have to be GitHub-only for the foreseeable future.
> 
> There are a few parts to following the CRAN policy [*] regarding
> external dependencies.
> 
> I think (but don't know for sure) that your package will not be allowed
> to download Go by itself. The policy says: "Only as a last resort and
> with the agreement of the CRAN team should a package download
> pre-compiled software."
> 
> An already installed Go should be able to "first look to see if [a
> dependency] is already installed and if so is of a suitable version"
> when installing the dependencies of the Go part of the code. The go.mod
> and go.sum files specify the exact versions and checksums of the
> dependencies, which satisfies the requirement for fixed dependency
> versions ("it is acceptable to download them as part of installation,
> but do ensure that the download is of a fixed version rather than the
> latest"), so your package seems to be fine in this respect.
> 
> One more thing: when bootstrapping the source package, can you run go
> mod vendor [**] in order to bundle *all* the Go dependencies together
> with the package? Is the resulting directory prohibitively large? Would
> it satisfy the CRAN policy preference to "include the library sources
> in the package and compile them as part of package installation"
> without requiring Internet access? Unfortunately, I don't know enough
> about Go to answer these questions myself. I think that a small bundle
> of vendored Go code would be preferrable for CRAN but *not* preferrable
> for packaging in a GNU/Linux distro like Debian where dynamic linking
> (in the widest possible sense) is a strong preference.
> 
> --
> Best regards,
> Ivan
> 
> [*] https://cran.r-project.org/web/packages/policies.html
> 
> [**] https://go.dev/ref/mod#vendoring


From kry|ov@r00t @end|ng |rom gm@||@com  Wed Jul 12 18:29:14 2023
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Wed, 12 Jul 2023 19:29:14 +0300
Subject: [R-pkg-devel] 
 A replacement idiom for \value{\item{\var{...}}{}}
In-Reply-To: <ca3da5f8-8b0f-6465-15d7-1c730e08ff0e@fau.de>
References: <20230710173034.1c241295@arachnoid>
 <ca3da5f8-8b0f-6465-15d7-1c730e08ff0e@fau.de>
Message-ID: <20230712192914.589b233c@arachnoid>

Dear Sebastian,

Thank you for the advice!

On Mon, 10 Jul 2023 20:08:23 +0200
Sebastian Meyer <seb.meyer at fau.de> wrote:

> I think a workaround that currently works for your use case is to use 
> \code{fooval.\var{m}} as the label (i.e., wrapped inside \code).

The workaround works well, but I think I agree that \item{fooval.<m>}{}
is the the better option here. (I'm tempted, but I shouldn't use
\item{\code{fooval.\var{<m>}}}, because \code{} arguments should be
syntactically valid R.)

I will also use \var{<m>} outside the \item headers, at least for now.

-- 
Best regards,
Ivan


From @|mon@urb@nek @end|ng |rom R-project@org  Thu Jul 13 01:01:20 2023
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Thu, 13 Jul 2023 11:01:20 +1200
Subject: [R-pkg-devel] Best practices for CRAN package using Go
In-Reply-To: <d4522c8b37d7b8e1a3441a50c3988246@dunnington.ca>
References: <399846c80a91ae21c96942890fc8d3b8@dunnington.ca>
 <20230710170951.35efc274@arachnoid>
 <d4522c8b37d7b8e1a3441a50c3988246@dunnington.ca>
Message-ID: <F85C4A1A-75FA-46C1-B2FC-1EF1E1F6E4F3@R-project.org>

Dewey,

you will definitely need to include all the necessary sources for your package. You may want to have a look at the "Using Rust"[1] document linked from the CRAN policy. I think Go is quite similar to Rust in that sense so you should use the same approach, i.e. checking for system and user installations (for go the official location is /usr/local/go/bin/go and it may not be on the PATH), declaring Go version dependency and making sure your package has included all module dependency sources (i.e. don't use install-time module resolution/download).

If you need to include a large source tar ball that is not permissible on CRAN, I'd recommend using Zenodo.org since it is specifically designed to facilitate longevity and reproducibility (as opposed to Github or other transient storage that may disappear at any point).

All that said, you may run into the same issues as Rust (errors and segfaults due to limited interoperability of compilers) so use with care and test well. External bindings like Rust or Go are only provided on "best effort" basis.

Cheers,
Simon

[1] - https://cran.r-project.org/web/packages/using_rust.html

PS: go is now available on the CRAN macOS builder machines and the Mac Builder (https://mac.r-project.org/macbuilder/submit.html).


> On 13/07/2023, at 2:36 AM, Dewey Dunnington <dewey at dunnington.ca> wrote:
> 
> Thank you! It seems I needed the refresher on CRAN policy regarding downloading sources: it seems like the go.sum/go.mod provide sufficient checksumming to comply with the policy, as you noted (with `go mod vendor` as a backup if this turns out to not be acceptable). Downloading Go is probably out based on the advice for Rust that explicitly forbids this.
> 
> Cheers!
> 
> -dewey
> 
> On 2023-07-10 11:09, Ivan Krylov wrote:
>> ? Thu, 06 Jul 2023 15:22:26 -0300
>> Dewey Dunnington <dewey at dunnington.ca> ?????:
>>> I've wrapped two of these drivers for R that seem to build and
>>> install on MacOS, Linux, and Windows [3][4]; however, I am not sure
>>> if the pattern I used is suitable for CRAN or whether these packages
>>> will have to be GitHub-only for the foreseeable future.
>> There are a few parts to following the CRAN policy [*] regarding
>> external dependencies.
>> I think (but don't know for sure) that your package will not be allowed
>> to download Go by itself. The policy says: "Only as a last resort and
>> with the agreement of the CRAN team should a package download
>> pre-compiled software."
>> An already installed Go should be able to "first look to see if [a
>> dependency] is already installed and if so is of a suitable version"
>> when installing the dependencies of the Go part of the code. The go.mod
>> and go.sum files specify the exact versions and checksums of the
>> dependencies, which satisfies the requirement for fixed dependency
>> versions ("it is acceptable to download them as part of installation,
>> but do ensure that the download is of a fixed version rather than the
>> latest"), so your package seems to be fine in this respect.
>> One more thing: when bootstrapping the source package, can you run go
>> mod vendor [**] in order to bundle *all* the Go dependencies together
>> with the package? Is the resulting directory prohibitively large? Would
>> it satisfy the CRAN policy preference to "include the library sources
>> in the package and compile them as part of package installation"
>> without requiring Internet access? Unfortunately, I don't know enough
>> about Go to answer these questions myself. I think that a small bundle
>> of vendored Go code would be preferrable for CRAN but *not* preferrable
>> for packaging in a GNU/Linux distro like Debian where dynamic linking
>> (in the widest possible sense) is a strong preference.
>> --
>> Best regards,
>> Ivan
>> [*] https://cran.r-project.org/web/packages/policies.html
>> [**] https://go.dev/ref/mod#vendoring
> 
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
> 


From edd @end|ng |rom deb|@n@org  Thu Jul 13 02:02:57 2023
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Wed, 12 Jul 2023 19:02:57 -0500
Subject: [R-pkg-devel] macOS results not mirrored/updated at CRAN
Message-ID: <25775.16177.937585.974774@rob.eddelbuettel.com>


Simon,

It looks like some result mirroring / pushing from your machines to CRAN fell
over.  One of my packages, digest 0.6.33, arrived on CRAN about a week ago,
is built almost everywhere (apart from macOS_release_x86_64 stuck at 0.6.32)
but the result page still has nags from the 0.6.31 build for macOS release
and one of the oldrel builds.

Could you look into that?  And if it is "just" general issue at CRAN as per
Uwe's email earlier I will happily wait.  But it has been in this frozen /
partial update of results state for a few days now.

Thanks,  Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From yut@n|@|n| @end|ng |rom gm@||@com  Thu Jul 13 02:37:41 2023
From: yut@n|@|n| @end|ng |rom gm@||@com (Hiroaki Yutani)
Date: Thu, 13 Jul 2023 09:37:41 +0900
Subject: [R-pkg-devel] Feedback on "Using Rust in CRAN packages"
Message-ID: <CALyqOb__9-M_rEJ20dz3T07aNKP9_BRG25jdQ248WJA0ShuFCA@mail.gmail.com>

Hi,

I'm glad to see CRAN now has its official policy about Rust [1]!
It seems it probably needs some feedback from those who are familiar with
the Rust workflow. I'm not an expert, but let me leave some quick feedback.
This email is sent to the R-package-devel mailing list as well as to cran@~
so that we can publicly discuss.

It seems most of the concern is about how to make the build deterministic.
In this regard, the policy should encourage including "Cargo.lock" file
[2]. Cargo.lock is created on the first compile, and the resolved versions
of dependencies are recorded. As long as this file exists, the dependency
versions are locked to the ones in this file, except when the package
author explicitly updates the versions.

Cargo.lock also records the SHA256 checksums of the crates if they are from
crates.io, Rust's official crate registry. If the checksums don't match,
the build will fail with the following message:

    error: checksum for `foo v0.1.2` changed between lock files

    this could be indicative of a few possible errors:

        * the lock file is corrupt
        * a replacement source in use (e.g., a mirror) returned a different
checksum
        * the source itself may be corrupt in one way or another

    unable to verify that `foo v0.1.2` is the same as when the lockfile was
generated

For dependencies from Git repositories, Cargo.lock records the commit
hashes. So, the version of the source code (not the version of the crate)
is uniquely determined. That said, unlike cargo.io, it's possible that the
commit or the Git repository itself has disappeared at the time of
building, which makes the build fail. So, it might be reasonable the CRAN
policy prohibits the use of Git dependency unless the source code is
bundled. I have no strong opinion here.

Accordingly, I believe this sentence

> In practice maintainers have found it nigh-impossible to meet these
conditions whilst downloading as they have too little control.

is not quite true. More specifically, these things

> The standard way to download a Rust ?crate? is by its version number, and
these have been changed without changing their number.
> Downloading a ?crate? normally entails downloading its dependencies, and
that is done without fixing their version numbers

won't happen if the R package does include Cargo.lock because

- if the crate is from crates.io, "the version can never be overwritten,
and the code cannot be deleted" there [3]
- if the crate is from a Git repository, the commit hash is unique in its
nature. The version of the crate might be the same between commits, but a
git dependency is specified by the commit hash, not the version of the
crate.

I'm keen to know what problems the CRAN maintainers have experienced that
Cargo.lock cannot solve. I hope we can help somehow to improve the policy.

Best,
Yutani

[1]: https://cran.r-project.org/web/packages/using_rust.html
[2]: https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
[3]: https://doc.rust-lang.org/cargo/reference/publishing.html

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Thu Jul 13 04:34:47 2023
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Thu, 13 Jul 2023 14:34:47 +1200
Subject: [R-pkg-devel] Feedback on "Using Rust in CRAN packages"
In-Reply-To: <CALyqOb__9-M_rEJ20dz3T07aNKP9_BRG25jdQ248WJA0ShuFCA@mail.gmail.com>
References: <CALyqOb__9-M_rEJ20dz3T07aNKP9_BRG25jdQ248WJA0ShuFCA@mail.gmail.com>
Message-ID: <389056FE-88DD-4A07-8FD1-63E0F286B3A8@R-project.org>

Yutani,

I'm not quite sure your reading fully matches the intent of the policy. Cargo.lock is not sufficient, it is expected that the package will provide *all* the sources, it is not expected to use cargo to resolve them from random (possibly inaccessible) places. So the package author is expected to either include the sources in the package *or* (if prohibitive due to extreme size) have a release tar ball available at a fixed, secure, reliable location (I was recommending Zenodo.org for that reason - GitHub is neither fixed nor reliable by definition).

Based on that, I'm not sure I fully understand the scope of your proposal for improvement. Carlo.lock is certainly the first step that the package author should take in creating the distribution tar ball so you can fix the versions, but it is not sufficient as the next step involves collecting the related sources. We don't want R users to be involved in that can of worms (especially since the lock file itself provides no guarantees of accessibility of the components and we don't want to have to manually inspect it), the package should be ready to be used which is why it has to do that step first. Does that explain the intent better? (In general, the downloading at install time is actually a problem, because it's not uncommon to use R in environments that have no Internet access, but the download is a concession for extreme cases where the tar balls may be too big to make it part of the package, but it's yet another can of worms...).

Cheers,
Simon



> On 13/07/2023, at 12:37 PM, Hiroaki Yutani <yutani.ini at gmail.com> wrote:
> 
> Hi,
> 
> I'm glad to see CRAN now has its official policy about Rust [1]!
> It seems it probably needs some feedback from those who are familiar with
> the Rust workflow. I'm not an expert, but let me leave some quick feedback.
> This email is sent to the R-package-devel mailing list as well as to cran@~
> so that we can publicly discuss.
> 
> It seems most of the concern is about how to make the build deterministic.
> In this regard, the policy should encourage including "Cargo.lock" file
> [2]. Cargo.lock is created on the first compile, and the resolved versions
> of dependencies are recorded. As long as this file exists, the dependency
> versions are locked to the ones in this file, except when the package
> author explicitly updates the versions.
> 
> Cargo.lock also records the SHA256 checksums of the crates if they are from
> crates.io, Rust's official crate registry. If the checksums don't match,
> the build will fail with the following message:
> 
>    error: checksum for `foo v0.1.2` changed between lock files
> 
>    this could be indicative of a few possible errors:
> 
>        * the lock file is corrupt
>        * a replacement source in use (e.g., a mirror) returned a different
> checksum
>        * the source itself may be corrupt in one way or another
> 
>    unable to verify that `foo v0.1.2` is the same as when the lockfile was
> generated
> 
> For dependencies from Git repositories, Cargo.lock records the commit
> hashes. So, the version of the source code (not the version of the crate)
> is uniquely determined. That said, unlike cargo.io, it's possible that the
> commit or the Git repository itself has disappeared at the time of
> building, which makes the build fail. So, it might be reasonable the CRAN
> policy prohibits the use of Git dependency unless the source code is
> bundled. I have no strong opinion here.
> 
> Accordingly, I believe this sentence
> 
>> In practice maintainers have found it nigh-impossible to meet these
> conditions whilst downloading as they have too little control.
> 
> is not quite true. More specifically, these things
> 
>> The standard way to download a Rust ?crate? is by its version number, and
> these have been changed without changing their number.
>> Downloading a ?crate? normally entails downloading its dependencies, and
> that is done without fixing their version numbers
> 
> won't happen if the R package does include Cargo.lock because
> 
> - if the crate is from crates.io, "the version can never be overwritten,
> and the code cannot be deleted" there [3]
> - if the crate is from a Git repository, the commit hash is unique in its
> nature. The version of the crate might be the same between commits, but a
> git dependency is specified by the commit hash, not the version of the
> crate.
> 
> I'm keen to know what problems the CRAN maintainers have experienced that
> Cargo.lock cannot solve. I hope we can help somehow to improve the policy.
> 
> Best,
> Yutani
> 
> [1]: https://cran.r-project.org/web/packages/using_rust.html
> [2]: https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
> [3]: https://doc.rust-lang.org/cargo/reference/publishing.html
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
> 


From kev|nu@hey @end|ng |rom gm@||@com  Thu Jul 13 04:50:26 2023
From: kev|nu@hey @end|ng |rom gm@||@com (Kevin Ushey)
Date: Wed, 12 Jul 2023 19:50:26 -0700
Subject: [R-pkg-devel] Feedback on "Using Rust in CRAN packages"
In-Reply-To: <389056FE-88DD-4A07-8FD1-63E0F286B3A8@R-project.org>
References: <CALyqOb__9-M_rEJ20dz3T07aNKP9_BRG25jdQ248WJA0ShuFCA@mail.gmail.com>
 <389056FE-88DD-4A07-8FD1-63E0F286B3A8@R-project.org>
Message-ID: <CAJXgQP2qZkTEYg5=GQ3Ka9jVsAumsMq1rkZaWD+JgxBQmNKrww@mail.gmail.com>

Package authors could use 'cargo vendor' to include Rust crate sources
directly in their source R packages. Would that be acceptable?

Presumedly, the vendored sources would be built using the versions
specified in an accompanying Cargo.lock as well.

https://doc.rust-lang.org/cargo/commands/cargo-vendor.html


On Wed, Jul 12, 2023, 7:35 PM Simon Urbanek <simon.urbanek at r-project.org>
wrote:

> Yutani,
>
> I'm not quite sure your reading fully matches the intent of the policy.
> Cargo.lock is not sufficient, it is expected that the package will provide
> *all* the sources, it is not expected to use cargo to resolve them from
> random (possibly inaccessible) places. So the package author is expected to
> either include the sources in the package *or* (if prohibitive due to
> extreme size) have a release tar ball available at a fixed, secure,
> reliable location (I was recommending Zenodo.org for that reason - GitHub
> is neither fixed nor reliable by definition).
>
> Based on that, I'm not sure I fully understand the scope of your proposal
> for improvement. Carlo.lock is certainly the first step that the package
> author should take in creating the distribution tar ball so you can fix the
> versions, but it is not sufficient as the next step involves collecting the
> related sources. We don't want R users to be involved in that can of worms
> (especially since the lock file itself provides no guarantees of
> accessibility of the components and we don't want to have to manually
> inspect it), the package should be ready to be used which is why it has to
> do that step first. Does that explain the intent better? (In general, the
> downloading at install time is actually a problem, because it's not
> uncommon to use R in environments that have no Internet access, but the
> download is a concession for extreme cases where the tar balls may be too
> big to make it part of the package, but it's yet another can of worms...).
>
> Cheers,
> Simon
>
>
>
> > On 13/07/2023, at 12:37 PM, Hiroaki Yutani <yutani.ini at gmail.com> wrote:
> >
> > Hi,
> >
> > I'm glad to see CRAN now has its official policy about Rust [1]!
> > It seems it probably needs some feedback from those who are familiar with
> > the Rust workflow. I'm not an expert, but let me leave some quick
> feedback.
> > This email is sent to the R-package-devel mailing list as well as to
> cran@~
> > so that we can publicly discuss.
> >
> > It seems most of the concern is about how to make the build
> deterministic.
> > In this regard, the policy should encourage including "Cargo.lock" file
> > [2]. Cargo.lock is created on the first compile, and the resolved
> versions
> > of dependencies are recorded. As long as this file exists, the dependency
> > versions are locked to the ones in this file, except when the package
> > author explicitly updates the versions.
> >
> > Cargo.lock also records the SHA256 checksums of the crates if they are
> from
> > crates.io, Rust's official crate registry. If the checksums don't match,
> > the build will fail with the following message:
> >
> >    error: checksum for `foo v0.1.2` changed between lock files
> >
> >    this could be indicative of a few possible errors:
> >
> >        * the lock file is corrupt
> >        * a replacement source in use (e.g., a mirror) returned a
> different
> > checksum
> >        * the source itself may be corrupt in one way or another
> >
> >    unable to verify that `foo v0.1.2` is the same as when the lockfile
> was
> > generated
> >
> > For dependencies from Git repositories, Cargo.lock records the commit
> > hashes. So, the version of the source code (not the version of the crate)
> > is uniquely determined. That said, unlike cargo.io, it's possible that
> the
> > commit or the Git repository itself has disappeared at the time of
> > building, which makes the build fail. So, it might be reasonable the CRAN
> > policy prohibits the use of Git dependency unless the source code is
> > bundled. I have no strong opinion here.
> >
> > Accordingly, I believe this sentence
> >
> >> In practice maintainers have found it nigh-impossible to meet these
> > conditions whilst downloading as they have too little control.
> >
> > is not quite true. More specifically, these things
> >
> >> The standard way to download a Rust ?crate? is by its version number,
> and
> > these have been changed without changing their number.
> >> Downloading a ?crate? normally entails downloading its dependencies, and
> > that is done without fixing their version numbers
> >
> > won't happen if the R package does include Cargo.lock because
> >
> > - if the crate is from crates.io, "the version can never be overwritten,
> > and the code cannot be deleted" there [3]
> > - if the crate is from a Git repository, the commit hash is unique in its
> > nature. The version of the crate might be the same between commits, but a
> > git dependency is specified by the commit hash, not the version of the
> > crate.
> >
> > I'm keen to know what problems the CRAN maintainers have experienced that
> > Cargo.lock cannot solve. I hope we can help somehow to improve the
> policy.
> >
> > Best,
> > Yutani
> >
> > [1]: https://cran.r-project.org/web/packages/using_rust.html
> > [2]: https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
> > [3]: https://doc.rust-lang.org/cargo/reference/publishing.html
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-package-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-package-devel
> >
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>

	[[alternative HTML version deleted]]


From @|mon@urb@nek @end|ng |rom R-project@org  Thu Jul 13 04:57:57 2023
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Thu, 13 Jul 2023 14:57:57 +1200
Subject: [R-pkg-devel] Feedback on "Using Rust in CRAN packages"
In-Reply-To: <CAJXgQP2qZkTEYg5=GQ3Ka9jVsAumsMq1rkZaWD+JgxBQmNKrww@mail.gmail.com>
References: <CALyqOb__9-M_rEJ20dz3T07aNKP9_BRG25jdQ248WJA0ShuFCA@mail.gmail.com>
 <389056FE-88DD-4A07-8FD1-63E0F286B3A8@R-project.org>
 <CAJXgQP2qZkTEYg5=GQ3Ka9jVsAumsMq1rkZaWD+JgxBQmNKrww@mail.gmail.com>
Message-ID: <E4BF4174-3CF2-4DF4-8BAB-22019C5CBD53@R-project.org>



> On 13/07/2023, at 2:50 PM, Kevin Ushey <kevinushey at gmail.com> wrote:
> 
> Package authors could use 'cargo vendor' to include Rust crate sources directly in their source R packages. Would that be acceptable?
> 


Yes, that is exactly what was suggested in the original thread.

Cheers,
Simon



> Presumedly, the vendored sources would be built using the versions specified in an accompanying Cargo.lock as well.
> 
> https://doc.rust-lang.org/cargo/commands/cargo-vendor.html
> 
> 
> On Wed, Jul 12, 2023, 7:35 PM Simon Urbanek <simon.urbanek at r-project.org> wrote:
> Yutani,
> 
> I'm not quite sure your reading fully matches the intent of the policy. Cargo.lock is not sufficient, it is expected that the package will provide *all* the sources, it is not expected to use cargo to resolve them from random (possibly inaccessible) places. So the package author is expected to either include the sources in the package *or* (if prohibitive due to extreme size) have a release tar ball available at a fixed, secure, reliable location (I was recommending Zenodo.org for that reason - GitHub is neither fixed nor reliable by definition).
> 
> Based on that, I'm not sure I fully understand the scope of your proposal for improvement. Carlo.lock is certainly the first step that the package author should take in creating the distribution tar ball so you can fix the versions, but it is not sufficient as the next step involves collecting the related sources. We don't want R users to be involved in that can of worms (especially since the lock file itself provides no guarantees of accessibility of the components and we don't want to have to manually inspect it), the package should be ready to be used which is why it has to do that step first. Does that explain the intent better? (In general, the downloading at install time is actually a problem, because it's not uncommon to use R in environments that have no Internet access, but the download is a concession for extreme cases where the tar balls may be too big to make it part of the package, but it's yet another can of worms...).
> 
> Cheers,
> Simon
> 
> 
> 
> > On 13/07/2023, at 12:37 PM, Hiroaki Yutani <yutani.ini at gmail.com> wrote:
> > 
> > Hi,
> > 
> > I'm glad to see CRAN now has its official policy about Rust [1]!
> > It seems it probably needs some feedback from those who are familiar with
> > the Rust workflow. I'm not an expert, but let me leave some quick feedback.
> > This email is sent to the R-package-devel mailing list as well as to cran@~
> > so that we can publicly discuss.
> > 
> > It seems most of the concern is about how to make the build deterministic.
> > In this regard, the policy should encourage including "Cargo.lock" file
> > [2]. Cargo.lock is created on the first compile, and the resolved versions
> > of dependencies are recorded. As long as this file exists, the dependency
> > versions are locked to the ones in this file, except when the package
> > author explicitly updates the versions.
> > 
> > Cargo.lock also records the SHA256 checksums of the crates if they are from
> > crates.io, Rust's official crate registry. If the checksums don't match,
> > the build will fail with the following message:
> > 
> >    error: checksum for `foo v0.1.2` changed between lock files
> > 
> >    this could be indicative of a few possible errors:
> > 
> >        * the lock file is corrupt
> >        * a replacement source in use (e.g., a mirror) returned a different
> > checksum
> >        * the source itself may be corrupt in one way or another
> > 
> >    unable to verify that `foo v0.1.2` is the same as when the lockfile was
> > generated
> > 
> > For dependencies from Git repositories, Cargo.lock records the commit
> > hashes. So, the version of the source code (not the version of the crate)
> > is uniquely determined. That said, unlike cargo.io, it's possible that the
> > commit or the Git repository itself has disappeared at the time of
> > building, which makes the build fail. So, it might be reasonable the CRAN
> > policy prohibits the use of Git dependency unless the source code is
> > bundled. I have no strong opinion here.
> > 
> > Accordingly, I believe this sentence
> > 
> >> In practice maintainers have found it nigh-impossible to meet these
> > conditions whilst downloading as they have too little control.
> > 
> > is not quite true. More specifically, these things
> > 
> >> The standard way to download a Rust ?crate? is by its version number, and
> > these have been changed without changing their number.
> >> Downloading a ?crate? normally entails downloading its dependencies, and
> > that is done without fixing their version numbers
> > 
> > won't happen if the R package does include Cargo.lock because
> > 
> > - if the crate is from crates.io, "the version can never be overwritten,
> > and the code cannot be deleted" there [3]
> > - if the crate is from a Git repository, the commit hash is unique in its
> > nature. The version of the crate might be the same between commits, but a
> > git dependency is specified by the commit hash, not the version of the
> > crate.
> > 
> > I'm keen to know what problems the CRAN maintainers have experienced that
> > Cargo.lock cannot solve. I hope we can help somehow to improve the policy.
> > 
> > Best,
> > Yutani
> > 
> > [1]: https://cran.r-project.org/web/packages/using_rust.html
> > [2]: https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
> > [3]: https://doc.rust-lang.org/cargo/reference/publishing.html
> > 
> >       [[alternative HTML version deleted]]
> > 
> > ______________________________________________
> > R-package-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-package-devel
> > 
> 
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From yut@n|@|n| @end|ng |rom gm@||@com  Thu Jul 13 05:08:25 2023
From: yut@n|@|n| @end|ng |rom gm@||@com (Hiroaki Yutani)
Date: Thu, 13 Jul 2023 12:08:25 +0900
Subject: [R-pkg-devel] Feedback on "Using Rust in CRAN packages"
In-Reply-To: <CAJXgQP2qZkTEYg5=GQ3Ka9jVsAumsMq1rkZaWD+JgxBQmNKrww@mail.gmail.com>
References: <CALyqOb__9-M_rEJ20dz3T07aNKP9_BRG25jdQ248WJA0ShuFCA@mail.gmail.com>
 <389056FE-88DD-4A07-8FD1-63E0F286B3A8@R-project.org>
 <CAJXgQP2qZkTEYg5=GQ3Ka9jVsAumsMq1rkZaWD+JgxBQmNKrww@mail.gmail.com>
Message-ID: <CALyqOb9=ivxKMGCB_9EMf-5bkPSGP30fY1dn6hzE-v-+o2ZXvg@mail.gmail.com>

I actually use cargo vendor.

https://github.com/yutannihilation/string2path/blob/main/src/rust/vendor.sh

One thing to note is that, prior to R 4.3.0, the vendored directories hit
the Windows' path limit so I had to put them into a TAR file. I haven't
tested on R 4.3.0, but probably this problem is solved by this improvement.
So, if you target only R >= 4.3, you can just cargo vendor.

https://blog.r-project.org/2023/03/07/path-length-limit-on-windows/index.html

Best,
Yutani

2023?7?13?(?) 11:50 Kevin Ushey <kevinushey at gmail.com>:

> Package authors could use 'cargo vendor' to include Rust crate sources
> directly in their source R packages. Would that be acceptable?
>
> Presumedly, the vendored sources would be built using the versions
> specified in an accompanying Cargo.lock as well.
>
> https://doc.rust-lang.org/cargo/commands/cargo-vendor.html
>
>
> On Wed, Jul 12, 2023, 7:35 PM Simon Urbanek <simon.urbanek at r-project.org>
> wrote:
>
>> Yutani,
>>
>> I'm not quite sure your reading fully matches the intent of the policy.
>> Cargo.lock is not sufficient, it is expected that the package will provide
>> *all* the sources, it is not expected to use cargo to resolve them from
>> random (possibly inaccessible) places. So the package author is expected to
>> either include the sources in the package *or* (if prohibitive due to
>> extreme size) have a release tar ball available at a fixed, secure,
>> reliable location (I was recommending Zenodo.org for that reason - GitHub
>> is neither fixed nor reliable by definition).
>>
>> Based on that, I'm not sure I fully understand the scope of your proposal
>> for improvement. Carlo.lock is certainly the first step that the package
>> author should take in creating the distribution tar ball so you can fix the
>> versions, but it is not sufficient as the next step involves collecting the
>> related sources. We don't want R users to be involved in that can of worms
>> (especially since the lock file itself provides no guarantees of
>> accessibility of the components and we don't want to have to manually
>> inspect it), the package should be ready to be used which is why it has to
>> do that step first. Does that explain the intent better? (In general, the
>> downloading at install time is actually a problem, because it's not
>> uncommon to use R in environments that have no Internet access, but the
>> download is a concession for extreme cases where the tar balls may be too
>> big to make it part of the package, but it's yet another can of worms...).
>>
>> Cheers,
>> Simon
>>
>>
>>
>> > On 13/07/2023, at 12:37 PM, Hiroaki Yutani <yutani.ini at gmail.com>
>> wrote:
>> >
>> > Hi,
>> >
>> > I'm glad to see CRAN now has its official policy about Rust [1]!
>> > It seems it probably needs some feedback from those who are familiar
>> with
>> > the Rust workflow. I'm not an expert, but let me leave some quick
>> feedback.
>> > This email is sent to the R-package-devel mailing list as well as to
>> cran@~
>> > so that we can publicly discuss.
>> >
>> > It seems most of the concern is about how to make the build
>> deterministic.
>> > In this regard, the policy should encourage including "Cargo.lock" file
>> > [2]. Cargo.lock is created on the first compile, and the resolved
>> versions
>> > of dependencies are recorded. As long as this file exists, the
>> dependency
>> > versions are locked to the ones in this file, except when the package
>> > author explicitly updates the versions.
>> >
>> > Cargo.lock also records the SHA256 checksums of the crates if they are
>> from
>> > crates.io, Rust's official crate registry. If the checksums don't
>> match,
>> > the build will fail with the following message:
>> >
>> >    error: checksum for `foo v0.1.2` changed between lock files
>> >
>> >    this could be indicative of a few possible errors:
>> >
>> >        * the lock file is corrupt
>> >        * a replacement source in use (e.g., a mirror) returned a
>> different
>> > checksum
>> >        * the source itself may be corrupt in one way or another
>> >
>> >    unable to verify that `foo v0.1.2` is the same as when the lockfile
>> was
>> > generated
>> >
>> > For dependencies from Git repositories, Cargo.lock records the commit
>> > hashes. So, the version of the source code (not the version of the
>> crate)
>> > is uniquely determined. That said, unlike cargo.io, it's possible that
>> the
>> > commit or the Git repository itself has disappeared at the time of
>> > building, which makes the build fail. So, it might be reasonable the
>> CRAN
>> > policy prohibits the use of Git dependency unless the source code is
>> > bundled. I have no strong opinion here.
>> >
>> > Accordingly, I believe this sentence
>> >
>> >> In practice maintainers have found it nigh-impossible to meet these
>> > conditions whilst downloading as they have too little control.
>> >
>> > is not quite true. More specifically, these things
>> >
>> >> The standard way to download a Rust ?crate? is by its version number,
>> and
>> > these have been changed without changing their number.
>> >> Downloading a ?crate? normally entails downloading its dependencies,
>> and
>> > that is done without fixing their version numbers
>> >
>> > won't happen if the R package does include Cargo.lock because
>> >
>> > - if the crate is from crates.io, "the version can never be
>> overwritten,
>> > and the code cannot be deleted" there [3]
>> > - if the crate is from a Git repository, the commit hash is unique in
>> its
>> > nature. The version of the crate might be the same between commits, but
>> a
>> > git dependency is specified by the commit hash, not the version of the
>> > crate.
>> >
>> > I'm keen to know what problems the CRAN maintainers have experienced
>> that
>> > Cargo.lock cannot solve. I hope we can help somehow to improve the
>> policy.
>> >
>> > Best,
>> > Yutani
>> >
>> > [1]: https://cran.r-project.org/web/packages/using_rust.html
>> > [2]:
>> https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
>> > [3]: https://doc.rust-lang.org/cargo/reference/publishing.html
>> >
>> >       [[alternative HTML version deleted]]
>> >
>> > ______________________________________________
>> > R-package-devel at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-package-devel
>> >
>>
>> ______________________________________________
>> R-package-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>>
>

	[[alternative HTML version deleted]]


From yut@n|@|n| @end|ng |rom gm@||@com  Thu Jul 13 05:34:26 2023
From: yut@n|@|n| @end|ng |rom gm@||@com (Hiroaki Yutani)
Date: Thu, 13 Jul 2023 12:34:26 +0900
Subject: [R-pkg-devel] Feedback on "Using Rust in CRAN packages"
In-Reply-To: <389056FE-88DD-4A07-8FD1-63E0F286B3A8@R-project.org>
References: <CALyqOb__9-M_rEJ20dz3T07aNKP9_BRG25jdQ248WJA0ShuFCA@mail.gmail.com>
 <389056FE-88DD-4A07-8FD1-63E0F286B3A8@R-project.org>
Message-ID: <CALyqOb8C24csrQHV+kVUhgL1=Lk0bFF=+dMBU-uG+TOiSFmfNg@mail.gmail.com>

Hi Simon,

Thanks for the response. I thought

> download a specific version from a secure site and check that the
download is the expected code by some sort of checksum

refers to the usual process that's done by Cargo automatically. If it's
not, I think the policy should have a clear explanation. It seems it's not
only me who wondered why this policy doesn't mention Cargo.lock at all.

> it is not expected to use cargo to resolve them from random (possibly
inaccessible) places

Yes, I agree with you. So, I suggested the possibility of forbidding the
Git dependency. Or, do you call crates.io, Rust's official repository,
"random places"? If CRAN cannot trust even the official one of Rust, why
does CRAN have Rust at all?

That said, I agree with your concern about downloading via the Internet in
general. Downloading is one of the common sources of failure. If you want
to prevent cargo from downloading any source files, you can enforce adding
--offline option to "cargo build". While the package author might feel
unhappy, I think this would make your intent a bit clearer.

Best,
Yutani


2023?7?13?(?) 11:34 Simon Urbanek <simon.urbanek at r-project.org>:

> Yutani,
>
> I'm not quite sure your reading fully matches the intent of the policy.
> Cargo.lock is not sufficient, it is expected that the package will provide
> *all* the sources, it is not expected to use cargo to resolve them from
> random (possibly inaccessible) places. So the package author is expected to
> either include the sources in the package *or* (if prohibitive due to
> extreme size) have a release tar ball available at a fixed, secure,
> reliable location (I was recommending Zenodo.org for that reason - GitHub
> is neither fixed nor reliable by definition).
>
> Based on that, I'm not sure I fully understand the scope of your proposal
> for improvement. Carlo.lock is certainly the first step that the package
> author should take in creating the distribution tar ball so you can fix the
> versions, but it is not sufficient as the next step involves collecting the
> related sources. We don't want R users to be involved in that can of worms
> (especially since the lock file itself provides no guarantees of
> accessibility of the components and we don't want to have to manually
> inspect it), the package should be ready to be used which is why it has to
> do that step first. Does that explain the intent better? (In general, the
> downloading at install time is actually a problem, because it's not
> uncommon to use R in environments that have no Internet access, but the
> download is a concession for extreme cases where the tar balls may be too
> big to make it part of the package, but it's yet another can of worms...).
>
> Cheers,
> Simon
>
>
>
> > On 13/07/2023, at 12:37 PM, Hiroaki Yutani <yutani.ini at gmail.com> wrote:
> >
> > Hi,
> >
> > I'm glad to see CRAN now has its official policy about Rust [1]!
> > It seems it probably needs some feedback from those who are familiar with
> > the Rust workflow. I'm not an expert, but let me leave some quick
> feedback.
> > This email is sent to the R-package-devel mailing list as well as to
> cran@~
> > so that we can publicly discuss.
> >
> > It seems most of the concern is about how to make the build
> deterministic.
> > In this regard, the policy should encourage including "Cargo.lock" file
> > [2]. Cargo.lock is created on the first compile, and the resolved
> versions
> > of dependencies are recorded. As long as this file exists, the dependency
> > versions are locked to the ones in this file, except when the package
> > author explicitly updates the versions.
> >
> > Cargo.lock also records the SHA256 checksums of the crates if they are
> from
> > crates.io, Rust's official crate registry. If the checksums don't match,
> > the build will fail with the following message:
> >
> >    error: checksum for `foo v0.1.2` changed between lock files
> >
> >    this could be indicative of a few possible errors:
> >
> >        * the lock file is corrupt
> >        * a replacement source in use (e.g., a mirror) returned a
> different
> > checksum
> >        * the source itself may be corrupt in one way or another
> >
> >    unable to verify that `foo v0.1.2` is the same as when the lockfile
> was
> > generated
> >
> > For dependencies from Git repositories, Cargo.lock records the commit
> > hashes. So, the version of the source code (not the version of the crate)
> > is uniquely determined. That said, unlike cargo.io, it's possible that
> the
> > commit or the Git repository itself has disappeared at the time of
> > building, which makes the build fail. So, it might be reasonable the CRAN
> > policy prohibits the use of Git dependency unless the source code is
> > bundled. I have no strong opinion here.
> >
> > Accordingly, I believe this sentence
> >
> >> In practice maintainers have found it nigh-impossible to meet these
> > conditions whilst downloading as they have too little control.
> >
> > is not quite true. More specifically, these things
> >
> >> The standard way to download a Rust ?crate? is by its version number,
> and
> > these have been changed without changing their number.
> >> Downloading a ?crate? normally entails downloading its dependencies, and
> > that is done without fixing their version numbers
> >
> > won't happen if the R package does include Cargo.lock because
> >
> > - if the crate is from crates.io, "the version can never be overwritten,
> > and the code cannot be deleted" there [3]
> > - if the crate is from a Git repository, the commit hash is unique in its
> > nature. The version of the crate might be the same between commits, but a
> > git dependency is specified by the commit hash, not the version of the
> > crate.
> >
> > I'm keen to know what problems the CRAN maintainers have experienced that
> > Cargo.lock cannot solve. I hope we can help somehow to improve the
> policy.
> >
> > Best,
> > Yutani
> >
> > [1]: https://cran.r-project.org/web/packages/using_rust.html
> > [2]: https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
> > [3]: https://doc.rust-lang.org/cargo/reference/publishing.html
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-package-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-package-devel
> >
>
>

	[[alternative HTML version deleted]]


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Thu Jul 13 09:08:41 2023
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Thu, 13 Jul 2023 09:08:41 +0200
Subject: [R-pkg-devel] Feedback on "Using Rust in CRAN packages"
In-Reply-To: <CALyqOb9=ivxKMGCB_9EMf-5bkPSGP30fY1dn6hzE-v-+o2ZXvg@mail.gmail.com>
References: <CALyqOb__9-M_rEJ20dz3T07aNKP9_BRG25jdQ248WJA0ShuFCA@mail.gmail.com>
 <389056FE-88DD-4A07-8FD1-63E0F286B3A8@R-project.org>
 <CAJXgQP2qZkTEYg5=GQ3Ka9jVsAumsMq1rkZaWD+JgxBQmNKrww@mail.gmail.com>
 <CALyqOb9=ivxKMGCB_9EMf-5bkPSGP30fY1dn6hzE-v-+o2ZXvg@mail.gmail.com>
Message-ID: <f3e44a51-a06e-6aa0-b685-ce5908837483@gmail.com>


On 7/13/23 05:08, Hiroaki Yutani wrote:
> I actually use cargo vendor.
>
> https://github.com/yutannihilation/string2path/blob/main/src/rust/vendor.sh
>
> One thing to note is that, prior to R 4.3.0, the vendored directories hit
> the Windows' path limit so I had to put them into a TAR file. I haven't
> tested on R 4.3.0, but probably this problem is solved by this improvement.
> So, if you target only R >= 4.3, you can just cargo vendor.
>
> https://blog.r-project.org/2023/03/07/path-length-limit-on-windows/index.html

I wouldn't rely on that long paths on Windows are supported even in R >= 
4.3, because it requires at least Windows 10 1607, and it needs to be 
enabled system-wide in Windows - so, users/admins have to do that, and 
it impacts also other applications. The blog post has more details and 
recommendations.

Best
Tomas

>
> Best,
> Yutani
>
> 2023?7?13?(?) 11:50 Kevin Ushey <kevinushey at gmail.com>:
>
>> Package authors could use 'cargo vendor' to include Rust crate sources
>> directly in their source R packages. Would that be acceptable?
>>
>> Presumedly, the vendored sources would be built using the versions
>> specified in an accompanying Cargo.lock as well.
>>
>> https://doc.rust-lang.org/cargo/commands/cargo-vendor.html
>>
>>
>> On Wed, Jul 12, 2023, 7:35 PM Simon Urbanek <simon.urbanek at r-project.org>
>> wrote:
>>
>>> Yutani,
>>>
>>> I'm not quite sure your reading fully matches the intent of the policy.
>>> Cargo.lock is not sufficient, it is expected that the package will provide
>>> *all* the sources, it is not expected to use cargo to resolve them from
>>> random (possibly inaccessible) places. So the package author is expected to
>>> either include the sources in the package *or* (if prohibitive due to
>>> extreme size) have a release tar ball available at a fixed, secure,
>>> reliable location (I was recommending Zenodo.org for that reason - GitHub
>>> is neither fixed nor reliable by definition).
>>>
>>> Based on that, I'm not sure I fully understand the scope of your proposal
>>> for improvement. Carlo.lock is certainly the first step that the package
>>> author should take in creating the distribution tar ball so you can fix the
>>> versions, but it is not sufficient as the next step involves collecting the
>>> related sources. We don't want R users to be involved in that can of worms
>>> (especially since the lock file itself provides no guarantees of
>>> accessibility of the components and we don't want to have to manually
>>> inspect it), the package should be ready to be used which is why it has to
>>> do that step first. Does that explain the intent better? (In general, the
>>> downloading at install time is actually a problem, because it's not
>>> uncommon to use R in environments that have no Internet access, but the
>>> download is a concession for extreme cases where the tar balls may be too
>>> big to make it part of the package, but it's yet another can of worms...).
>>>
>>> Cheers,
>>> Simon
>>>
>>>
>>>
>>>> On 13/07/2023, at 12:37 PM, Hiroaki Yutani <yutani.ini at gmail.com>
>>> wrote:
>>>> Hi,
>>>>
>>>> I'm glad to see CRAN now has its official policy about Rust [1]!
>>>> It seems it probably needs some feedback from those who are familiar
>>> with
>>>> the Rust workflow. I'm not an expert, but let me leave some quick
>>> feedback.
>>>> This email is sent to the R-package-devel mailing list as well as to
>>> cran@~
>>>> so that we can publicly discuss.
>>>>
>>>> It seems most of the concern is about how to make the build
>>> deterministic.
>>>> In this regard, the policy should encourage including "Cargo.lock" file
>>>> [2]. Cargo.lock is created on the first compile, and the resolved
>>> versions
>>>> of dependencies are recorded. As long as this file exists, the
>>> dependency
>>>> versions are locked to the ones in this file, except when the package
>>>> author explicitly updates the versions.
>>>>
>>>> Cargo.lock also records the SHA256 checksums of the crates if they are
>>> from
>>>> crates.io, Rust's official crate registry. If the checksums don't
>>> match,
>>>> the build will fail with the following message:
>>>>
>>>>     error: checksum for `foo v0.1.2` changed between lock files
>>>>
>>>>     this could be indicative of a few possible errors:
>>>>
>>>>         * the lock file is corrupt
>>>>         * a replacement source in use (e.g., a mirror) returned a
>>> different
>>>> checksum
>>>>         * the source itself may be corrupt in one way or another
>>>>
>>>>     unable to verify that `foo v0.1.2` is the same as when the lockfile
>>> was
>>>> generated
>>>>
>>>> For dependencies from Git repositories, Cargo.lock records the commit
>>>> hashes. So, the version of the source code (not the version of the
>>> crate)
>>>> is uniquely determined. That said, unlike cargo.io, it's possible that
>>> the
>>>> commit or the Git repository itself has disappeared at the time of
>>>> building, which makes the build fail. So, it might be reasonable the
>>> CRAN
>>>> policy prohibits the use of Git dependency unless the source code is
>>>> bundled. I have no strong opinion here.
>>>>
>>>> Accordingly, I believe this sentence
>>>>
>>>>> In practice maintainers have found it nigh-impossible to meet these
>>>> conditions whilst downloading as they have too little control.
>>>>
>>>> is not quite true. More specifically, these things
>>>>
>>>>> The standard way to download a Rust ?crate? is by its version number,
>>> and
>>>> these have been changed without changing their number.
>>>>> Downloading a ?crate? normally entails downloading its dependencies,
>>> and
>>>> that is done without fixing their version numbers
>>>>
>>>> won't happen if the R package does include Cargo.lock because
>>>>
>>>> - if the crate is from crates.io, "the version can never be
>>> overwritten,
>>>> and the code cannot be deleted" there [3]
>>>> - if the crate is from a Git repository, the commit hash is unique in
>>> its
>>>> nature. The version of the crate might be the same between commits, but
>>> a
>>>> git dependency is specified by the commit hash, not the version of the
>>>> crate.
>>>>
>>>> I'm keen to know what problems the CRAN maintainers have experienced
>>> that
>>>> Cargo.lock cannot solve. I hope we can help somehow to improve the
>>> policy.
>>>> Best,
>>>> Yutani
>>>>
>>>> [1]: https://cran.r-project.org/web/packages/using_rust.html
>>>> [2]:
>>> https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
>>>> [3]: https://doc.rust-lang.org/cargo/reference/publishing.html
>>>>
>>>>        [[alternative HTML version deleted]]
>>>>
>>>> ______________________________________________
>>>> R-package-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>>>>
>>> ______________________________________________
>>> R-package-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>>>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From yut@n|@|n| @end|ng |rom gm@||@com  Thu Jul 13 09:16:08 2023
From: yut@n|@|n| @end|ng |rom gm@||@com (Hiroaki Yutani)
Date: Thu, 13 Jul 2023 16:16:08 +0900
Subject: [R-pkg-devel] Feedback on "Using Rust in CRAN packages"
In-Reply-To: <f3e44a51-a06e-6aa0-b685-ce5908837483@gmail.com>
References: <CALyqOb__9-M_rEJ20dz3T07aNKP9_BRG25jdQ248WJA0ShuFCA@mail.gmail.com>
 <389056FE-88DD-4A07-8FD1-63E0F286B3A8@R-project.org>
 <CAJXgQP2qZkTEYg5=GQ3Ka9jVsAumsMq1rkZaWD+JgxBQmNKrww@mail.gmail.com>
 <CALyqOb9=ivxKMGCB_9EMf-5bkPSGP30fY1dn6hzE-v-+o2ZXvg@mail.gmail.com>
 <f3e44a51-a06e-6aa0-b685-ce5908837483@gmail.com>
Message-ID: <CALyqOb-Jp3aCRKDiHuQ0s8uu0O0KwNYE3qcNkYS9q23OYyBe7g@mail.gmail.com>

Thank you for the correction. I see.

Best,
Yutani

2023?7?13?(?) 16:08 Tomas Kalibera <tomas.kalibera at gmail.com>:

>
> On 7/13/23 05:08, Hiroaki Yutani wrote:
> > I actually use cargo vendor.
> >
> >
> https://github.com/yutannihilation/string2path/blob/main/src/rust/vendor.sh
> >
> > One thing to note is that, prior to R 4.3.0, the vendored directories hit
> > the Windows' path limit so I had to put them into a TAR file. I haven't
> > tested on R 4.3.0, but probably this problem is solved by this
> improvement.
> > So, if you target only R >= 4.3, you can just cargo vendor.
> >
> >
> https://blog.r-project.org/2023/03/07/path-length-limit-on-windows/index.html
>
> I wouldn't rely on that long paths on Windows are supported even in R >=
> 4.3, because it requires at least Windows 10 1607, and it needs to be
> enabled system-wide in Windows - so, users/admins have to do that, and
> it impacts also other applications. The blog post has more details and
> recommendations.
>
> Best
> Tomas
>
> >
> > Best,
> > Yutani
> >
> > 2023?7?13?(?) 11:50 Kevin Ushey <kevinushey at gmail.com>:
> >
> >> Package authors could use 'cargo vendor' to include Rust crate sources
> >> directly in their source R packages. Would that be acceptable?
> >>
> >> Presumedly, the vendored sources would be built using the versions
> >> specified in an accompanying Cargo.lock as well.
> >>
> >> https://doc.rust-lang.org/cargo/commands/cargo-vendor.html
> >>
> >>
> >> On Wed, Jul 12, 2023, 7:35 PM Simon Urbanek <
> simon.urbanek at r-project.org>
> >> wrote:
> >>
> >>> Yutani,
> >>>
> >>> I'm not quite sure your reading fully matches the intent of the policy.
> >>> Cargo.lock is not sufficient, it is expected that the package will
> provide
> >>> *all* the sources, it is not expected to use cargo to resolve them from
> >>> random (possibly inaccessible) places. So the package author is
> expected to
> >>> either include the sources in the package *or* (if prohibitive due to
> >>> extreme size) have a release tar ball available at a fixed, secure,
> >>> reliable location (I was recommending Zenodo.org for that reason -
> GitHub
> >>> is neither fixed nor reliable by definition).
> >>>
> >>> Based on that, I'm not sure I fully understand the scope of your
> proposal
> >>> for improvement. Carlo.lock is certainly the first step that the
> package
> >>> author should take in creating the distribution tar ball so you can
> fix the
> >>> versions, but it is not sufficient as the next step involves
> collecting the
> >>> related sources. We don't want R users to be involved in that can of
> worms
> >>> (especially since the lock file itself provides no guarantees of
> >>> accessibility of the components and we don't want to have to manually
> >>> inspect it), the package should be ready to be used which is why it
> has to
> >>> do that step first. Does that explain the intent better? (In general,
> the
> >>> downloading at install time is actually a problem, because it's not
> >>> uncommon to use R in environments that have no Internet access, but the
> >>> download is a concession for extreme cases where the tar balls may be
> too
> >>> big to make it part of the package, but it's yet another can of
> worms...).
> >>>
> >>> Cheers,
> >>> Simon
> >>>
> >>>
> >>>
> >>>> On 13/07/2023, at 12:37 PM, Hiroaki Yutani <yutani.ini at gmail.com>
> >>> wrote:
> >>>> Hi,
> >>>>
> >>>> I'm glad to see CRAN now has its official policy about Rust [1]!
> >>>> It seems it probably needs some feedback from those who are familiar
> >>> with
> >>>> the Rust workflow. I'm not an expert, but let me leave some quick
> >>> feedback.
> >>>> This email is sent to the R-package-devel mailing list as well as to
> >>> cran@~
> >>>> so that we can publicly discuss.
> >>>>
> >>>> It seems most of the concern is about how to make the build
> >>> deterministic.
> >>>> In this regard, the policy should encourage including "Cargo.lock"
> file
> >>>> [2]. Cargo.lock is created on the first compile, and the resolved
> >>> versions
> >>>> of dependencies are recorded. As long as this file exists, the
> >>> dependency
> >>>> versions are locked to the ones in this file, except when the package
> >>>> author explicitly updates the versions.
> >>>>
> >>>> Cargo.lock also records the SHA256 checksums of the crates if they are
> >>> from
> >>>> crates.io, Rust's official crate registry. If the checksums don't
> >>> match,
> >>>> the build will fail with the following message:
> >>>>
> >>>>     error: checksum for `foo v0.1.2` changed between lock files
> >>>>
> >>>>     this could be indicative of a few possible errors:
> >>>>
> >>>>         * the lock file is corrupt
> >>>>         * a replacement source in use (e.g., a mirror) returned a
> >>> different
> >>>> checksum
> >>>>         * the source itself may be corrupt in one way or another
> >>>>
> >>>>     unable to verify that `foo v0.1.2` is the same as when the
> lockfile
> >>> was
> >>>> generated
> >>>>
> >>>> For dependencies from Git repositories, Cargo.lock records the commit
> >>>> hashes. So, the version of the source code (not the version of the
> >>> crate)
> >>>> is uniquely determined. That said, unlike cargo.io, it's possible
> that
> >>> the
> >>>> commit or the Git repository itself has disappeared at the time of
> >>>> building, which makes the build fail. So, it might be reasonable the
> >>> CRAN
> >>>> policy prohibits the use of Git dependency unless the source code is
> >>>> bundled. I have no strong opinion here.
> >>>>
> >>>> Accordingly, I believe this sentence
> >>>>
> >>>>> In practice maintainers have found it nigh-impossible to meet these
> >>>> conditions whilst downloading as they have too little control.
> >>>>
> >>>> is not quite true. More specifically, these things
> >>>>
> >>>>> The standard way to download a Rust ?crate? is by its version number,
> >>> and
> >>>> these have been changed without changing their number.
> >>>>> Downloading a ?crate? normally entails downloading its dependencies,
> >>> and
> >>>> that is done without fixing their version numbers
> >>>>
> >>>> won't happen if the R package does include Cargo.lock because
> >>>>
> >>>> - if the crate is from crates.io, "the version can never be
> >>> overwritten,
> >>>> and the code cannot be deleted" there [3]
> >>>> - if the crate is from a Git repository, the commit hash is unique in
> >>> its
> >>>> nature. The version of the crate might be the same between commits,
> but
> >>> a
> >>>> git dependency is specified by the commit hash, not the version of the
> >>>> crate.
> >>>>
> >>>> I'm keen to know what problems the CRAN maintainers have experienced
> >>> that
> >>>> Cargo.lock cannot solve. I hope we can help somehow to improve the
> >>> policy.
> >>>> Best,
> >>>> Yutani
> >>>>
> >>>> [1]: https://cran.r-project.org/web/packages/using_rust.html
> >>>> [2]:
> >>> https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
> >>>> [3]: https://doc.rust-lang.org/cargo/reference/publishing.html
> >>>>
> >>>>        [[alternative HTML version deleted]]
> >>>>
> >>>> ______________________________________________
> >>>> R-package-devel at r-project.org mailing list
> >>>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
> >>>>
> >>> ______________________________________________
> >>> R-package-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
> >>>
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-package-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-package-devel
>

	[[alternative HTML version deleted]]


From h@w|ckh@m @end|ng |rom gm@||@com  Thu Jul 13 20:38:24 2023
From: h@w|ckh@m @end|ng |rom gm@||@com (Hadley Wickham)
Date: Thu, 13 Jul 2023 13:38:24 -0500
Subject: [R-pkg-devel] Feedback on "Using Rust in CRAN packages"
In-Reply-To: <CALyqOb8C24csrQHV+kVUhgL1=Lk0bFF=+dMBU-uG+TOiSFmfNg@mail.gmail.com>
References: <CALyqOb__9-M_rEJ20dz3T07aNKP9_BRG25jdQ248WJA0ShuFCA@mail.gmail.com>
 <389056FE-88DD-4A07-8FD1-63E0F286B3A8@R-project.org>
 <CALyqOb8C24csrQHV+kVUhgL1=Lk0bFF=+dMBU-uG+TOiSFmfNg@mail.gmail.com>
Message-ID: <CABdHhvH7aOaXrZ7Z02Ku4yQES86gTrEG2akEZiMa1qdDc7URbg@mail.gmail.com>

> > it is not expected to use cargo to resolve them from random (possibly
> inaccessible) places
>
> Yes, I agree with you. So, I suggested the possibility of forbidding the
> Git dependency. Or, do you call crates.io, Rust's official repository,
> "random places"? If CRAN cannot trust even the official one of Rust, why
> does CRAN have Rust at all?

It's worth noting that crates.io is supported by the Rust foundation
(https://foundation.rust-lang.org). Judging from their most recent
annual report (https://foundation.rust-lang.org/static/publications/annual-reports/annual-report-2022.pdf),
where they reported a $880k surplus, I think they're probably going to
be around for a while.

Hadley

-- 
http://hadley.nz


From @|mon@urb@nek @end|ng |rom R-project@org  Fri Jul 14 00:49:17 2023
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 14 Jul 2023 10:49:17 +1200
Subject: [R-pkg-devel] Feedback on "Using Rust in CRAN packages"
In-Reply-To: <CALyqOb8C24csrQHV+kVUhgL1=Lk0bFF=+dMBU-uG+TOiSFmfNg@mail.gmail.com>
References: <CALyqOb__9-M_rEJ20dz3T07aNKP9_BRG25jdQ248WJA0ShuFCA@mail.gmail.com>
 <389056FE-88DD-4A07-8FD1-63E0F286B3A8@R-project.org>
 <CALyqOb8C24csrQHV+kVUhgL1=Lk0bFF=+dMBU-uG+TOiSFmfNg@mail.gmail.com>
Message-ID: <06675DF4-6655-4AB5-B636-1AE443A0B651@R-project.org>

Yutani,

[moving back to the original thread, please don't cross-post]


> On Jul 13, 2023, at 3:34 PM, Hiroaki Yutani <yutani.ini at gmail.com> wrote:
> 
> Hi Simon,
> 
> Thanks for the response. I thought
> 
>> download a specific version from a secure site and check that the
> download is the expected code by some sort of checksum
> 
> refers to the usual process that's done by Cargo automatically. If it's
> not, I think the policy should have a clear explanation. It seems it's not
> only me who wondered why this policy doesn't mention Cargo.lock at all.
> 


as explained. The instructions will be updated to make it clear that "cargo vendor" is the right tool here.


>> it is not expected to use cargo to resolve them from random (possibly
> inaccessible) places
> 
> Yes, I agree with you. So, I suggested the possibility of forbidding the Git dependency. Or, do you call crates.io, Rust's official repository, "random places"?


No, as I understand it, the lock file can have arbitrary URLs, that's what I was referring to.


> If CRAN cannot trust even the official one of Rust, why does CRAN have Rust at all?
> 


I don't see the connection - if you downloaded something in the past it doesn't mean you will be able to do so in the future. And CRAN has Rust because it sounded like a good idea to allow packages to use it, but I can see that it opened a can of worms that we trying to tame here.


> That said, I agree with your concern about downloading via the Internet in
> general. Downloading is one of the common sources of failure. If you want
> to prevent cargo from downloading any source files, you can enforce adding
> --offline option to "cargo build". While the package author might feel
> unhappy, I think this would make your intent a bit clearer.
> 


I'm not a cargo expert, but I thought cargo build --offline is not needed if the dependencies are already vendored? If you think cargo users need more help with the steps, then feel free to propose what the instructions should say (we really assume that the authors know what they are doing).

Cheers,
Simon


From h@w|ckh@m @end|ng |rom gm@||@com  Fri Jul 14 01:19:46 2023
From: h@w|ckh@m @end|ng |rom gm@||@com (Hadley Wickham)
Date: Thu, 13 Jul 2023 18:19:46 -0500
Subject: [R-pkg-devel] Feedback on "Using Rust in CRAN packages"
In-Reply-To: <06675DF4-6655-4AB5-B636-1AE443A0B651@R-project.org>
References: <CALyqOb__9-M_rEJ20dz3T07aNKP9_BRG25jdQ248WJA0ShuFCA@mail.gmail.com>
 <389056FE-88DD-4A07-8FD1-63E0F286B3A8@R-project.org>
 <CALyqOb8C24csrQHV+kVUhgL1=Lk0bFF=+dMBU-uG+TOiSFmfNg@mail.gmail.com>
 <06675DF4-6655-4AB5-B636-1AE443A0B651@R-project.org>
Message-ID: <CABdHhvFTo4dWm-v0Hwuoba9uiKffVMZQNuAy+YM_RL3gWmbOHw@mail.gmail.com>

> > If CRAN cannot trust even the official one of Rust, why does CRAN have Rust at all?
> >
>
> I don't see the connection - if you downloaded something in the past it doesn't mean you will be able to do so in the future. And CRAN has Rust because it sounded like a good idea to allow packages to use it, but I can see that it opened a can of worms that we trying to tame here.

Can you give a bit more detail about your concerns here? Obviously
crates.io isn't some random site on the internet, it's the official
repository of the Rust language, supported by the corresponding
foundation for the language. To me that makes it feel very much like
CRAN, where we can assume if you downloaded something in the past, you
can download something in the future.

Hadley

-- 
http://hadley.nz


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Jul 14 01:49:35 2023
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 13 Jul 2023 19:49:35 -0400
Subject: [R-pkg-devel] Feedback on "Using Rust in CRAN packages"
In-Reply-To: <CABdHhvFTo4dWm-v0Hwuoba9uiKffVMZQNuAy+YM_RL3gWmbOHw@mail.gmail.com>
References: <CALyqOb__9-M_rEJ20dz3T07aNKP9_BRG25jdQ248WJA0ShuFCA@mail.gmail.com>
 <389056FE-88DD-4A07-8FD1-63E0F286B3A8@R-project.org>
 <CALyqOb8C24csrQHV+kVUhgL1=Lk0bFF=+dMBU-uG+TOiSFmfNg@mail.gmail.com>
 <06675DF4-6655-4AB5-B636-1AE443A0B651@R-project.org>
 <CABdHhvFTo4dWm-v0Hwuoba9uiKffVMZQNuAy+YM_RL3gWmbOHw@mail.gmail.com>
Message-ID: <a4db0a6d-c42a-6464-f59e-32d42327b1b3@gmail.com>

On 13/07/2023 7:19 p.m., Hadley Wickham wrote:
>>> If CRAN cannot trust even the official one of Rust, why does CRAN have Rust at all?
>>>
>>
>> I don't see the connection - if you downloaded something in the past it doesn't mean you will be able to do so in the future. And CRAN has Rust because it sounded like a good idea to allow packages to use it, but I can see that it opened a can of worms that we trying to tame here.
> 
> Can you give a bit more detail about your concerns here? Obviously
> crates.io isn't some random site on the internet, it's the official
> repository of the Rust language, supported by the corresponding
> foundation for the language. To me that makes it feel very much like
> CRAN, where we can assume if you downloaded something in the past, you
> can download something in the future.

That last statement is true, but also sort of false: you should be able 
to download the same version of the package that you downloaded last 
time, but you might not be able to download a version of the package 
that works with the current version of R.

Duncan Murdoch


From @|mon@urb@nek @end|ng |rom R-project@org  Fri Jul 14 02:06:21 2023
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Fri, 14 Jul 2023 12:06:21 +1200
Subject: [R-pkg-devel] Feedback on "Using Rust in CRAN packages"
In-Reply-To: <CABdHhvFTo4dWm-v0Hwuoba9uiKffVMZQNuAy+YM_RL3gWmbOHw@mail.gmail.com>
References: <CALyqOb__9-M_rEJ20dz3T07aNKP9_BRG25jdQ248WJA0ShuFCA@mail.gmail.com>
 <389056FE-88DD-4A07-8FD1-63E0F286B3A8@R-project.org>
 <CALyqOb8C24csrQHV+kVUhgL1=Lk0bFF=+dMBU-uG+TOiSFmfNg@mail.gmail.com>
 <06675DF4-6655-4AB5-B636-1AE443A0B651@R-project.org>
 <CABdHhvFTo4dWm-v0Hwuoba9uiKffVMZQNuAy+YM_RL3gWmbOHw@mail.gmail.com>
Message-ID: <6EAE6A61-F6DB-4747-8D00-07DA4A3AE39F@R-project.org>



> On Jul 14, 2023, at 11:19 AM, Hadley Wickham <h.wickham at gmail.com> wrote:
> 
>>> If CRAN cannot trust even the official one of Rust, why does CRAN have Rust at all?
>>> 
>> 
>> I don't see the connection - if you downloaded something in the past it doesn't mean you will be able to do so in the future. And CRAN has Rust because it sounded like a good idea to allow packages to use it, but I can see that it opened a can of worms that we trying to tame here.
> 
> Can you give a bit more detail about your concerns here? Obviously
> crates.io isn't some random site on the internet, it's the official
> repository of the Rust language, supported by the corresponding
> foundation for the language. To me that makes it feel very much like
> CRAN, where we can assume if you downloaded something in the past, you
> can download something in the future.
> 

I was just responding to Yutani's question why we downloaded the Rust compilers on CRAN at all. This has really nothing to do with the previous discussion which is why I did say "I don't see the connection". Also I wasn't talking about crates.io anywhere in my responses in this thread. The only thing I wanted to discuss here was that I think the existing Rust model  ("vendor" into the package sources) seems like a good one to apply to Go, but that got somehow hijacked...

Cheers,
Simon


From edd @end|ng |rom deb|@n@org  Fri Jul 14 02:18:56 2023
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Thu, 13 Jul 2023 19:18:56 -0500
Subject: [R-pkg-devel] Feedback on "Using Rust in CRAN packages"
In-Reply-To: <CABdHhvFTo4dWm-v0Hwuoba9uiKffVMZQNuAy+YM_RL3gWmbOHw@mail.gmail.com>
References: <CALyqOb__9-M_rEJ20dz3T07aNKP9_BRG25jdQ248WJA0ShuFCA@mail.gmail.com>
 <389056FE-88DD-4A07-8FD1-63E0F286B3A8@R-project.org>
 <CALyqOb8C24csrQHV+kVUhgL1=Lk0bFF=+dMBU-uG+TOiSFmfNg@mail.gmail.com>
 <06675DF4-6655-4AB5-B636-1AE443A0B651@R-project.org>
 <CABdHhvFTo4dWm-v0Hwuoba9uiKffVMZQNuAy+YM_RL3gWmbOHw@mail.gmail.com>
Message-ID: <25776.38000.34041.495290@rob.eddelbuettel.com>


The concerns over github going away (!!) (or altering references, tags,
releases, ...) may be somewhat alleviated by Software Heritage [1] covering
and 'preserving' it.  FWIW I briefly spoke about that iniative and a possible
CRAN connection at useR! in Toulouse four years ago [2].

I think I understand where CRAN is coming from. Builds for Debian have the
same requirements of 'everythin all at once better be local'.  Sadly what I
see in day to day life (hello cmake, hello vcpkg) moves firmly the other way.
We shall see how it all shakes out.

I would be very much in favor of workable rust (and then go, and so on)
solution. 

Dirk

[1] https://www.softwareheritage.org/
[2] https://dirk.eddelbuettel.com/papers/useR2019_swh_cran_talk.pdf

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From yut@n|@|n| @end|ng |rom gm@||@com  Fri Jul 14 02:58:20 2023
From: yut@n|@|n| @end|ng |rom gm@||@com (Hiroaki Yutani)
Date: Fri, 14 Jul 2023 09:58:20 +0900
Subject: [R-pkg-devel] Feedback on "Using Rust in CRAN packages"
In-Reply-To: <6EAE6A61-F6DB-4747-8D00-07DA4A3AE39F@R-project.org>
References: <CALyqOb__9-M_rEJ20dz3T07aNKP9_BRG25jdQ248WJA0ShuFCA@mail.gmail.com>
 <389056FE-88DD-4A07-8FD1-63E0F286B3A8@R-project.org>
 <CALyqOb8C24csrQHV+kVUhgL1=Lk0bFF=+dMBU-uG+TOiSFmfNg@mail.gmail.com>
 <06675DF4-6655-4AB5-B636-1AE443A0B651@R-project.org>
 <CABdHhvFTo4dWm-v0Hwuoba9uiKffVMZQNuAy+YM_RL3gWmbOHw@mail.gmail.com>
 <6EAE6A61-F6DB-4747-8D00-07DA4A3AE39F@R-project.org>
Message-ID: <CALyqOb9-uKX3P1xeic9yKxxHBOuiqjtbKeBD8S2AzQUfKMRzHA@mail.gmail.com>

Simin,

Sorry that my question was not clear. Let me clarify.

I think we all agree that "cargo vendor" is the primary option. Since
downloading without explicit permission is not allowed on CRAN in general,
it's reasonable. I'm happy that the instructions will describe it clearly.

But, some R packages have too large dependencies to bundle. In this case,
downloading can be allowed with "the explicit permission of the CRAN team,"
if I understand correctly. For this, I think Cargo's downloading mechanism
satisfy this requirement if (1) all the dependencies are from crates.io and
(2) Cargo.lock exists:

> download a specific version from a secure site and check that the
download is the expected code by some sort of checksum

Because Cargo downloads specific versions recorded in Cargo.lock, verifies
the checksums, and crates.io is the "secure site" that we can rely on as
Hadley wrote.

My question is, does CRAN allow Cargo to download the dependency sources on
CRAN? The policy says:

> So downloading of Rust ?crates? will in future require the explicit
permission of the CRAN team

To my eyes, this implies

- CRAN currently allows Cargo's downloading of dependency Rust crates even
without the permission
- CRAN will keep allowing Cargo's downloading if the package author asks
the permission

And, if CRAN doesn't allow it, I (and probably many Rust users) would like
to know why. As I described above, it should satisfy the requirement.

>  please don't cross-post

Sorry.

> I thought cargo build --offline is not needed if the dependencies are
already vendored?

Yes, you are right. --offline is not needed if vendering is properly
configured. But, this probably means you have to review the build
configurations in .cargo/config.toml or so, so I just thought it would be
easier for you to check if --offline is specified to the command. This
seems a bit off-topic, so please ignore.

Best,
Yutani


2023?7?14?(?) 9:06 Simon Urbanek <simon.urbanek at r-project.org>:

>
>
> > On Jul 14, 2023, at 11:19 AM, Hadley Wickham <h.wickham at gmail.com>
> wrote:
> >
> >>> If CRAN cannot trust even the official one of Rust, why does CRAN have
> Rust at all?
> >>>
> >>
> >> I don't see the connection - if you downloaded something in the past it
> doesn't mean you will be able to do so in the future. And CRAN has Rust
> because it sounded like a good idea to allow packages to use it, but I can
> see that it opened a can of worms that we trying to tame here.
> >
> > Can you give a bit more detail about your concerns here? Obviously
> > crates.io isn't some random site on the internet, it's the official
> > repository of the Rust language, supported by the corresponding
> > foundation for the language. To me that makes it feel very much like
> > CRAN, where we can assume if you downloaded something in the past, you
> > can download something in the future.
> >
>
> I was just responding to Yutani's question why we downloaded the Rust
> compilers on CRAN at all. This has really nothing to do with the previous
> discussion which is why I did say "I don't see the connection". Also I
> wasn't talking about crates.io anywhere in my responses in this thread.
> The only thing I wanted to discuss here was that I think the existing Rust
> model  ("vendor" into the package sources) seems like a good one to apply
> to Go, but that got somehow hijacked...
>
> Cheers,
> Simon
>
>

	[[alternative HTML version deleted]]


