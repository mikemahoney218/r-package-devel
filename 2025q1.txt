From ||u|@@rev|||@ @end|ng |rom gm@||@com  Thu Jan  2 15:55:39 2025
From: ||u|@@rev|||@ @end|ng |rom gm@||@com (=?UTF-8?Q?Llu=C3=ADs_Revilla?=)
Date: Thu, 2 Jan 2025 15:55:39 +0100
Subject: [R-pkg-devel] Removing packages files
Message-ID: <CAN+W6_sjx59W6hGGMyj565smnazws=uasSWbwEHEe7kXT+YLAQ@mail.gmail.com>

Hi list,

I am developing a package that will download some data, and I'd like
to store it locally to not recalculate it often.
The CRAN policy requires tools::R_user_dir to be used and "the
contents are actively managed (including removing outdated material)"
or using TMPDIR but "such usage should be cleaned up".

When loading a package there is .onLoad or .onAttach to fill or check
those files and other settings required for a package. Is there
something for when a package is removed?

I found some related functions like .Last or reg.fnalizer and setHook
or packageEvent but they are about closing a session or don't have a
specific event for when uninstalling packages via (remove.packages). I
appreciate any feedback, thanks in advance.

Best wishes and a happy new year,

Llu?s


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Jan  2 17:23:40 2025
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 2 Jan 2025 11:23:40 -0500
Subject: [R-pkg-devel] Removing packages files
In-Reply-To: <CAN+W6_sjx59W6hGGMyj565smnazws=uasSWbwEHEe7kXT+YLAQ@mail.gmail.com>
References: <CAN+W6_sjx59W6hGGMyj565smnazws=uasSWbwEHEe7kXT+YLAQ@mail.gmail.com>
Message-ID: <fa376599-ff9f-4509-bc41-c5f8c0f8e9c9@gmail.com>

On 2025-01-02 9:55 a.m., Llu?s Revilla wrote:
> Hi list,
> 
> I am developing a package that will download some data, and I'd like
> to store it locally to not recalculate it often.
> The CRAN policy requires tools::R_user_dir to be used and "the
> contents are actively managed (including removing outdated material)"
> or using TMPDIR but "such usage should be cleaned up".
> 
> When loading a package there is .onLoad or .onAttach to fill or check
> those files and other settings required for a package. Is there
> something for when a package is removed?
> 
> I found some related functions like .Last or reg.fnalizer and setHook
> or packageEvent but they are about closing a session or don't have a
> specific event for when uninstalling packages via (remove.packages). I
> appreciate any feedback, thanks in advance.
> 

Yes, those are described in section "1.5.3 Load hooks" of writing R 
extensions:

"Packages can use a .onDetach or .Last.lib function (provided the latter 
is exported from the namespace) when detach is called on the package. It 
is called with a single argument, the full path to the installed 
package. There is also a hook .onUnload which is called when the 
namespace is unloaded (via a call to unloadNamespace, perhaps called by 
detach(unload = TRUE)) with argument the full path to the installed 
package?s directory. Functions .onUnload and .onDetach should be defined 
in the namespace and not exported, but .Last.lib does need to be exported."

Duncan Murdoch


From ||u|@@rev|||@ @end|ng |rom gm@||@com  Thu Jan  2 22:29:18 2025
From: ||u|@@rev|||@ @end|ng |rom gm@||@com (=?UTF-8?Q?Llu=C3=ADs_Revilla?=)
Date: Thu, 2 Jan 2025 22:29:18 +0100
Subject: [R-pkg-devel] Removing packages files
In-Reply-To: <fa376599-ff9f-4509-bc41-c5f8c0f8e9c9@gmail.com>
References: <CAN+W6_sjx59W6hGGMyj565smnazws=uasSWbwEHEe7kXT+YLAQ@mail.gmail.com>
 <fa376599-ff9f-4509-bc41-c5f8c0f8e9c9@gmail.com>
Message-ID: <CAN+W6_v3opSqb54GP=uo5O_MpA5Do+m3cR_1GyPdUCxJWRqV3Q@mail.gmail.com>

Dear Duncan,

Thank you for your answer. I checked again and made a mock package
that removes a file with .onDetach.
The file was not removed upon uninstalling the package.

Llu?s

On Thu, 2 Jan 2025 at 17:23, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>
> On 2025-01-02 9:55 a.m., Llu?s Revilla wrote:
> > Hi list,
> >
> > I am developing a package that will download some data, and I'd like
> > to store it locally to not recalculate it often.
> > The CRAN policy requires tools::R_user_dir to be used and "the
> > contents are actively managed (including removing outdated material)"
> > or using TMPDIR but "such usage should be cleaned up".
> >
> > When loading a package there is .onLoad or .onAttach to fill or check
> > those files and other settings required for a package. Is there
> > something for when a package is removed?
> >
> > I found some related functions like .Last or reg.fnalizer and setHook
> > or packageEvent but they are about closing a session or don't have a
> > specific event for when uninstalling packages via (remove.packages). I
> > appreciate any feedback, thanks in advance.
> >
>
> Yes, those are described in section "1.5.3 Load hooks" of writing R
> extensions:
>
> "Packages can use a .onDetach or .Last.lib function (provided the latter
> is exported from the namespace) when detach is called on the package. It
> is called with a single argument, the full path to the installed
> package. There is also a hook .onUnload which is called when the
> namespace is unloaded (via a call to unloadNamespace, perhaps called by
> detach(unload = TRUE)) with argument the full path to the installed
> package?s directory. Functions .onUnload and .onDetach should be defined
> in the namespace and not exported, but .Last.lib does need to be exported."
>
> Duncan Murdoch
>


From henr|k@bengt@@on @end|ng |rom gm@||@com  Thu Jan  2 22:41:59 2025
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Thu, 2 Jan 2025 13:41:59 -0800
Subject: [R-pkg-devel] Removing packages files
In-Reply-To: <CAN+W6_v3opSqb54GP=uo5O_MpA5Do+m3cR_1GyPdUCxJWRqV3Q@mail.gmail.com>
References: <CAN+W6_sjx59W6hGGMyj565smnazws=uasSWbwEHEe7kXT+YLAQ@mail.gmail.com>
 <fa376599-ff9f-4509-bc41-c5f8c0f8e9c9@gmail.com>
 <CAN+W6_v3opSqb54GP=uo5O_MpA5Do+m3cR_1GyPdUCxJWRqV3Q@mail.gmail.com>
Message-ID: <CAFDcVCQxDLka17fGx4XzdLUOCV4aV2B8GHRaqzhCvgzsxMHtjg@mail.gmail.com>

As a first step, this sounds like something for the 'tools' package,
e.g. tools::cleanup_R_user_dir() that wipes package subfolders of
packages no longer installed, or the specified package, iff given.
With that in place, one could argue for adding a 'cleanup' argument to
remove.packages() that use the former.

Agree, it would be neat if a package could clean up after itself when
uninstalled.

/Henrik

On Thu, Jan 2, 2025 at 1:37?PM Llu?s Revilla <lluis.revilla at gmail.com> wrote:
>
> Dear Duncan,
>
> Thank you for your answer. I checked again and made a mock package
> that removes a file with .onDetach.
> The file was not removed upon uninstalling the package.
>
> Llu?s
>
> On Thu, 2 Jan 2025 at 17:23, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> >
> > On 2025-01-02 9:55 a.m., Llu?s Revilla wrote:
> > > Hi list,
> > >
> > > I am developing a package that will download some data, and I'd like
> > > to store it locally to not recalculate it often.
> > > The CRAN policy requires tools::R_user_dir to be used and "the
> > > contents are actively managed (including removing outdated material)"
> > > or using TMPDIR but "such usage should be cleaned up".
> > >
> > > When loading a package there is .onLoad or .onAttach to fill or check
> > > those files and other settings required for a package. Is there
> > > something for when a package is removed?
> > >
> > > I found some related functions like .Last or reg.fnalizer and setHook
> > > or packageEvent but they are about closing a session or don't have a
> > > specific event for when uninstalling packages via (remove.packages). I
> > > appreciate any feedback, thanks in advance.
> > >
> >
> > Yes, those are described in section "1.5.3 Load hooks" of writing R
> > extensions:
> >
> > "Packages can use a .onDetach or .Last.lib function (provided the latter
> > is exported from the namespace) when detach is called on the package. It
> > is called with a single argument, the full path to the installed
> > package. There is also a hook .onUnload which is called when the
> > namespace is unloaded (via a call to unloadNamespace, perhaps called by
> > detach(unload = TRUE)) with argument the full path to the installed
> > package?s directory. Functions .onUnload and .onDetach should be defined
> > in the namespace and not exported, but .Last.lib does need to be exported."
> >
> > Duncan Murdoch
> >
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Jan  2 22:47:21 2025
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 2 Jan 2025 16:47:21 -0500
Subject: [R-pkg-devel] Removing packages files
In-Reply-To: <CAN+W6_v3opSqb54GP=uo5O_MpA5Do+m3cR_1GyPdUCxJWRqV3Q@mail.gmail.com>
References: <CAN+W6_sjx59W6hGGMyj565smnazws=uasSWbwEHEe7kXT+YLAQ@mail.gmail.com>
 <fa376599-ff9f-4509-bc41-c5f8c0f8e9c9@gmail.com>
 <CAN+W6_v3opSqb54GP=uo5O_MpA5Do+m3cR_1GyPdUCxJWRqV3Q@mail.gmail.com>
Message-ID: <7d36ce00-c0b0-458f-ac50-5aa577396acc@gmail.com>

Sorry, I misunderstood what you are after.  I thought you only wanted to 
keep it for the duration of a session.  I don't think there's a way to 
keep a file beyond the current session, but uninstall it later when the 
package is uninstalled.

I think the way you should handle this is to offer a function to the 
user to download the data to the user directory, not to ever do that 
automatically.  If the data hasn't been downloaded, then give the user a 
message that it needs to be downloaded for things to work.  (Or maybe 
download it to the temp directory, and delete it when your package is 
unloaded.)

Duncan Murdoch


On 2025-01-02 4:29 p.m., Llu?s Revilla wrote:
> Dear Duncan,
> 
> Thank you for your answer. I checked again and made a mock package
> that removes a file with .onDetach.
> The file was not removed upon uninstalling the package.
> 
> Llu?s
> 
> On Thu, 2 Jan 2025 at 17:23, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>
>> On 2025-01-02 9:55 a.m., Llu?s Revilla wrote:
>>> Hi list,
>>>
>>> I am developing a package that will download some data, and I'd like
>>> to store it locally to not recalculate it often.
>>> The CRAN policy requires tools::R_user_dir to be used and "the
>>> contents are actively managed (including removing outdated material)"
>>> or using TMPDIR but "such usage should be cleaned up".
>>>
>>> When loading a package there is .onLoad or .onAttach to fill or check
>>> those files and other settings required for a package. Is there
>>> something for when a package is removed?
>>>
>>> I found some related functions like .Last or reg.fnalizer and setHook
>>> or packageEvent but they are about closing a session or don't have a
>>> specific event for when uninstalling packages via (remove.packages). I
>>> appreciate any feedback, thanks in advance.
>>>
>>
>> Yes, those are described in section "1.5.3 Load hooks" of writing R
>> extensions:
>>
>> "Packages can use a .onDetach or .Last.lib function (provided the latter
>> is exported from the namespace) when detach is called on the package. It
>> is called with a single argument, the full path to the installed
>> package. There is also a hook .onUnload which is called when the
>> namespace is unloaded (via a call to unloadNamespace, perhaps called by
>> detach(unload = TRUE)) with argument the full path to the installed
>> package?s directory. Functions .onUnload and .onDetach should be defined
>> in the namespace and not exported, but .Last.lib does need to be exported."
>>
>> Duncan Murdoch
>>


From ||u|@@rev|||@ @end|ng |rom gm@||@com  Fri Jan  3 16:04:01 2025
From: ||u|@@rev|||@ @end|ng |rom gm@||@com (=?UTF-8?Q?Llu=C3=ADs_Revilla?=)
Date: Fri, 3 Jan 2025 16:04:01 +0100
Subject: [R-pkg-devel] Removing packages files
In-Reply-To: <CAFDcVCQxDLka17fGx4XzdLUOCV4aV2B8GHRaqzhCvgzsxMHtjg@mail.gmail.com>
References: <CAN+W6_sjx59W6hGGMyj565smnazws=uasSWbwEHEe7kXT+YLAQ@mail.gmail.com>
 <fa376599-ff9f-4509-bc41-c5f8c0f8e9c9@gmail.com>
 <CAN+W6_v3opSqb54GP=uo5O_MpA5Do+m3cR_1GyPdUCxJWRqV3Q@mail.gmail.com>
 <CAFDcVCQxDLka17fGx4XzdLUOCV4aV2B8GHRaqzhCvgzsxMHtjg@mail.gmail.com>
Message-ID: <CAN+W6_uipwj9WopA1Dk5VA9aY1=7HM=XoixWUMXrYPtHj9id_Q@mail.gmail.com>

Thanks Henrik for confirming there is nothing similar currently.

Duncan: Letting the user choose when to remove the folder/data at will is easy.
I was trying to ensure that the system is clean after removing the package.
Thanks.

On Thu, 2 Jan 2025 at 22:42, Henrik Bengtsson
<henrik.bengtsson at gmail.com> wrote:
>
> As a first step, this sounds like something for the 'tools' package,
> e.g. tools::cleanup_R_user_dir() that wipes package subfolders of
> packages no longer installed, or the specified package, iff given.
> With that in place, one could argue for adding a 'cleanup' argument to
> remove.packages() that use the former.
>
> Agree, it would be neat if a package could clean up after itself when
> uninstalled.
>
> /Henrik
>
> On Thu, Jan 2, 2025 at 1:37?PM Llu?s Revilla <lluis.revilla at gmail.com> wrote:
> >
> > Dear Duncan,
> >
> > Thank you for your answer. I checked again and made a mock package
> > that removes a file with .onDetach.
> > The file was not removed upon uninstalling the package.
> >
> > Llu?s
> >
> > On Thu, 2 Jan 2025 at 17:23, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> > >
> > > On 2025-01-02 9:55 a.m., Llu?s Revilla wrote:
> > > > Hi list,
> > > >
> > > > I am developing a package that will download some data, and I'd like
> > > > to store it locally to not recalculate it often.
> > > > The CRAN policy requires tools::R_user_dir to be used and "the
> > > > contents are actively managed (including removing outdated material)"
> > > > or using TMPDIR but "such usage should be cleaned up".
> > > >
> > > > When loading a package there is .onLoad or .onAttach to fill or check
> > > > those files and other settings required for a package. Is there
> > > > something for when a package is removed?
> > > >
> > > > I found some related functions like .Last or reg.fnalizer and setHook
> > > > or packageEvent but they are about closing a session or don't have a
> > > > specific event for when uninstalling packages via (remove.packages). I
> > > > appreciate any feedback, thanks in advance.
> > > >
> > >
> > > Yes, those are described in section "1.5.3 Load hooks" of writing R
> > > extensions:
> > >
> > > "Packages can use a .onDetach or .Last.lib function (provided the latter
> > > is exported from the namespace) when detach is called on the package. It
> > > is called with a single argument, the full path to the installed
> > > package. There is also a hook .onUnload which is called when the
> > > namespace is unloaded (via a call to unloadNamespace, perhaps called by
> > > detach(unload = TRUE)) with argument the full path to the installed
> > > package?s directory. Functions .onUnload and .onDetach should be defined
> > > in the namespace and not exported, but .Last.lib does need to be exported."
> > >
> > > Duncan Murdoch
> > >
> >
> > ______________________________________________
> > R-package-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-package-devel


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Jan  3 17:23:32 2025
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 3 Jan 2025 11:23:32 -0500
Subject: [R-pkg-devel] Removing packages files
In-Reply-To: <CAN+W6_uipwj9WopA1Dk5VA9aY1=7HM=XoixWUMXrYPtHj9id_Q@mail.gmail.com>
References: <CAN+W6_sjx59W6hGGMyj565smnazws=uasSWbwEHEe7kXT+YLAQ@mail.gmail.com>
 <fa376599-ff9f-4509-bc41-c5f8c0f8e9c9@gmail.com>
 <CAN+W6_v3opSqb54GP=uo5O_MpA5Do+m3cR_1GyPdUCxJWRqV3Q@mail.gmail.com>
 <CAFDcVCQxDLka17fGx4XzdLUOCV4aV2B8GHRaqzhCvgzsxMHtjg@mail.gmail.com>
 <CAN+W6_uipwj9WopA1Dk5VA9aY1=7HM=XoixWUMXrYPtHj9id_Q@mail.gmail.com>
Message-ID: <7cca8298-6e75-429f-ac89-dba8a7a79929@gmail.com>

On 2025-01-03 10:04 a.m., Llu?s Revilla wrote:
> Thanks Henrik for confirming there is nothing similar currently.
> 
> Duncan: Letting the user choose when to remove the folder/data at will is easy.
> I was trying to ensure that the system is clean after removing the package.
> Thanks.

No, I was suggesting that you require the user to explicitly ask for the 
data.  You don't want CRAN to install the data during testing and then 
have it left behind at the end.

Duncan Murdoch

> 
> On Thu, 2 Jan 2025 at 22:42, Henrik Bengtsson
> <henrik.bengtsson at gmail.com> wrote:
>>
>> As a first step, this sounds like something for the 'tools' package,
>> e.g. tools::cleanup_R_user_dir() that wipes package subfolders of
>> packages no longer installed, or the specified package, iff given.
>> With that in place, one could argue for adding a 'cleanup' argument to
>> remove.packages() that use the former.
>>
>> Agree, it would be neat if a package could clean up after itself when
>> uninstalled.
>>
>> /Henrik
>>
>> On Thu, Jan 2, 2025 at 1:37?PM Llu?s Revilla <lluis.revilla at gmail.com> wrote:
>>>
>>> Dear Duncan,
>>>
>>> Thank you for your answer. I checked again and made a mock package
>>> that removes a file with .onDetach.
>>> The file was not removed upon uninstalling the package.
>>>
>>> Llu?s
>>>
>>> On Thu, 2 Jan 2025 at 17:23, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>>>>
>>>> On 2025-01-02 9:55 a.m., Llu?s Revilla wrote:
>>>>> Hi list,
>>>>>
>>>>> I am developing a package that will download some data, and I'd like
>>>>> to store it locally to not recalculate it often.
>>>>> The CRAN policy requires tools::R_user_dir to be used and "the
>>>>> contents are actively managed (including removing outdated material)"
>>>>> or using TMPDIR but "such usage should be cleaned up".
>>>>>
>>>>> When loading a package there is .onLoad or .onAttach to fill or check
>>>>> those files and other settings required for a package. Is there
>>>>> something for when a package is removed?
>>>>>
>>>>> I found some related functions like .Last or reg.fnalizer and setHook
>>>>> or packageEvent but they are about closing a session or don't have a
>>>>> specific event for when uninstalling packages via (remove.packages). I
>>>>> appreciate any feedback, thanks in advance.
>>>>>
>>>>
>>>> Yes, those are described in section "1.5.3 Load hooks" of writing R
>>>> extensions:
>>>>
>>>> "Packages can use a .onDetach or .Last.lib function (provided the latter
>>>> is exported from the namespace) when detach is called on the package. It
>>>> is called with a single argument, the full path to the installed
>>>> package. There is also a hook .onUnload which is called when the
>>>> namespace is unloaded (via a call to unloadNamespace, perhaps called by
>>>> detach(unload = TRUE)) with argument the full path to the installed
>>>> package?s directory. Functions .onUnload and .onDetach should be defined
>>>> in the namespace and not exported, but .Last.lib does need to be exported."
>>>>
>>>> Duncan Murdoch
>>>>
>>>
>>> ______________________________________________
>>> R-package-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From edd @end|ng |rom deb|@n@org  Fri Jan  3 17:34:17 2025
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Fri, 3 Jan 2025 10:34:17 -0600
Subject: [R-pkg-devel] Removing packages files
In-Reply-To: <CAFDcVCQxDLka17fGx4XzdLUOCV4aV2B8GHRaqzhCvgzsxMHtjg@mail.gmail.com>
References: <CAN+W6_sjx59W6hGGMyj565smnazws=uasSWbwEHEe7kXT+YLAQ@mail.gmail.com>
 <fa376599-ff9f-4509-bc41-c5f8c0f8e9c9@gmail.com>
 <CAN+W6_v3opSqb54GP=uo5O_MpA5Do+m3cR_1GyPdUCxJWRqV3Q@mail.gmail.com>
 <CAFDcVCQxDLka17fGx4XzdLUOCV4aV2B8GHRaqzhCvgzsxMHtjg@mail.gmail.com>
Message-ID: <26488.4489.589883.44632@rob.eddelbuettel.com>


On 2 January 2025 at 13:41, Henrik Bengtsson wrote:
| Agree, it would be neat if a package could clean up after itself when
| uninstalled.

Indeed many things could be nicer if we had more package manager integrations
and hooks besides `cleanup` and `configure`.  Someone would have to start
with some patches to get the ball rolling.

Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From ||u|@@rev|||@ @end|ng |rom gm@||@com  Fri Jan  3 17:46:36 2025
From: ||u|@@rev|||@ @end|ng |rom gm@||@com (=?UTF-8?Q?Llu=C3=ADs_Revilla?=)
Date: Fri, 3 Jan 2025 17:46:36 +0100
Subject: [R-pkg-devel] Removing packages files
In-Reply-To: <7cca8298-6e75-429f-ac89-dba8a7a79929@gmail.com>
References: <CAN+W6_sjx59W6hGGMyj565smnazws=uasSWbwEHEe7kXT+YLAQ@mail.gmail.com>
 <fa376599-ff9f-4509-bc41-c5f8c0f8e9c9@gmail.com>
 <CAN+W6_v3opSqb54GP=uo5O_MpA5Do+m3cR_1GyPdUCxJWRqV3Q@mail.gmail.com>
 <CAFDcVCQxDLka17fGx4XzdLUOCV4aV2B8GHRaqzhCvgzsxMHtjg@mail.gmail.com>
 <CAN+W6_uipwj9WopA1Dk5VA9aY1=7HM=XoixWUMXrYPtHj9id_Q@mail.gmail.com>
 <7cca8298-6e75-429f-ac89-dba8a7a79929@gmail.com>
Message-ID: <CAN+W6_s4ihi_D65Ph=j7-zDSc+DrgR1J-nOECEPmerROZTJ=4A@mail.gmail.com>

The data is mostly CRAN's own files transformed, I don't expect the
download to be problematic on CRAN's checks.
The R core members made the functionality inside tools to use a local
variable to search for the requested file locally.
Only if the file is not found they are downloaded from the internet.

Regarding tests, I could disable saving the content to a file (Thanks
for mentioning, I hadn't thought about it).
But the functionality/utility of the package is to transform CRAN's data.
If it is failing to do so, I would like to know.

Llu?s

On Fri, 3 Jan 2025 at 17:23, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>
> On 2025-01-03 10:04 a.m., Llu?s Revilla wrote:
> > Thanks Henrik for confirming there is nothing similar currently.
> >
> > Duncan: Letting the user choose when to remove the folder/data at will is easy.
> > I was trying to ensure that the system is clean after removing the package.
> > Thanks.
>
> No, I was suggesting that you require the user to explicitly ask for the
> data.  You don't want CRAN to install the data during testing and then
> have it left behind at the end.
>
> Duncan Murdoch
>
> >
> > On Thu, 2 Jan 2025 at 22:42, Henrik Bengtsson
> > <henrik.bengtsson at gmail.com> wrote:
> >>
> >> As a first step, this sounds like something for the 'tools' package,
> >> e.g. tools::cleanup_R_user_dir() that wipes package subfolders of
> >> packages no longer installed, or the specified package, iff given.
> >> With that in place, one could argue for adding a 'cleanup' argument to
> >> remove.packages() that use the former.
> >>
> >> Agree, it would be neat if a package could clean up after itself when
> >> uninstalled.
> >>
> >> /Henrik
> >>
> >> On Thu, Jan 2, 2025 at 1:37?PM Llu?s Revilla <lluis.revilla at gmail.com> wrote:
> >>>
> >>> Dear Duncan,
> >>>
> >>> Thank you for your answer. I checked again and made a mock package
> >>> that removes a file with .onDetach.
> >>> The file was not removed upon uninstalling the package.
> >>>
> >>> Llu?s
> >>>
> >>> On Thu, 2 Jan 2025 at 17:23, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
> >>>>
> >>>> On 2025-01-02 9:55 a.m., Llu?s Revilla wrote:
> >>>>> Hi list,
> >>>>>
> >>>>> I am developing a package that will download some data, and I'd like
> >>>>> to store it locally to not recalculate it often.
> >>>>> The CRAN policy requires tools::R_user_dir to be used and "the
> >>>>> contents are actively managed (including removing outdated material)"
> >>>>> or using TMPDIR but "such usage should be cleaned up".
> >>>>>
> >>>>> When loading a package there is .onLoad or .onAttach to fill or check
> >>>>> those files and other settings required for a package. Is there
> >>>>> something for when a package is removed?
> >>>>>
> >>>>> I found some related functions like .Last or reg.fnalizer and setHook
> >>>>> or packageEvent but they are about closing a session or don't have a
> >>>>> specific event for when uninstalling packages via (remove.packages). I
> >>>>> appreciate any feedback, thanks in advance.
> >>>>>
> >>>>
> >>>> Yes, those are described in section "1.5.3 Load hooks" of writing R
> >>>> extensions:
> >>>>
> >>>> "Packages can use a .onDetach or .Last.lib function (provided the latter
> >>>> is exported from the namespace) when detach is called on the package. It
> >>>> is called with a single argument, the full path to the installed
> >>>> package. There is also a hook .onUnload which is called when the
> >>>> namespace is unloaded (via a call to unloadNamespace, perhaps called by
> >>>> detach(unload = TRUE)) with argument the full path to the installed
> >>>> package?s directory. Functions .onUnload and .onDetach should be defined
> >>>> in the namespace and not exported, but .Last.lib does need to be exported."
> >>>>
> >>>> Duncan Murdoch
> >>>>
> >>>
> >>> ______________________________________________
> >>> R-package-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>


From pep|jn@devr|e@ @end|ng |rom out|ook@com  Wed Jan  8 13:51:32 2025
From: pep|jn@devr|e@ @end|ng |rom out|ook@com (Pepijn de Vries)
Date: Wed, 8 Jan 2025 12:51:32 +0000
Subject: [R-pkg-devel] (no subject)
Message-ID: <AM8PR10MB466065432B7F9DA11EA0D279A7122@AM8PR10MB4660.EURPRD10.PROD.OUTLOOK.COM>

Dear fellow package developers,

A while back I have submitted a package to CRAN and is now listed under waiting <https://cran.r-project.org/incoming/waiting/openmpt_0.1.1.tar.gz>

As I understand it, incoming packages are listed there if CRAN needs more information from the maintainer. However, I have received no requests from CRAN. In the meantime it has been stagnant in the waiting area for about 22 days.

After some more testing I discovered that the submitted package violates CRAN policy (it does not exit gracefully when online resources are not available). Maybe this is why it is on hold. This has been fixed in <https://github.com/pepijn-devries/openmpt>, but has not been submitted yet. How do I proceed? I think I have the following options:

 - wait even longer for feedback from CRAN;
 - contact CRAN about the status of this package;
 - submit the latest version of the package in which policy violations have been addressed.

Any thoughts are welcome.

Pepijn

From ||u|@@rev|||@ @end|ng |rom gm@||@com  Wed Jan  8 22:17:57 2025
From: ||u|@@rev|||@ @end|ng |rom gm@||@com (=?UTF-8?Q?Llu=C3=ADs_Revilla?=)
Date: Wed, 8 Jan 2025 22:17:57 +0100
Subject: [R-pkg-devel] (no subject)
In-Reply-To: <AM8PR10MB466065432B7F9DA11EA0D279A7122@AM8PR10MB4660.EURPRD10.PROD.OUTLOOK.COM>
References: <AM8PR10MB466065432B7F9DA11EA0D279A7122@AM8PR10MB4660.EURPRD10.PROD.OUTLOOK.COM>
Message-ID: <CAN+W6_u9v-XftUpdt0Fu9QZ+2u+Eh7RmxyFOqX+rV0entox0Mg@mail.gmail.com>

Dear Pepijn,

Thank you for the very detailed email.
Part of these 22 days might be explained by CRAN volunteers being on
vacations a couple of weeks, until yesterday.

I would submit the latest version of the package with the improvements you made.
Other options require more manual work from CRAN volunteers and/or more delays.
I'm sure they will appreciate you double checking CRAN policy to make
sure you comply with all the requirements.

To solve some common issues, there is a new resource co-authored by a
CRAN reviewer: the CRAN cookbook:
https://contributor.r-project.org/cran-cookbook/
I hope it helps.

Good luck!
Best,

Llu?s Revilla

PS: There are some issues on AmigaFFH package, you might receive a
message to update it.

On Wed, 8 Jan 2025 at 13:51, Pepijn de Vries <pepijn.devries at outlook.com> wrote:
>
> Dear fellow package developers,
>
> A while back I have submitted a package to CRAN and is now listed under waiting <https://cran.r-project.org/incoming/waiting/openmpt_0.1.1.tar.gz>
>
> As I understand it, incoming packages are listed there if CRAN needs more information from the maintainer. However, I have received no requests from CRAN. In the meantime it has been stagnant in the waiting area for about 22 days.
>
> After some more testing I discovered that the submitted package violates CRAN policy (it does not exit gracefully when online resources are not available). Maybe this is why it is on hold. This has been fixed in <https://github.com/pepijn-devries/openmpt>, but has not been submitted yet. How do I proceed? I think I have the following options:
>
>  - wait even longer for feedback from CRAN;
>  - contact CRAN about the status of this package;
>  - submit the latest version of the package in which policy violations have been addressed.
>
> Any thoughts are welcome.
>
> Pepijn
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From pep|jn@devr|e@ @end|ng |rom out|ook@com  Wed Jan  8 23:00:07 2025
From: pep|jn@devr|e@ @end|ng |rom out|ook@com (Pepijn de Vries)
Date: Wed, 8 Jan 2025 22:00:07 +0000
Subject: [R-pkg-devel] (no subject)
In-Reply-To: <CAN+W6_u9v-XftUpdt0Fu9QZ+2u+Eh7RmxyFOqX+rV0entox0Mg@mail.gmail.com>
References: <AM8PR10MB466065432B7F9DA11EA0D279A7122@AM8PR10MB4660.EURPRD10.PROD.OUTLOOK.COM>
 <CAN+W6_u9v-XftUpdt0Fu9QZ+2u+Eh7RmxyFOqX+rV0entox0Mg@mail.gmail.com>
Message-ID: <AM8PR10MB466003A076F7723BBAAFCC0BA7122@AM8PR10MB4660.EURPRD10.PROD.OUTLOOK.COM>

Hi Llu?s,

Thank you for you thoughts on this matter and recommendations. I will go ahead to submit the revised version as soon as possible.

Cheers,

Pepijn

________________________________________
Van:?Llu?s Revilla <lluis.revilla at gmail.com>
Verzonden:?woensdag 8 januari 2025 22:17
Aan:?Pepijn de Vries <pepijn.devries at outlook.com>
CC:?Ivan Krylov via R-package-devel <r-package-devel at r-project.org>
Onderwerp:?Re: [R-pkg-devel] (no subject)
?
Dear Pepijn,

Thank you for the very detailed email.
Part of these 22 days might be explained by CRAN volunteers being on
vacations a couple of weeks, until yesterday.

I would submit the latest version of the package with the improvements you made.
Other options require more manual work from CRAN volunteers and/or more delays.
I'm sure they will appreciate you double checking CRAN policy to make
sure you comply with all the requirements.

To solve some common issues, there is a new resource co-authored by a
CRAN reviewer: the CRAN cookbook:
https://contributor.r-project.org/cran-cookbook/
I hope it helps.

Good luck!
Best,

Llu?s Revilla

PS: There are some issues on AmigaFFH package, you might receive a
message to update it.

On Wed, 8 Jan 2025 at 13:51, Pepijn de Vries <pepijn.devries at outlook.com> wrote:
>
> Dear fellow package developers,
>
> A while back I have submitted a package to CRAN and is now listed under waiting <https://cran.r-project.org/incoming/waiting/openmpt_0.1.1.tar.gz>
>
> As I understand it, incoming packages are listed there if CRAN needs more information from the maintainer. However, I have received no requests from CRAN. In the meantime it has been stagnant in the waiting area for about 22 days.
>
> After some more testing I discovered that the submitted package violates CRAN policy (it does not exit gracefully when online resources are not available). Maybe this is why it is on hold. This has been fixed in <https://github.com/pepijn-devries/openmpt>, but has not been submitted yet. How do I proceed? I think I have the following options:
>
>? - wait even longer for feedback from CRAN;
>? - contact CRAN about the status of this package;
>? - submit the latest version of the package in which policy violations have been addressed.
>
> Any thoughts are welcome.
>
> Pepijn
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel

From vo|ody@ @end|ng |rom m|nd@pr|ng@com  Thu Jan  9 04:23:15 2025
From: vo|ody@ @end|ng |rom m|nd@pr|ng@com (Vladimir Dergachev)
Date: Wed, 8 Jan 2025 22:23:15 -0500 (EST)
Subject: [R-pkg-devel] Removing packages files
In-Reply-To: <CAN+W6_sjx59W6hGGMyj565smnazws=uasSWbwEHEe7kXT+YLAQ@mail.gmail.com>
References: <CAN+W6_sjx59W6hGGMyj565smnazws=uasSWbwEHEe7kXT+YLAQ@mail.gmail.com>
Message-ID: <alpine.DEB.2.22.394.2501082220520.45848@iridium>


Hi Llu?s,

   Just wanted to add to the discussion that it would be good to consider 
users that are disconnected or behind a firewall and are installing the 
package from file.

   An option to point the package to a separately downloaded file would be
useful.

best

Vladimir Dergachev

On Thu, 2 Jan 2025, Llu?s Revilla wrote:

> Hi list,
>
> I am developing a package that will download some data, and I'd like
> to store it locally to not recalculate it often.
> The CRAN policy requires tools::R_user_dir to be used and "the
> contents are actively managed (including removing outdated material)"
> or using TMPDIR but "such usage should be cleaned up".
>
> When loading a package there is .onLoad or .onAttach to fill or check
> those files and other settings required for a package. Is there
> something for when a package is removed?
>
> I found some related functions like .Last or reg.fnalizer and setHook
> or packageEvent but they are about closing a session or don't have a
> specific event for when uninstalling packages via (remove.packages). I
> appreciate any feedback, thanks in advance.
>
> Best wishes and a happy new year,
>
> Llu?s
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>

From kent@r|emondy @end|ng |rom gm@||@com  Fri Jan 10 15:45:00 2025
From: kent@r|emondy @end|ng |rom gm@||@com (Kent Riemondy)
Date: Fri, 10 Jan 2025 07:45:00 -0700
Subject: [R-pkg-devel] addressing a CRAN submission pre-test clang-san
 warning
Message-ID: <CA+cnB_jbABqxCOsxuCA1-E5sJOf0qZBwrC7t1gNSAH3sHCPKig@mail.gmail.com>

Hi,
  I maintain a package on CRAN (valr) and recently submitted a new version.
The package is failing CRAN pre-test checks due to the warning below from
the clang-san test. The cleancall.c file referenced in the warning isn't in
valr's source code, nor direct dependencies, but eventually I believe
tracks back to the purrr package. Does anyone have any advice for how to
replicate or address this warning?

Flavor: r-devel-linux-x86_64-debian-special-clang-san
Check: Post-processing issues found for clang-san, Result: WARNING
  File: valr-Ex.Rout
  cleancall.c:110:46: runtime error: call to function cb_progress_done
through pointer to incorrect function type 'void (*)(void *)'

  File: tests/testthat.Rout
  cleancall.c:110:46: runtime error: call to function cb_progress_done
through pointer to incorrect function type 'void (*)(void *)'

package source: https://github.com/rnabioco/valr
pre-test artifacts:
https://win-builder.r-project.org/incoming_pretest/valr_0.8.3_20250108_153335/specialChecks/clang-san
/

Thanks in advance,
Kent

	[[alternative HTML version deleted]]


From |kry|ov @end|ng |rom d|@root@org  Fri Jan 10 16:06:52 2025
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Fri, 10 Jan 2025 18:06:52 +0300
Subject: [R-pkg-devel] 
 [SPAM Warning!] addressing a CRAN submission pre-test
 clang-san warning
In-Reply-To: <CA+cnB_jbABqxCOsxuCA1-E5sJOf0qZBwrC7t1gNSAH3sHCPKig@mail.gmail.com>
References: <CA+cnB_jbABqxCOsxuCA1-E5sJOf0qZBwrC7t1gNSAH3sHCPKig@mail.gmail.com>
Message-ID: <20250110180652.2d7bbc89@arachnoid>

? Fri, 10 Jan 2025 07:45:00 -0700
Kent Riemondy <kent.riemondy at gmail.com> ?????:

>   cleancall.c:110:46: runtime error: call to function cb_progress_done
> through pointer to incorrect function type 'void (*)(void *)'

This is a (mostly harmless) error in the purrr package:
https://stat.ethz.ch/pipermail/r-package-devel/2024q4/011230.html

It has recently been reported to the package maintainers:
https://github.com/tidyverse/purrr/issues/1157

Instead of casting the cb_progress_done function pointer to (void
(*)(void*)), the function needs to accept (void*) and cast the argument
to SEXP in the function body.

-- 
Best regards,
Ivan


From kent@r|emondy @end|ng |rom gm@||@com  Fri Jan 10 16:21:27 2025
From: kent@r|emondy @end|ng |rom gm@||@com (Kent Riemondy)
Date: Fri, 10 Jan 2025 08:21:27 -0700
Subject: [R-pkg-devel] 
 [SPAM Warning!] addressing a CRAN submission pre-test
 clang-san warning
In-Reply-To: <20250110180652.2d7bbc89@arachnoid>
References: <CA+cnB_jbABqxCOsxuCA1-E5sJOf0qZBwrC7t1gNSAH3sHCPKig@mail.gmail.com>
 <20250110180652.2d7bbc89@arachnoid>
Message-ID: <CA+cnB_gPGQEDXJHPao2TzQjFzFMg+Akn-Padvn_e1Gd03C=UMg@mail.gmail.com>

Ivan,
  Many thanks for the prompt and helpful response. I hadn't seen the
previous r-package-devel message with the same error. I will explain this
situation to CRAN which hopefully will allow valr to stay on CRAN while I
work to get the suggested fix implemented in purrr.

Thanks,
Kent


On Fri, Jan 10, 2025 at 8:08?AM Ivan Krylov <ikrylov at disroot.org> wrote:

> ? Fri, 10 Jan 2025 07:45:00 -0700
> Kent Riemondy <kent.riemondy at gmail.com> ?????:
>
> >   cleancall.c:110:46: runtime error: call to function cb_progress_done
> > through pointer to incorrect function type 'void (*)(void *)'
>
> This is a (mostly harmless) error in the purrr package:
> https://stat.ethz.ch/pipermail/r-package-devel/2024q4/011230.html
>
> It has recently been reported to the package maintainers:
> https://github.com/tidyverse/purrr/issues/1157
>
> Instead of casting the cb_progress_done function pointer to (void
> (*)(void*)), the function needs to accept (void*) and cast the argument
> to SEXP in the function body.
>
> --
> Best regards,
> Ivan
>

	[[alternative HTML version deleted]]


From pep|jn@devr|e@ @end|ng |rom out|ook@com  Fri Jan 10 18:00:04 2025
From: pep|jn@devr|e@ @end|ng |rom out|ook@com (Pepijn de Vries)
Date: Fri, 10 Jan 2025 17:00:04 +0000
Subject: [R-pkg-devel] gcc-san check warns for non-portable flags
Message-ID: <AM8PR10MB4660B3C058C111F115FC8A9DA71C2@AM8PR10MB4660.EURPRD10.PROD.OUTLOOK.COM>

Dear fellow package developers,

There were multiple issues with a package I maintain: @CRAN: <https://cran.r-project.org/package=adfExplorer> @source: <https://github.com/pepijn-devries/adfExplorer/>. As far as I can tell all issues listed @CRAN were fixed in the latest version (available from GitHub and R-Universe). However, when submitting to CRAN, the special gcc san check complains about non-portable flags (see below).

I cannot reproduce this warning myself. As far as I can tell, I don't set these flags myself (neither in the configure script nor in makevars.in). I suspect that these flags are set by the machine that performs the checks. How do I pass this check? Or should I report it to CRAN as a false negative result?

Many thanks for your help.

Kind regards,

Pepijn

> Flavor: r-devel-windows-x86_64, r-devel-linux-x86_64-debian-special-clang-san
> Check: *, Result: OK
>  ?
> Flavor: r-devel-linux-x86_64-debian-special-gcc-san
> Check: compilation flags used, Result: WARNING
> ?Compilation used the following non-portable flag(s):
>  ? ?'-Wno-deprecated-declarations' '-Wno-ignored-attributes'
>  ? ?'-Wno-stringop-truncation'
>  ?including flag(s) suppressing warnings


From d@v|d@gohe| @end|ng |rom @rd@t@@|r  Fri Jan 10 18:17:39 2025
From: d@v|d@gohe| @end|ng |rom @rd@t@@|r (David Gohel)
Date: Fri, 10 Jan 2025 17:17:39 +0000
Subject: [R-pkg-devel] gcc-san check warns for non-portable flags
In-Reply-To: <AM8PR10MB4660B3C058C111F115FC8A9DA71C2@AM8PR10MB4660.EURPRD10.PROD.OUTLOOK.COM>
References: <AM8PR10MB4660B3C058C111F115FC8A9DA71C2@AM8PR10MB4660.EURPRD10.PROD.OUTLOOK.COM>
Message-ID: <MRXP264MB0328A82A5EB35DFAAB4BAAA0FA1C2@MRXP264MB0328.FRAP264.PROD.OUTLOOK.COM>

I had the same this week.

Yes, you should answer these are false negative results.

KR,
David

De : R-package-devel <r-package-devel-bounces at r-project.org> de la part de Pepijn de Vries <pepijn.devries at outlook.com>
Date : vendredi, 10 janvier 2025 ? 18:00
? : Ivan Krylov via R-package-devel <r-package-devel at r-project.org>
Objet : [R-pkg-devel] gcc-san check warns for non-portable flags
Dear fellow package developers,

There were multiple issues with a package I maintain: @CRAN: <https://cran.r-project.org/package=adfExplorer> @source: <https://github.com/pepijn-devries/adfExplorer/>. As far as I can tell all issues listed @CRAN were fixed in the latest version (available from GitHub and R-Universe). However, when submitting to CRAN, the special gcc san check complains about non-portable flags (see below).

I cannot reproduce this warning myself. As far as I can tell, I don't set these flags myself (neither in the configure script nor in makevars.in). I suspect that these flags are set by the machine that performs the checks. How do I pass this check? Or should I report it to CRAN as a false negative result?

Many thanks for your help.

Kind regards,

Pepijn

> Flavor: r-devel-windows-x86_64, r-devel-linux-x86_64-debian-special-clang-san
> Check: *, Result: OK
>
> Flavor: r-devel-linux-x86_64-debian-special-gcc-san
> Check: compilation flags used, Result: WARNING
>  Compilation used the following non-portable flag(s):
>     '-Wno-deprecated-declarations' '-Wno-ignored-attributes'
>     '-Wno-stringop-truncation'
>   including flag(s) suppressing warnings

______________________________________________
R-package-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-package-devel

	[[alternative HTML version deleted]]


From pep|jn@devr|e@ @end|ng |rom out|ook@com  Fri Jan 10 21:19:27 2025
From: pep|jn@devr|e@ @end|ng |rom out|ook@com (Pepijn de Vries)
Date: Fri, 10 Jan 2025 20:19:27 +0000
Subject: [R-pkg-devel] gcc-san check warns for non-portable flags
In-Reply-To: <MRXP264MB0328A82A5EB35DFAAB4BAAA0FA1C2@MRXP264MB0328.FRAP264.PROD.OUTLOOK.COM>
References: <AM8PR10MB4660B3C058C111F115FC8A9DA71C2@AM8PR10MB4660.EURPRD10.PROD.OUTLOOK.COM>
 <MRXP264MB0328A82A5EB35DFAAB4BAAA0FA1C2@MRXP264MB0328.FRAP264.PROD.OUTLOOK.COM>
Message-ID: <AM8PR10MB4660414895B1D16891E4AEB9A71C2@AM8PR10MB4660.EURPRD10.PROD.OUTLOOK.COM>

Hi David,

Thanks for the quick response. I will report it.

Pepijn

________________________________________
Van:?R-package-devel <r-package-devel-bounces at r-project.org> namens David Gohel <david.gohel at ardata.fr>
Verzonden:?vrijdag 10 januari 2025 18:17
Aan:?r-package-devel at r-project.org <r-package-devel at r-project.org>
Onderwerp:?Re: [R-pkg-devel] gcc-san check warns for non-portable flags
?
I had the same this week.

Yes, you should answer these are false negative results.

KR,
David

De : R-package-devel <r-package-devel-bounces at r-project.org> de la part de Pepijn de Vries <pepijn.devries at outlook.com>
Date : vendredi, 10 janvier 2025 ? 18:00
? : Ivan Krylov via R-package-devel <r-package-devel at r-project.org>
Objet : [R-pkg-devel] gcc-san check warns for non-portable flags
Dear fellow package developers,

There were multiple issues with a package I maintain: @CRAN: <https://cran.r-project.org/package=adfExplorer> @source: <https://github.com/pepijn-devries/adfExplorer/>. As far as I can tell all issues listed @CRAN were fixed in the latest version (available from GitHub and R-Universe). However, when submitting to CRAN, the special gcc san check complains about non-portable flags (see below).

I cannot reproduce this warning myself. As far as I can tell, I don't set these flags myself (neither in the configure script nor in makevars.in). I suspect that these flags are set by the machine that performs the checks. How do I pass this check? Or should I report it to CRAN as a false negative result?

Many thanks for your help.

Kind regards,

Pepijn

> Flavor: r-devel-windows-x86_64, r-devel-linux-x86_64-debian-special-clang-san
> Check: *, Result: OK
>
> Flavor: r-devel-linux-x86_64-debian-special-gcc-san
> Check: compilation flags used, Result: WARNING
>? Compilation used the following non-portable flag(s):
>???? '-Wno-deprecated-declarations' '-Wno-ignored-attributes'
>???? '-Wno-stringop-truncation'
>?? including flag(s) suppressing warnings

______________________________________________
R-package-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-package-devel

??????? [[alternative HTML version deleted]]

From |uk@@@@chne|derb@uer @end|ng |rom gm@||@com  Sat Jan 11 10:37:20 2025
From: |uk@@@@chne|derb@uer @end|ng |rom gm@||@com (Lukas Schneiderbauer)
Date: Sat, 11 Jan 2025 10:37:20 +0100
Subject: [R-pkg-devel] SystemRequirements & configure check for FFTW with
 single precision support
Message-ID: <CAHETjtZcmar26ud0s0yn9RGQXwjKtVpkT3gt+o2DGfAyR-T=qg@mail.gmail.com>

Hi list,

I am working on getting a package <https://github.com/lschneiderbauer/fCWTr> to
CRAN. It depends on the FFTW library <https://www.fftw.org/> that is built
with single precision support. I am stuck in the submission process and I
require your help.

Before I come to my questions, some key facts about the package:

The package has an autoconf configure script that uses (among other things,
like OpenMP checks, etc..) AC_SEARCH_LIBS to check whether required
functions of the library 'fftwf' exist, if yes, it adds the corresponding
compiler/linker flags; if no, it errs with a descriptive error message.

The CRAN Windows as well as Linux build service included fftwf in their
fftw build out of the box, and so building there was no problem, R CMD
Check passes there. In the past, building for MacOS was more trouble, since
its fftw package does not include a single-precision build. I reached out
to Simon Urbanek, and he was so kind as to add an appropriate new recipe
"fftw-s" that provided an fftw version with single precision support. As of
now, R CMD check also passes cleanly on the MacOS build service, thanks to
Simon Urbanek's efforts.

Now, I am stuck at submission for two reasons:
1. The SystemRequirements specification in the DESCRIPTION file is
incorrect.
2. It is said that "the package needs a configure check for fftwf".

Add 1.
Initially, I had no mention of the "single precision" version of fftw,
because I thought it is included everywhere by default. It was stated that
I need to add that information. I naturally complied.
This is my current version:
"SystemRequirements: fftw3 (including single precision support fftw3f),
fftw3f_omp (optional), OpenMP (optional)"
In the second subscription run, I was told to add "fftw-s" since I require
the fftw-s package on MacOS. This does not make much sense to me since
"fftw-s" is only the name of this package on Simon Urbanek's MacOS build
service. The library file itself is still called fftwf, like it is on any
other platform. If I added "fftw-s", I would also need to explain that this
is only valid for MacOS which seems to make the SystemRequirements
unnecessary verbose.
* Can someone explain the reason behind this request to me?
* How exactly should I add "fftw-s" to pass the submission process?

Add 2.
I tried to explain now for the second time in the submission notes, that a
check is already in place (see the AC_SEARCH_LIBS paragraph above). But my
explanation gets ignored.
* What am I doing wrong?
* What additional configure checks do I need to add to the package?

Thanks a lot for your help!
Sincerely, Lukas Schneiderbauer

	[[alternative HTML version deleted]]


From edd @end|ng |rom deb|@n@org  Sat Jan 11 19:52:59 2025
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Sat, 11 Jan 2025 12:52:59 -0600
Subject: [R-pkg-devel] 
 SystemRequirements & configure check for FFTW with
 single precision support
In-Reply-To: <CAHETjtZcmar26ud0s0yn9RGQXwjKtVpkT3gt+o2DGfAyR-T=qg@mail.gmail.com>
References: <CAHETjtZcmar26ud0s0yn9RGQXwjKtVpkT3gt+o2DGfAyR-T=qg@mail.gmail.com>
Message-ID: <26498.48651.572674.777799@rob.eddelbuettel.com>


Lukas,

It is, as you noticed, complicated.

One way forward might be to rely on what you can rely on (i.e. a suitable
system fftw on two of the three platforms) and to embed and locally build
where not. Nowadays a number of packages embedding external libraries and
resorting to eg cmake to build locally to provide what their R package needs
(pak now rebuilds curl, igraph 'vendors' a number of external libraries, as
does duckdb and so on), and so on. It is one approach. Others download if
they must (i.e. what I once added to nloptr) but CRAN now leans more against
downloads at build time. [1]

The problem is that SystemRequirements: is all we have to solve a cross-OS,
cross-platform, cross-distro (for Linux), cross-release, ... dependency
issue.  Something for which a (commonly) single-line of free form text is not
all that well suited. But anything more formal would be need to reliably
address the cross-product of cpu architecture, operating system,
flavour/distro, release, ... Not easy for (less than) a handful of already
stretched volunteers.

So this is a hard problem; if it could be fixed easily it would have been
addressed in the 25+ plus years of CRAN.

Cheers, Dirk

PS For the smaller subset of three releases for (currently) one architecture,
one platform, and one distribution flavor this has been address using the
existence of system package manager: r2u covers this reliably and gets you
(CRAN) package binaries for Ubuntu with full and complete system dependency
integration, see https://eddelbuettel.github.io/r2u -- but it is hard /
impossible to generalise to other OSs without a similar package manager.

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From |kry|ov @end|ng |rom d|@root@org  Sat Jan 11 20:09:57 2025
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Sat, 11 Jan 2025 22:09:57 +0300
Subject: [R-pkg-devel] 
 SystemRequirements & configure check for FFTW with
 single precision support
In-Reply-To: <CAHETjtZcmar26ud0s0yn9RGQXwjKtVpkT3gt+o2DGfAyR-T=qg@mail.gmail.com>
References: <CAHETjtZcmar26ud0s0yn9RGQXwjKtVpkT3gt+o2DGfAyR-T=qg@mail.gmail.com>
Message-ID: <20250111220957.6f839b0d@Tarkus>

? Sat, 11 Jan 2025 10:37:20 +0100
Lukas Schneiderbauer <lukas.schneiderbauer at gmail.com> ?????:

> I was told to add "fftw-s" since I require the fftw-s package on
> MacOS.

> * Can someone explain the reason behind this request to me?

While the SystemRequirements: field currently contains free-form text,
eventually we might be able to evolve it into something
machine-readable to install the system-level dependencies
automatically. Since the macOS packages are built using the recipes
system to provide the dependencies, it makes certain sense to list the
name of the recipe for their sake, in addition to the name of the
shared library.

> * How exactly should I add "fftw-s" to pass the submission process?

I've tried looking for examples using

db <- tools::CRAN_package_db()
subset(db, grepl('recipe|mac', SystemRequirements, ignore.case=TRUE))

...but found nothing relevant. How about something like the following?

SystemRequirements:
 fftw3 (including single precision support fftw3f; 'fftw-s' macOS
 recipe), fftw3f_omp (optional), OpenMP (optional)

> I tried to explain now for the second time in the submission notes,
> that a check is already in place (see the AC_SEARCH_LIBS paragraph
> above). But my explanation gets ignored.

I'm sorry for asking this admittedly thick question, but are you sure
it's not just R CMD check --as-cran repeating the X-CRAN-Comment: field
(which includes the phrase about not testing for single-precision
FFTW)? Does the rejection e-mail say "please fix and resubmit", list
specific problems, or ask for specific actions?

> * What additional configure checks do I need to add to the package?

The configure test for -lfftwf seems fine to me.

I wouldn't test for OpenMP's omp.h because testing for a working OpenMP
installation is fraught with peril and corner cases [*], but you pick
up R's OpenMP flags correctly and have appropriate #ifdef _OPENMP
sections in the source code, so that shouldn't cause you any real
problems.

-- 
Best regards,
Ivan

[*] https://github.com/Rdatatable/data.table/pull/6642


From gr@eme|eeh|ckey @end|ng |rom gm@||@com  Tue Jan 14 08:08:20 2025
From: gr@eme|eeh|ckey @end|ng |rom gm@||@com (Graeme Hickey)
Date: Mon, 13 Jan 2025 23:08:20 -0800
Subject: [R-pkg-devel] Vignette build issue on Debian platform
Message-ID: <CALvcmje4JO8cfV05o+8dDWTWtCfx4GPGU0zYcxMgw+gTEghqug@mail.gmail.com>

Dear all,


I recently made some minor updates to the joineRML R package to squash some
CRAN CMD check NOTEs that have emerged over the past couple of years.  After
resubmitting to CRAN, a new NOTE appeared on the Debian platform only:


> package joineRML_0.4.7.tar.gz does not pass the incoming checks
automatically, please see the following pre-tests (additional issue checks):

> Windows: <
https://win-builder.r-project.org/incoming_pretest/joineRML_0.4.7_20250114_073418/Windows/00check.log
>

> Status: OK

> Debian: <
https://win-builder.r-project.org/incoming_pretest/joineRML_0.4.7_20250114_073418/Debian/00check.log
>

> Status: 1 NOTE


The NOTE in particular is:


> * checking re-building of vignette outputs ... [116s/30s] NOTE

> Re-building vignettes had CPU time 3.9 times elapsed time


I emailed Uwe Ligges and got a reply:


> We see

> Flavor: r-devel-linux-x86_64-debian-gcc

> Check: re-building of vignette outputs, Result: NOTE

>    Re-building vignettes had CPU time 3.9 times elapsed time


> which suggests you are using more than 2 cores which is not permitted by
default.


There is only one function in my package that uses multiple cores:
bootSE(). However, this function is not called in any of my vignettes
because it is computationally expensive. The Rmd code has `eval = FALSE`
options for all of these cases. Therefore, I am at a loss as to why these
vignettes would be using more than 2 cores or what is causing this, or why
it only impacts the CRAN CMD check Debian system.


I noticed this has been a common reported issue (e.g.,
https://github.com/Rdatatable/data.table/issues/5658), but mainly for those
using data.table or openMP; I use neither. The same issue was showing for
some examples also, which I dealt with by wrapping in \dontrun{} ? not
ideal, but seemed quickest way to avoid.


I have tried many things to fix this:

   1. Modifying the vignettes to make faster
   2. Adding various combinations of Sys.setenv("OMP_THREAD_LIMIT" = 1),
   Sys.setenv("OMP_NUM_THREADS" = 1), options(Ncpus = 1), options(cores = 2)
   to the Rmd vignettes
   3. Checked the package builds using r-lib/actions (GitHub actions) and
   r-hub Debian platform ? I cannot reproduce this CRAN error


CRAN will not accept the update to my package until this NOTE is squashed.
If anyone is able to provide a recommendation on what I might do, I would
appreciate it.


Kind regards,


Graeme Hickey

	[[alternative HTML version deleted]]


From j|@c@@hu|@m@n @end|ng |rom gm@||@com  Tue Jan 14 17:25:23 2025
From: j|@c@@hu|@m@n @end|ng |rom gm@||@com (Jisca Huisman)
Date: Tue, 14 Jan 2025 17:25:23 +0100
Subject: [R-pkg-devel] Vignette build issue on Debian platform
In-Reply-To: <CALvcmje4JO8cfV05o+8dDWTWtCfx4GPGU0zYcxMgw+gTEghqug@mail.gmail.com>
References: <CALvcmje4JO8cfV05o+8dDWTWtCfx4GPGU0zYcxMgw+gTEghqug@mail.gmail.com>
Message-ID: <852a85b8-0966-43fb-9d0b-b10188eb85fd@gmail.com>

Hi Graeme,

> There is only one function in my package that uses multiple cores:
> bootSE(). However, this function is not called in any of my vignettes
> because it is computationally expensive. The Rmd code has `eval = FALSE`
> options for all of these cases. Therefore, I am at a loss as to why these
> vignettes would be using more than 2 cores or what is causing this, or why
> it only impacts the CRAN CMD check Debian system.

CRAN has changed its settings when compiling the vignette, and now 
*does* run everything in chunks with `eval = FALSE`.? The solution is to 
also add `purl=FALSE` to each chunk that should not be run.

If you dig through the mailing list archive you should be able to find 
further details on the why and how of this, or someone else might remember.

Best,

Jisca



On Tue, 14/01/2025 08:08, Graeme Hickey wrote:
> Dear all,
>
>
> I recently made some minor updates to the joineRML R package to squash some
> CRAN CMD check NOTEs that have emerged over the past couple of years.  After
> resubmitting to CRAN, a new NOTE appeared on the Debian platform only:
>
>
>> package joineRML_0.4.7.tar.gz does not pass the incoming checks
> automatically, please see the following pre-tests (additional issue checks):
>
>> Windows: <
> https://win-builder.r-project.org/incoming_pretest/joineRML_0.4.7_20250114_073418/Windows/00check.log
>> Status: OK
>> Debian: <
> https://win-builder.r-project.org/incoming_pretest/joineRML_0.4.7_20250114_073418/Debian/00check.log
>> Status: 1 NOTE
>
> The NOTE in particular is:
>
>
>> * checking re-building of vignette outputs ... [116s/30s] NOTE
>> Re-building vignettes had CPU time 3.9 times elapsed time
>
> I emailed Uwe Ligges and got a reply:
>
>
>> We see
>> Flavor: r-devel-linux-x86_64-debian-gcc
>> Check: re-building of vignette outputs, Result: NOTE
>>     Re-building vignettes had CPU time 3.9 times elapsed time
>
>> which suggests you are using more than 2 cores which is not permitted by
> default.
>
>
> There is only one function in my package that uses multiple cores:
> bootSE(). However, this function is not called in any of my vignettes
> because it is computationally expensive. The Rmd code has `eval = FALSE`
> options for all of these cases. Therefore, I am at a loss as to why these
> vignettes would be using more than 2 cores or what is causing this, or why
> it only impacts the CRAN CMD check Debian system.
>
>
> I noticed this has been a common reported issue (e.g.,
> https://github.com/Rdatatable/data.table/issues/5658), but mainly for those
> using data.table or openMP; I use neither. The same issue was showing for
> some examples also, which I dealt with by wrapping in \dontrun{} ? not
> ideal, but seemed quickest way to avoid.
>
>
> I have tried many things to fix this:
>
>     1. Modifying the vignettes to make faster
>     2. Adding various combinations of Sys.setenv("OMP_THREAD_LIMIT" = 1),
>     Sys.setenv("OMP_NUM_THREADS" = 1), options(Ncpus = 1), options(cores = 2)
>     to the Rmd vignettes
>     3. Checked the package builds using r-lib/actions (GitHub actions) and
>     r-hub Debian platform ? I cannot reproduce this CRAN error
>
>
> CRAN will not accept the update to my package until this NOTE is squashed.
> If anyone is able to provide a recommendation on what I might do, I would
> appreciate it.
>
>
> Kind regards,
>
>
> Graeme Hickey
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From @|mon@urb@nek @end|ng |rom R-project@org  Wed Jan 15 03:59:17 2025
From: @|mon@urb@nek @end|ng |rom R-project@org (Simon Urbanek)
Date: Wed, 15 Jan 2025 15:59:17 +1300
Subject: [R-pkg-devel] 
 SystemRequirements & configure check for FFTW with
 single precision support
In-Reply-To: <CAHETjtZcmar26ud0s0yn9RGQXwjKtVpkT3gt+o2DGfAyR-T=qg@mail.gmail.com>
References: <CAHETjtZcmar26ud0s0yn9RGQXwjKtVpkT3gt+o2DGfAyR-T=qg@mail.gmail.com>
Message-ID: <4D3E0C0F-263C-4B48-91A6-0E9C56D70B27@R-project.org>

Lukas,

I have not seen the communication so I'm not commenting on that specifically, I only looked at the GitHub link.

Although your configure could be improved (more below), it works well enough to detect fftw3f.

Unfortunately, SystemRequirements don't have a well-defined structure, but there are two commonly used notations:

a) library name and version so in your case that would be something like
libfftw3f (>=3.3.0)

b) deb/rpm package names
libfftw3-dev (deb), fftw3-devel (rpm)

fftw is a bit of a mess, because Debian ships the single-precision static library in libfftw3-dev, but also has libfftw3-single3 which is the dynamic version of the same, while RH does not distinguish. macOS recipe names are usually included only if they are non-obvious, but that would be the case here since installing fftw recipe does not work for you, so mentioning fftw-s is probably a good idea (there are community scripts that try to extract that information from the packages so that the dependencies can be installed).

As for your configure, my main objection would be that it ignores CPPFLAGS (they are not substituted at all even though they *are* used in the tests) and doesn't use pkg-config to get the correct flags. (Also the brew part should go - it's makes unwarranted assumptions [see below] and is entirely superfluous if you use pkg-config instead.) To illustrate what I mean, you get

$ pkg-config --cflags fftw3f
-I/opt/R/x86_64/include
$ pkg-config --libs fftw3f
-L/opt/R/x86_64/lib -lfftw3f -lm

while fCWTr on GitHub only uses

  Configuration for fCWTr 0.2.9000

    cppflags:    
    cxxflags:    
    ldflags:   
    libs:     -lfftw3f    

It actually works despite that, because R will inject the other flags for you, but that will only work is fftw is installed in the same location as the other libraries used by R (which is common, but not guaranteed). I wouldn't say it is dealbreaker, but it would recommend it for robustness.

FWIW with homebrew the correct flags are obtainable from pkg-config:

$ pkg-config --libs fftw3f
-L/opt/brew/Cellar/fftw/3.3.8_1/lib -lfftw3f
$ pkg-config --cflags fftw3f
-I/opt/brew/Cellar/fftw/3.3.8_1/include

Cheers,
Simon



> On Jan 11, 2025, at 10:37 PM, Lukas Schneiderbauer <lukas.schneiderbauer at gmail.com> wrote:
> 
> Hi list,
> 
> I am working on getting a package <https://github.com/lschneiderbauer/fCWTr> to
> CRAN. It depends on the FFTW library <https://www.fftw.org/> that is built
> with single precision support. I am stuck in the submission process and I
> require your help.
> 
> Before I come to my questions, some key facts about the package:
> 
> The package has an autoconf configure script that uses (among other things,
> like OpenMP checks, etc..) AC_SEARCH_LIBS to check whether required
> functions of the library 'fftwf' exist, if yes, it adds the corresponding
> compiler/linker flags; if no, it errs with a descriptive error message.
> 
> The CRAN Windows as well as Linux build service included fftwf in their
> fftw build out of the box, and so building there was no problem, R CMD
> Check passes there. In the past, building for MacOS was more trouble, since
> its fftw package does not include a single-precision build. I reached out
> to Simon Urbanek, and he was so kind as to add an appropriate new recipe
> "fftw-s" that provided an fftw version with single precision support. As of
> now, R CMD check also passes cleanly on the MacOS build service, thanks to
> Simon Urbanek's efforts.
> 
> Now, I am stuck at submission for two reasons:
> 1. The SystemRequirements specification in the DESCRIPTION file is
> incorrect.
> 2. It is said that "the package needs a configure check for fftwf".
> 
> Add 1.
> Initially, I had no mention of the "single precision" version of fftw,
> because I thought it is included everywhere by default. It was stated that
> I need to add that information. I naturally complied.
> This is my current version:
> "SystemRequirements: fftw3 (including single precision support fftw3f),
> fftw3f_omp (optional), OpenMP (optional)"
> In the second subscription run, I was told to add "fftw-s" since I require
> the fftw-s package on MacOS. This does not make much sense to me since
> "fftw-s" is only the name of this package on Simon Urbanek's MacOS build
> service. The library file itself is still called fftwf, like it is on any
> other platform. If I added "fftw-s", I would also need to explain that this
> is only valid for MacOS which seems to make the SystemRequirements
> unnecessary verbose.
> * Can someone explain the reason behind this request to me?
> * How exactly should I add "fftw-s" to pass the submission process?
> 
> Add 2.
> I tried to explain now for the second time in the submission notes, that a
> check is already in place (see the AC_SEARCH_LIBS paragraph above). But my
> explanation gets ignored.
> * What am I doing wrong?
> * What additional configure checks do I need to add to the package?
> 
> Thanks a lot for your help!
> Sincerely, Lukas Schneiderbauer
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
> 


From c|yde @end|ng |rom duke@edu  Wed Jan 15 05:26:32 2025
From: c|yde @end|ng |rom duke@edu (Merlise Clyde, Ph.D.)
Date: Wed, 15 Jan 2025 04:26:32 +0000
Subject: [R-pkg-devel] Replacement for SETLENGTH
Message-ID: <CY8PR05MB100342EF92E6E169CA1067103C8182@CY8PR05MB10034.namprd05.prod.outlook.com>

I am trying to determine the best way to eliminate the use of SETLENGTH to truncate over allocated vectors in my package BAS to eliminate the NOTES about non-API calls in anticipation of R 4.5.0.

>From WRE:  "At times it can be useful to allocate a larger initial result vector and resize it to a shorter length if that is sufficient. The functions Rf_lengthgets and Rf_xlengthgets accomplish this; they are analogous to using length(x) <- n in R. Typically these functions return a freshly allocated object, but in some cases they may re-use the supplied object." 

it looks like using 

    x = Rf_lengthgets(x, newsize);  
    SET_VECTOR_ELT(result, 0, x); 
    
before returning works to resize without a performance hit that incurs with a copy.  (will this always re-use the supplied object if newsize < old size?)

There is no mention in section 5.9.2 about the need for re-protection of the object,  but it seems to be mentioned in some packages as well as a really old thread about SET_LENGTH that looks like a  non-API MACRO to lengthgets, 

indeed if I call gc() and then rerun my test I have had some non-reproducible aborts in R Studio on my M3 Mac (caught once in R -d lldb)  

Do I need to do something more like 

PROTECT_INDEX ipx0;.
PROTECT_WITH_INDEX(x0 = allocVector(REALSXP, old_size), &ipx0);

PROTECT_INDEX ipx1;.
PROTECT_WITH_INDEX(x1 = allocVector(REALSXP, old_size), &ipx1);

# fill in values in x0 and  x1up to new_size (random) < old_size
...
REPROTECT(x0 = Rf_lengthgets(x0, new_size), ipx0);
REPROTECT(x1 = Rf_lengthgets(x1, new_size), ipx1);

SET_VECTOR_ELT(result, 0, x0);
SET_VECTOR_ELT(result, 1, x1);
...
UNPROTECT(2);   # or is this 4? 
return(result);


There is also a mention in WRE of R_PreserveObject and R_ReleaseObject -  

looking for advice if this is needed, or which approach is better/more stable to replace SETLENGTH?   (I have many many instances that need to be updated, so trying to get some clarity here before updating and running code through valgrind or other sanitizers to catch any memory issues before submitting an update to CRAN.

best,
Merlise








From |kw@|mmo @end|ng |rom gm@||@com  Wed Jan 15 07:00:02 2025
From: |kw@|mmo @end|ng |rom gm@||@com (Iris Simmons)
Date: Wed, 15 Jan 2025 01:00:02 -0500
Subject: [R-pkg-devel] Replacement for SETLENGTH
In-Reply-To: <CY8PR05MB100342EF92E6E169CA1067103C8182@CY8PR05MB10034.namprd05.prod.outlook.com>
References: <CY8PR05MB100342EF92E6E169CA1067103C8182@CY8PR05MB10034.namprd05.prod.outlook.com>
Message-ID: <CADNULg9fKRf3K6Q062D7X4rUJysO=9cWA1kFEjpSv3J-Oy0bYg@mail.gmail.com>

Hi Merlise!


Referring to here:

https://github.com/wch/r-source/blob/8ca367db0c94194f07ee7bcf4b883e9c5dc11e02/src/main/builtin.c#L832

It seems as though the object is only re-used if the new length is
equal to the old length.

If you use Rf_lengthgets, you will need to protect the return value.
The code you wrote that uses protect indexes looks correct, and the
reprotect is good because you no longer need the old object.

2 is the correct amount to unprotect. PROTECT and PROTECT_WITH_INDEX
(as far as I know) are the only functions that increase the size of
the protect stack, and so the only calls that need to be unprotected.
Typically, people define `int nprotect = 0;` at the start of their
functions, add `nprotect++;` after each PROTECT and PROTECT_WITH_INDEX
call, and add `UNPROTECT(nprotect);` immediately before each return or
function end. That makes it easier to keep track.

I typically use R_PreserveObject and R_ReleaseObject to protect
objects without a need to bind them somewhere in my package's
namespace. This would be that .onLoad() uses R_PreserveObject to
protect some objects, and .onUnload uses R_ReleaseObject to release
the protected objects. I probably would not use that for what you're
describing.


Regards,
    Iris

On Tue, Jan 14, 2025 at 11:26?PM Merlise Clyde, Ph.D. <clyde at duke.edu> wrote:
>
> I am trying to determine the best way to eliminate the use of SETLENGTH to truncate over allocated vectors in my package BAS to eliminate the NOTES about non-API calls in anticipation of R 4.5.0.
>
> From WRE:  "At times it can be useful to allocate a larger initial result vector and resize it to a shorter length if that is sufficient. The functions Rf_lengthgets and Rf_xlengthgets accomplish this; they are analogous to using length(x) <- n in R. Typically these functions return a freshly allocated object, but in some cases they may re-use the supplied object."
>
> it looks like using
>
>     x = Rf_lengthgets(x, newsize);
>     SET_VECTOR_ELT(result, 0, x);
>
> before returning works to resize without a performance hit that incurs with a copy.  (will this always re-use the supplied object if newsize < old size?)
>
> There is no mention in section 5.9.2 about the need for re-protection of the object,  but it seems to be mentioned in some packages as well as a really old thread about SET_LENGTH that looks like a  non-API MACRO to lengthgets,
>
> indeed if I call gc() and then rerun my test I have had some non-reproducible aborts in R Studio on my M3 Mac (caught once in R -d lldb)
>
> Do I need to do something more like
>
> PROTECT_INDEX ipx0;.
> PROTECT_WITH_INDEX(x0 = allocVector(REALSXP, old_size), &ipx0);
>
> PROTECT_INDEX ipx1;.
> PROTECT_WITH_INDEX(x1 = allocVector(REALSXP, old_size), &ipx1);
>
> # fill in values in x0 and  x1up to new_size (random) < old_size
> ...
> REPROTECT(x0 = Rf_lengthgets(x0, new_size), ipx0);
> REPROTECT(x1 = Rf_lengthgets(x1, new_size), ipx1);
>
> SET_VECTOR_ELT(result, 0, x0);
> SET_VECTOR_ELT(result, 1, x1);
> ...
> UNPROTECT(2);   # or is this 4?
> return(result);
>
>
> There is also a mention in WRE of R_PreserveObject and R_ReleaseObject -
>
> looking for advice if this is needed, or which approach is better/more stable to replace SETLENGTH?   (I have many many instances that need to be updated, so trying to get some clarity here before updating and running code through valgrind or other sanitizers to catch any memory issues before submitting an update to CRAN.
>
> best,
> Merlise
>
>
>
>
>
>
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From tom@@@k@||ber@ @end|ng |rom gm@||@com  Wed Jan 15 09:58:11 2025
From: tom@@@k@||ber@ @end|ng |rom gm@||@com (Tomas Kalibera)
Date: Wed, 15 Jan 2025 09:58:11 +0100
Subject: [R-pkg-devel] Replacement for SETLENGTH
In-Reply-To: <CY8PR05MB100342EF92E6E169CA1067103C8182@CY8PR05MB10034.namprd05.prod.outlook.com>
References: <CY8PR05MB100342EF92E6E169CA1067103C8182@CY8PR05MB10034.namprd05.prod.outlook.com>
Message-ID: <0be66c5f-1fc1-448e-82b7-90ac17321af9@gmail.com>


On 1/15/25 05:26, Merlise Clyde, Ph.D. wrote:
> I am trying to determine the best way to eliminate the use of SETLENGTH to truncate over allocated vectors in my package BAS to eliminate the NOTES about non-API calls in anticipation of R 4.5.0.
>
>  From WRE:  "At times it can be useful to allocate a larger initial result vector and resize it to a shorter length if that is sufficient. The functions Rf_lengthgets and Rf_xlengthgets accomplish this; they are analogous to using length(x) <- n in R. Typically these functions return a freshly allocated object, but in some cases they may re-use the supplied object."
>
> it looks like using
>
>      x = Rf_lengthgets(x, newsize);
>      SET_VECTOR_ELT(result, 0, x);
>      
> before returning works to resize without a performance hit that incurs with a copy.  (will this always re-use the supplied object if newsize < old size?)
>
> There is no mention in section 5.9.2 about the need for re-protection of the object,  but it seems to be mentioned in some packages as well as a really old thread about SET_LENGTH that looks like a  non-API MACRO to lengthgets,
>
> indeed if I call gc() and then rerun my test I have had some non-reproducible aborts in R Studio on my M3 Mac (caught once in R -d lldb)

The important part for protection is that Rf_lengthgets _may_ return a 
freshly allocated object. This means that the object needs protection 
from garbage collection, implicit or explicit - and that is covered in 
section "Handling the effects of garbage collection".? There are? many 
functions in the? R API that return freshly allocated objects, so don't 
expect that documentation of every such function would give advice on 
how to protect, that is covered in that special section.

So, you are right, some protection is needed _if_ the return value of 
Rf_lengthgets may be exposed to gc().

>
> Do I need to do something more like
>
> PROTECT_INDEX ipx0;.
> PROTECT_WITH_INDEX(x0 = allocVector(REALSXP, old_size), &ipx0);
>
> PROTECT_INDEX ipx1;.
> PROTECT_WITH_INDEX(x1 = allocVector(REALSXP, old_size), &ipx1);
>
> # fill in values in x0 and  x1up to new_size (random) < old_size
> ...
> REPROTECT(x0 = Rf_lengthgets(x0, new_size), ipx0);
> REPROTECT(x1 = Rf_lengthgets(x1, new_size), ipx1);
>
> SET_VECTOR_ELT(result, 0, x0);
> SET_VECTOR_ELT(result, 1, x1);
> ...
> UNPROTECT(2);   # or is this 4?

You have protected two objects here, one was in x0 and one in x1 
(REPROTECT doesn't change the depth of the protection stack). Some 
people put that into a comment:

UNPROTECT(2); /* x1, x0 */

The code above is ok. In some cases, you can shuffle it around a bit or 
rely on implicit protection if you want to reduce the need for explicit 
protection. But perfomance-wise it doesn't matter given code that is 
allocating, etc, that takes much more time - it is more about readability.

For instance,

result = PROTECT(allocVector(...))
x0 = allocVector()
SET_VECTOR_ELT(result, 0, x0);
// now x0 is implicitly protected via result
...

x0 = Rf_lengthgets(..)
SET_VECTOR_ELT(result, 0, x0);
/// now the new value of x0 is implicitly protected via result (the old 
value may not be)

UNPROTECT(1)? // result
return result

> return(result);
>
>
> There is also a mention in WRE of R_PreserveObject and R_ReleaseObject -
>
> looking for advice if this is needed, or which approach is better/more stable to replace SETLENGTH?   (I have many many instances that need to be updated, so trying to get some clarity here before updating and running code through valgrind or other sanitizers to catch any memory issues before submitting an update to CRAN.

PreserveObject/ReleaseObject is good e.g. for global structures, 
probably not in this case. The difficulty there is making sure 
ReleaseObject() does execute in case of error, a non-local return. On 
the other hand, protection via PROTECT/UNPROTECT is automatically robust 
to non-local returns (automatic unprotection).

There is nothing specific about Rf_lengthgets wrt to protection here - 
the same rules apply to any other R API function that returns an SEXP.

For finding protection bugs in code, one can use an R build with barrier 
checking enabled and gctorture or rchk tool. Some bugs may lead to 
crashes or incorrect outputs even in normaln builds. Some bugs may be 
found by UBSAN. But none of this is a verification tool, one can only 
find some bugs in some cases, correctness remains the responsibility of 
the programmer.

Best
Tomas

>
> best,
> Merlise
>
>
>
>
>
>
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From c|yde @end|ng |rom duke@edu  Wed Jan 15 16:30:36 2025
From: c|yde @end|ng |rom duke@edu (Merlise Clyde, Ph.D.)
Date: Wed, 15 Jan 2025 15:30:36 +0000
Subject: [R-pkg-devel] Replacement for SETLENGTH
In-Reply-To: <CADNULg9fKRf3K6Q062D7X4rUJysO=9cWA1kFEjpSv3J-Oy0bYg@mail.gmail.com>
References: <CY8PR05MB100342EF92E6E169CA1067103C8182@CY8PR05MB10034.namprd05.prod.outlook.com>
 <CADNULg9fKRf3K6Q062D7X4rUJysO=9cWA1kFEjpSv3J-Oy0bYg@mail.gmail.com>
Message-ID: <CY8PR05MB10034614E651AB601A74968AFC8192@CY8PR05MB10034.namprd05.prod.outlook.com>

Thanks for the added explanation Iris and Tomas!

So looking at the code for xlengthgets, it does appear that I may take a memory hit for multiple large objects due to the second allocation before the old objects are possibly garbage collected.     There are about 12 such instances per function that are returned (I do use a counter for keeping track of the number of PROTECTED and to UNPROTECT for bookkeeping :-).   For memory limited machines, the alloc/copy was a problem for memory usage - and if I recall was one of the reasons in 2008 I switched to SETLENGTH, which doesn't seem to do an allocation ???  If there is going to be an absolute ban on SETLENGTH  in packages I'll probably need to address memory management differently for those cases.

I did see a note before the function def'n of xlengthgets:

/* (if it is vectorizable). We could probably be fairly */
/* clever with memory here if we wanted to. */

It would seem that memcpy would be more efficient for at least some of the types  (REALSPX, INTSPX) unless I am missing something - but any way to be more clever with VECSPX ?

best,
Merlise



Merlise Clyde (she/her/hers)
Professor of Statistical Science and Director of Graduate Studies
Duke University

________________________________________
From:?Iris Simmons <ikwsimmo at gmail.com>
Sent:?Wednesday, January 15, 2025 1:00 AM
To:?Merlise Clyde, Ph.D. <clyde at duke.edu>
Cc:?r-package-devel at r-project.org <r-package-devel at r-project.org>
Subject:?Re: [R-pkg-devel] Replacement for SETLENGTH
?
Hi Merlise!


Referring to here:

https://github.com/wch/r-source/blob/bb5a829466f77a3e1d03541747d149d65e900f2b/src/main/builtin.c#L834

It seems as though the object is only re-used if the new length is
equal to the old length.

If you use Rf_lengthgets, you will need to protect the return value.
The code you wrote that uses protect indexes looks correct, and the
reprotect is good because you no longer need the old object.

2 is the correct amount to unprotect. PROTECT and PROTECT_WITH_INDEX
(as far as I know) are the only functions that increase the size of
the protect stack, and so the only calls that need to be unprotected.
Typically, people define `int nprotect = 0;` at the start of their
functions, add `nprotect++;` after each PROTECT and PROTECT_WITH_INDEX
call, and add `UNPROTECT(nprotect);` immediately before each return or
function end. That makes it easier to keep track.

I typically use R_PreserveObject and R_ReleaseObject to protect
objects without a need to bind them somewhere in my package's
namespace. This would be that .onLoad() uses R_PreserveObject to
protect some objects, and .onUnload uses R_ReleaseObject to release
the protected objects. I probably would not use that for what you're
describing.


Regards,
??? Iris

On Tue, Jan 14, 2025 at 11:26?PM Merlise Clyde, Ph.D. <clyde at duke.edu> wrote:
>
> I am trying to determine the best way to eliminate the use of SETLENGTH to truncate over allocated vectors in my package BAS to eliminate the NOTES about non-API calls in anticipation of R 4.5.0.
>
> From WRE:? "At times it can be useful to allocate a larger initial result vector and resize it to a shorter length if that is sufficient. The functions Rf_lengthgets and Rf_xlengthgets accomplish this; they are analogous to using length(x) <- n in R. Typically these functions return a freshly allocated object, but in some cases they may re-use the supplied object."
>
> it looks like using
>
>???? x = Rf_lengthgets(x, newsize);
>???? SET_VECTOR_ELT(result, 0, x);
>
> before returning works to resize without a performance hit that incurs with a copy.? (will this always re-use the supplied object if newsize < old size?)
>
> There is no mention in section 5.9.2 about the need for re-protection of the object,? but it seems to be mentioned in some packages as well as a really old thread about SET_LENGTH that looks like a? non-API MACRO to lengthgets,
>
> indeed if I call gc() and then rerun my test I have had some non-reproducible aborts in R Studio on my M3 Mac (caught once in R -d lldb)
>
> Do I need to do something more like
>
> PROTECT_INDEX ipx0;.
> PROTECT_WITH_INDEX(x0 = allocVector(REALSXP, old_size), &ipx0);
>
> PROTECT_INDEX ipx1;.
> PROTECT_WITH_INDEX(x1 = allocVector(REALSXP, old_size), &ipx1);
>
> # fill in values in x0 and? x1up to new_size (random) < old_size
> ...
> REPROTECT(x0 = Rf_lengthgets(x0, new_size), ipx0);
> REPROTECT(x1 = Rf_lengthgets(x1, new_size), ipx1);
>
> SET_VECTOR_ELT(result, 0, x0);
> SET_VECTOR_ELT(result, 1, x1);
> ...
> UNPROTECT(2);?? # or is this 4?
> return(result);
>
>
> There is also a mention in WRE of R_PreserveObject and R_ReleaseObject -
>
> looking for advice if this is needed, or which approach is better/more stable to replace SETLENGTH??? (I have many many instances that need to be updated, so trying to get some clarity here before updating and running code through valgrind or other sanitizers to catch any memory issues before submitting an update to CRAN.
>
> best,
> Merlise
>
>
>
>
>
>
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-package-devel__;!!OToaGQ!ohDoxcAn5uIC25d42XhBz8Kd4YftOJDBoEW1NK9FOmgZpcmv0XIy5fQRm24-s_D8m9O_lR6jo6FcKiA$

From |kw@|mmo @end|ng |rom gm@||@com  Wed Jan 15 16:51:28 2025
From: |kw@|mmo @end|ng |rom gm@||@com (Iris Simmons)
Date: Wed, 15 Jan 2025 10:51:28 -0500
Subject: [R-pkg-devel] Replacement for SETLENGTH
In-Reply-To: <CY8PR05MB10034614E651AB601A74968AFC8192@CY8PR05MB10034.namprd05.prod.outlook.com>
References: <CY8PR05MB100342EF92E6E169CA1067103C8182@CY8PR05MB10034.namprd05.prod.outlook.com>
 <CADNULg9fKRf3K6Q062D7X4rUJysO=9cWA1kFEjpSv3J-Oy0bYg@mail.gmail.com>
 <CY8PR05MB10034614E651AB601A74968AFC8192@CY8PR05MB10034.namprd05.prod.outlook.com>
Message-ID: <CADNULg-ws6Atf6s-=TrHAHhXE=NDt+ij8+s9j5YUhV9KsA7Ggw@mail.gmail.com>

I don't think memcpy works well for VECSXP. The elements being overwritten
need to have their reference counts decreased and the new elements need to
have theirs increased.

Also, I don't entirely know how accurate everything I'm about to say is,
but I think you need to be using SET_TRUELENGTH and SET_GROWABLE_BIT along
with SETLENGTH. There's an example here:

https://github.com/wch/r-source/blob/744b5d34e1b8eb839e5d49d91ab21c1fe6800856/src/main/subassign.c#L257


The example uses SET_STDVEC_LENGTH which shouldn't be used, just replace it
with SETLENGTH.

So in your code, I'd replace:

SETLENGTH(modelspace, nUnique);

with

SET_GROWABLE_BIT(modelspace);
SET_TRUELENGTH(modelspace, nModels);
SETLENGTH(modelspace, nUnique);

On Wed, Jan 15, 2025, 10:30 Merlise Clyde, Ph.D. <clyde at duke.edu> wrote:

> Thanks for the added explanation Iris and Tomas!
>
> So looking at the code for xlengthgets, it does appear that I may take a
> memory hit for multiple large objects due to the second allocation before
> the old objects are possibly garbage collected.     There are about 12 such
> instances per function that are returned (I do use a counter for keeping
> track of the number of PROTECTED and to UNPROTECT for bookkeeping :-).
>  For memory limited machines, the alloc/copy was a problem for memory usage
> - and if I recall was one of the reasons in 2008 I switched to SETLENGTH,
> which doesn't seem to do an allocation ???  If there is going to be an
> absolute ban on SETLENGTH  in packages I'll probably need to address memory
> management differently for those cases.
>
> I did see a note before the function def'n of xlengthgets:
>
> /* (if it is vectorizable). We could probably be fairly */
> /* clever with memory here if we wanted to. */
>
> It would seem that memcpy would be more efficient for at least some of the
> types  (REALSPX, INTSPX) unless I am missing something - but any way to be
> more clever with VECSPX ?
>
> best,
> Merlise
>
>
>
> Merlise Clyde (she/her/hers)
> Professor of Statistical Science and Director of Graduate Studies
> Duke University
>
> ________________________________________
> From: Iris Simmons <ikwsimmo at gmail.com>
> Sent: Wednesday, January 15, 2025 1:00 AM
> To: Merlise Clyde, Ph.D. <clyde at duke.edu>
> Cc: r-package-devel at r-project.org <r-package-devel at r-project.org>
> Subject: Re: [R-pkg-devel] Replacement for SETLENGTH
>
> Hi Merlise!
>
>
> Referring to here:
>
>
> https://github.com/wch/r-source/blob/bb5a829466f77a3e1d03541747d149d65e900f2b/src/main/builtin.c#L834
>
> It seems as though the object is only re-used if the new length is
> equal to the old length.
>
> If you use Rf_lengthgets, you will need to protect the return value.
> The code you wrote that uses protect indexes looks correct, and the
> reprotect is good because you no longer need the old object.
>
> 2 is the correct amount to unprotect. PROTECT and PROTECT_WITH_INDEX
> (as far as I know) are the only functions that increase the size of
> the protect stack, and so the only calls that need to be unprotected.
> Typically, people define `int nprotect = 0;` at the start of their
> functions, add `nprotect++;` after each PROTECT and PROTECT_WITH_INDEX
> call, and add `UNPROTECT(nprotect);` immediately before each return or
> function end. That makes it easier to keep track.
>
> I typically use R_PreserveObject and R_ReleaseObject to protect
> objects without a need to bind them somewhere in my package's
> namespace. This would be that .onLoad() uses R_PreserveObject to
> protect some objects, and .onUnload uses R_ReleaseObject to release
> the protected objects. I probably would not use that for what you're
> describing.
>
>
> Regards,
>     Iris
>
> On Tue, Jan 14, 2025 at 11:26?PM Merlise Clyde, Ph.D. <clyde at duke.edu>
> wrote:
> >
> > I am trying to determine the best way to eliminate the use of SETLENGTH
> to truncate over allocated vectors in my package BAS to eliminate the NOTES
> about non-API calls in anticipation of R 4.5.0.
> >
> > From WRE:  "At times it can be useful to allocate a larger initial
> result vector and resize it to a shorter length if that is sufficient. The
> functions Rf_lengthgets and Rf_xlengthgets accomplish this; they are
> analogous to using length(x) <- n in R. Typically these functions return a
> freshly allocated object, but in some cases they may re-use the supplied
> object."
> >
> > it looks like using
> >
> >     x = Rf_lengthgets(x, newsize);
> >     SET_VECTOR_ELT(result, 0, x);
> >
> > before returning works to resize without a performance hit that incurs
> with a copy.  (will this always re-use the supplied object if newsize < old
> size?)
> >
> > There is no mention in section 5.9.2 about the need for re-protection of
> the object,  but it seems to be mentioned in some packages as well as a
> really old thread about SET_LENGTH that looks like a  non-API MACRO to
> lengthgets,
> >
> > indeed if I call gc() and then rerun my test I have had some
> non-reproducible aborts in R Studio on my M3 Mac (caught once in R -d lldb)
> >
> > Do I need to do something more like
> >
> > PROTECT_INDEX ipx0;.
> > PROTECT_WITH_INDEX(x0 = allocVector(REALSXP, old_size), &ipx0);
> >
> > PROTECT_INDEX ipx1;.
> > PROTECT_WITH_INDEX(x1 = allocVector(REALSXP, old_size), &ipx1);
> >
> > # fill in values in x0 and  x1up to new_size (random) < old_size
> > ...
> > REPROTECT(x0 = Rf_lengthgets(x0, new_size), ipx0);
> > REPROTECT(x1 = Rf_lengthgets(x1, new_size), ipx1);
> >
> > SET_VECTOR_ELT(result, 0, x0);
> > SET_VECTOR_ELT(result, 1, x1);
> > ...
> > UNPROTECT(2);   # or is this 4?
> > return(result);
> >
> >
> > There is also a mention in WRE of R_PreserveObject and R_ReleaseObject -
> >
> > looking for advice if this is needed, or which approach is better/more
> stable to replace SETLENGTH?   (I have many many instances that need to be
> updated, so trying to get some clarity here before updating and running
> code through valgrind or other sanitizers to catch any memory issues before
> submitting an update to CRAN.
> >
> > best,
> > Merlise
> >
> >
> >
> >
> >
> >
> >
> > ______________________________________________
> > R-package-devel at r-project.org mailing list
> >
> https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-package-devel__;!!OToaGQ!ohDoxcAn5uIC25d42XhBz8Kd4YftOJDBoEW1NK9FOmgZpcmv0XIy5fQRm24-s_D8m9O_lR6jo6FcKiA$

	[[alternative HTML version deleted]]


From iuke-tier@ey m@iii@g oii uiow@@edu  Wed Jan 15 18:34:20 2025
From: iuke-tier@ey m@iii@g oii uiow@@edu (iuke-tier@ey m@iii@g oii uiow@@edu)
Date: Wed, 15 Jan 2025 11:34:20 -0600 (CST)
Subject: [R-pkg-devel] [External] Re:  Replacement for SETLENGTH
In-Reply-To: <CADNULg-ws6Atf6s-=TrHAHhXE=NDt+ij8+s9j5YUhV9KsA7Ggw@mail.gmail.com>
References: <CY8PR05MB100342EF92E6E169CA1067103C8182@CY8PR05MB10034.namprd05.prod.outlook.com>
 <CADNULg9fKRf3K6Q062D7X4rUJysO=9cWA1kFEjpSv3J-Oy0bYg@mail.gmail.com>
 <CY8PR05MB10034614E651AB601A74968AFC8192@CY8PR05MB10034.namprd05.prod.outlook.com>
 <CADNULg-ws6Atf6s-=TrHAHhXE=NDt+ij8+s9j5YUhV9KsA7Ggw@mail.gmail.com>
Message-ID: <a424ea59-f51e-a0c9-9887-799d66b50e4@uiowa.edu>

On Wed, 15 Jan 2025, Iris Simmons wrote:

> I don't think memcpy works well for VECSXP. The elements being overwritten
> need to have their reference counts decreased and the new elements need to
> have theirs increased.

You do not want to use memcpy or inanyother way try to write to the
locations in a VECSXP. It is not jus the reference counts but also the
integrity of the GC write barrier that you would be damaging.

>
> Also, I don't entirely know how accurate everything I'm about to say is,
> but I think you need to be using SET_TRUELENGTH and SET_GROWABLE_BIT along
> with SETLENGTH. There's an example here:
>
> https://github.com/wch/r-source/blob/744b5d34e1b8eb839e5d49d91ab21c1fe6800856/src/main/subassign.c#L257
>
>
> The example uses SET_STDVEC_LENGTH which shouldn't be used, just replace it
> with SETLENGTH.
>
> So in your code, I'd replace:
>
> SETLENGTH(modelspace, nUnique);
>
> with
>
> SET_GROWABLE_BIT(modelspace);
> SET_TRUELENGTH(modelspace, nModels);
> SETLENGTH(modelspace, nUnique);

These are not part of the API.

Support for growable vectors maybe added to the API in the future, but
probably with a more robust interface.

In any case, this mechanism is intended for growing, not shrinking,
vectors.

Initially over-allocating and returning a smaller result is a
reasonable strategy, but the right way to do it is to allocate a new
shorter result. xlengthgets is a convenient way to do this. Tholonger
vector will be subject to garbage collecion once there are no
remaining references to it.

Attempting to keep alive a longer allocation but pretending it is
shorter is mis-guided: it would keep alive a larger object than is
needed and so waste memory.

Best,

luke

> On Wed, Jan 15, 2025, 10:30 Merlise Clyde, Ph.D. <clyde at duke.edu> wrote:
>
>> Thanks for the added explanation Iris and Tomas!
>>
>> So looking at the code for xlengthgets, it does appear that I may take a
>> memory hit for multiple large objects due to the second allocation before
>> the old objects are possibly garbage collected.     There are about 12 such
>> instances per function that are returned (I do use a counter for keeping
>> track of the number of PROTECTED and to UNPROTECT for bookkeeping :-).
>>  For memory limited machines, the alloc/copy was a problem for memory usage
>> - and if I recall was one of the reasons in 2008 I switched to SETLENGTH,
>> which doesn't seem to do an allocation ???  If there is going to be an
>> absolute ban on SETLENGTH  in packages I'll probably need to address memory
>> management differently for those cases.
>>
>> I did see a note before the function def'n of xlengthgets:
>>
>> /* (if it is vectorizable). We could probably be fairly */
>> /* clever with memory here if we wanted to. */
>>
>> It would seem that memcpy would be more efficient for at least some of the
>> types  (REALSPX, INTSPX) unless I am missing something - but any way to be
>> more clever with VECSPX ?
>>
>> best,
>> Merlise
>>
>>
>>
>> Merlise Clyde (she/her/hers)
>> Professor of Statistical Science and Director of Graduate Studies
>> Duke University
>>
>> ________________________________________
>> From: Iris Simmons <ikwsimmo at gmail.com>
>> Sent: Wednesday, January 15, 2025 1:00 AM
>> To: Merlise Clyde, Ph.D. <clyde at duke.edu>
>> Cc: r-package-devel at r-project.org <r-package-devel at r-project.org>
>> Subject: Re: [R-pkg-devel] Replacement for SETLENGTH
>>
>> Hi Merlise!
>>
>>
>> Referring to here:
>>
>>
>> https://github.com/wch/r-source/blob/bb5a829466f77a3e1d03541747d149d65e900f2b/src/main/builtin.c#L834
>>
>> It seems as though the object is only re-used if the new length is
>> equal to the old length.
>>
>> If you use Rf_lengthgets, you will need to protect the return value.
>> The code you wrote that uses protect indexes looks correct, and the
>> reprotect is good because you no longer need the old object.
>>
>> 2 is the correct amount to unprotect. PROTECT and PROTECT_WITH_INDEX
>> (as far as I know) are the only functions that increase the size of
>> the protect stack, and so the only calls that need to be unprotected.
>> Typically, people define `int nprotect = 0;` at the start of their
>> functions, add `nprotect++;` after each PROTECT and PROTECT_WITH_INDEX
>> call, and add `UNPROTECT(nprotect);` immediately before each return or
>> function end. That makes it easier to keep track.
>>
>> I typically use R_PreserveObject and R_ReleaseObject to protect
>> objects without a need to bind them somewhere in my package's
>> namespace. This would be that .onLoad() uses R_PreserveObject to
>> protect some objects, and .onUnload uses R_ReleaseObject to release
>> the protected objects. I probably would not use that for what you're
>> describing.
>>
>>
>> Regards,
>>     Iris
>>
>> On Tue, Jan 14, 2025 at 11:26?PM Merlise Clyde, Ph.D. <clyde at duke.edu>
>> wrote:
>>>
>>> I am trying to determine the best way to eliminate the use of SETLENGTH
>> to truncate over allocated vectors in my package BAS to eliminate the NOTES
>> about non-API calls in anticipation of R 4.5.0.
>>>
>>> From WRE:  "At times it can be useful to allocate a larger initial
>> result vector and resize it to a shorter length if that is sufficient. The
>> functions Rf_lengthgets and Rf_xlengthgets accomplish this; they are
>> analogous to using length(x) <- n in R. Typically these functions return a
>> freshly allocated object, but in some cases they may re-use the supplied
>> object."
>>>
>>> it looks like using
>>>
>>>     x = Rf_lengthgets(x, newsize);
>>>     SET_VECTOR_ELT(result, 0, x);
>>>
>>> before returning works to resize without a performance hit that incurs
>> with a copy.  (will this always re-use the supplied object if newsize < old
>> size?)
>>>
>>> There is no mention in section 5.9.2 about the need for re-protection of
>> the object,  but it seems to be mentioned in some packages as well as a
>> really old thread about SET_LENGTH that looks like a  non-API MACRO to
>> lengthgets,
>>>
>>> indeed if I call gc() and then rerun my test I have had some
>> non-reproducible aborts in R Studio on my M3 Mac (caught once in R -d lldb)
>>>
>>> Do I need to do something more like
>>>
>>> PROTECT_INDEX ipx0;.
>>> PROTECT_WITH_INDEX(x0 = allocVector(REALSXP, old_size), &ipx0);
>>>
>>> PROTECT_INDEX ipx1;.
>>> PROTECT_WITH_INDEX(x1 = allocVector(REALSXP, old_size), &ipx1);
>>>
>>> # fill in values in x0 and  x1up to new_size (random) < old_size
>>> ...
>>> REPROTECT(x0 = Rf_lengthgets(x0, new_size), ipx0);
>>> REPROTECT(x1 = Rf_lengthgets(x1, new_size), ipx1);
>>>
>>> SET_VECTOR_ELT(result, 0, x0);
>>> SET_VECTOR_ELT(result, 1, x1);
>>> ...
>>> UNPROTECT(2);   # or is this 4?
>>> return(result);
>>>
>>>
>>> There is also a mention in WRE of R_PreserveObject and R_ReleaseObject -
>>>
>>> looking for advice if this is needed, or which approach is better/more
>> stable to replace SETLENGTH?   (I have many many instances that need to be
>> updated, so trying to get some clarity here before updating and running
>> code through valgrind or other sanitizers to catch any memory issues before
>> submitting an update to CRAN.
>>>
>>> best,
>>> Merlise
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>> ______________________________________________
>>> R-package-devel at r-project.org mailing list
>>>
>> https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-package-devel__;!!OToaGQ!ohDoxcAn5uIC25d42XhBz8Kd4YftOJDBoEW1NK9FOmgZpcmv0XIy5fQRm24-s_D8m9O_lR6jo6FcKiA$
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>

-- 
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa                  Phone:             319-335-3386
Department of Statistics and        Fax:               319-335-3017
    Actuarial Science
241 Schaeffer Hall                  email:   luke-tierney at uiowa.edu
Iowa City, IA 52242                 WWW:  http://www.stat.uiowa.edu/

From |kry|ov @end|ng |rom d|@root@org  Wed Jan 15 21:13:00 2025
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Wed, 15 Jan 2025 23:13:00 +0300
Subject: [R-pkg-devel] Replacement for SETLENGTH
In-Reply-To: <CY8PR05MB10034614E651AB601A74968AFC8192@CY8PR05MB10034.namprd05.prod.outlook.com>
References: <CY8PR05MB100342EF92E6E169CA1067103C8182@CY8PR05MB10034.namprd05.prod.outlook.com>
 <CADNULg9fKRf3K6Q062D7X4rUJysO=9cWA1kFEjpSv3J-Oy0bYg@mail.gmail.com>
 <CY8PR05MB10034614E651AB601A74968AFC8192@CY8PR05MB10034.namprd05.prod.outlook.com>
Message-ID: <20250115231300.2b5ba55b@Tarkus>

On Wed, 15 Jan 2025 15:30:36 +0000
"Merlise Clyde, Ph.D." <clyde at duke.edu> wrote:

> For memory limited machines, the alloc/copy was a problem for memory
> usage - and if I recall was one of the reasons in 2008 I switched to
> SETLENGTH, which doesn't seem to do an allocation ???  If there is
> going to be an absolute ban on SETLENGTH  in packages I'll probably
> need to address memory management differently for those cases.

If you need to adjust the xlength() of your vectors without causing
reallocations, I'm afraid the only API-compliant way to do that for now
is ALTREP [1]. It's a lot of typing because the code will need to
register an ALTREP class for every vector type that needs to be
shrinkable. Moreover, since some of those vectors are of type VECSXP
and "altlist" classes only appeared in R-4.3.0, you will probably
prefer to leave the old implementation based on SETLENGTH() behind #if
R_VERSION < R_Version(4, 3, 0) to avoid requiring your users to upgrade
from R >= 3.0.

A work-in-progress implementation of shrinkable vectors for data.table
can be found at [2]. The real problem is not implementing the same
simple API using SETLENGTH() and ALTREP, but in refactoring the rest of
the code not to violate its assumptions. (Total control over the
allocation of your shrinkable vectors is required: nothing good will
happen if the code tries to call ALTREP methods on an object that is
not of the exact ALTREP class it needs to be.)

My own notes on the use of ALTREP can be found at [3]. I will do my
best to keep them correct, but patches are always welcome.

And now a question:

Would R benefit from a patch to make xlengthgets() more like
EnlargeVector() [4] and sometimes return vectors with GROWABLE_BIT set?
(EnlargeVector() is currently only reachable from the `[<-` operation.)
It wouldn't be a deviation from the currently documented behaviour if
the function tested for NO_REFERENCES() and then used SETLENGTH() when,
say, reducing the length of a vector to 1/2 of its length or more.

-- 
Best regards,
Ivan

[1]
https://rdatatable-community.github.io/The-Raft/posts/2025-01-13-non-api-use/index.html#growable-vectors

[2]
https://github.com/Rdatatable/data.table/blob/growable_refactor/src/growable.c
Everyone is welcome to use this under the terms of GPL-2 or a later
version, or MPL-2, at their choice.

[3]
https://aitap.codeberg.page/R-api/#ALTREP

[4]
https://github.com/r-devel/r-svn/blob/59df414b844eea27c09b352ad30fd82e66764d2d/src/main/subassign.c#L256-L260


From c|yde @end|ng |rom duke@edu  Wed Jan 15 21:53:19 2025
From: c|yde @end|ng |rom duke@edu (Merlise Clyde, Ph.D.)
Date: Wed, 15 Jan 2025 20:53:19 +0000
Subject: [R-pkg-devel] [External] Re:  Replacement for SETLENGTH
In-Reply-To: <a424ea59-f51e-a0c9-9887-799d66b50e4@uiowa.edu>
References: <CY8PR05MB100342EF92E6E169CA1067103C8182@CY8PR05MB10034.namprd05.prod.outlook.com>
 <CADNULg9fKRf3K6Q062D7X4rUJysO=9cWA1kFEjpSv3J-Oy0bYg@mail.gmail.com>
 <CY8PR05MB10034614E651AB601A74968AFC8192@CY8PR05MB10034.namprd05.prod.outlook.com>
 <CADNULg-ws6Atf6s-=TrHAHhXE=NDt+ij8+s9j5YUhV9KsA7Ggw@mail.gmail.com>
 <a424ea59-f51e-a0c9-9887-799d66b50e4@uiowa.edu>
Message-ID: <CY8PR05MB100349ABE1DB2CE78F0D79F06C8192@CY8PR05MB10034.namprd05.prod.outlook.com>


Thanks Luke !   I had seen the usage and discussion of growable vectors, as well as using SET_TRUELENGTH with SETLENGTH and didn't necessarily want to get even more out of API compliance :-). but if that looks like it will allowed (subject to perhaps changes) that seems like the better way forward to handle the different SEXPs.    And switching to smaller vectors and enlarging would be much more efficient in terms of memory.    I'll need to play around with how much to expand by as the enlargement would need to be in the loop with a final resizing before returning.

So if I understand the suggestion the use of xlengthgets basically handles the body of the code in EnlargeVector function  for allocation and copying (but now smaller vectors) with then the extra step to SETLENGTH and SET_TRUELENGTH
If done within a loop over MCMC iterations, then I would need to use SET_GROWABLE_BIT before the loop or when I encounter the need to enlarge.   (so basically a local implementation of EnlargeVector)

For my non-VECSXP objects (REALSXP, INTSXP)  it might be more efficient to use Realloc on a working array within loops and only allocate and assign after determining the final length (nUnique), and freeing the memory myself...  That way I avoid SETLENGTH altogether for those types.

best,
Merlise



Merlise Clyde (she/her/hers)
Professor of Statistical Science and Director of Graduate Studies
Duke University


________________________________________
From:?luke-tierney at uiowa.edu <luke-tierney at uiowa.edu>
Sent:?Wednesday, January 15, 2025 12:34 PM
To:?Iris Simmons <ikwsimmo at gmail.com>
Cc:?Merlise Clyde, Ph.D. <clyde at duke.edu>; List r-package-devel <r-package-devel at r-project.org>
Subject:?Re: [External] Re: [R-pkg-devel] Replacement for SETLENGTH
?
On Wed, 15 Jan 2025, Iris Simmons wrote:

> I don't think memcpy works well for VECSXP. The elements being overwritten
> need to have their reference counts decreased and the new elements need to
> have theirs increased.

You do not want to use memcpy or inanyother way try to write to the
locations in a VECSXP. It is not jus the reference counts but also the
integrity of the GC write barrier that you would be damaging.

>
> Also, I don't entirely know how accurate everything I'm about to say is,
> but I think you need to be using SET_TRUELENGTH and SET_GROWABLE_BIT along
> with SETLENGTH. There's an example here:
>
> https://urldefense.com/v3/__https://github.com/wch/r-source/blob/744b5d34e1b8eb839e5d49d91ab21c1fe6800856/src/main/subassign.c*L257__;Iw!!OToaGQ!uACtQIEun1eC8hwn-FzFogXQoPl1wETg9EUSV1NzAif9u15KlRTctzEq1RSA5rcbeVGv0n3geb8UexFngaonYos$
>
>
> The example uses SET_STDVEC_LENGTH which shouldn't be used, just replace it
> with SETLENGTH.
>
> So in your code, I'd replace:
>
> SETLENGTH(modelspace, nUnique);
>
> with
>
> SET_GROWABLE_BIT(modelspace);
> SET_TRUELENGTH(modelspace, nModels);
> SETLENGTH(modelspace, nUnique);

These are not part of the API.

Support for growable vectors maybe added to the API in the future, but
probably with a more robust interface.

In any case, this mechanism is intended for growing, not shrinking,
vectors.

Initially over-allocating and returning a smaller result is a
reasonable strategy, but the right way to do it is to allocate a new
shorter result. xlengthgets is a convenient way to do this. Tholonger
vector will be subject to garbage collecion once there are no
remaining references to it.

Attempting to keep alive a longer allocation but pretending it is
shorter is mis-guided: it would keep alive a larger object than is
needed and so waste memory.

Best,

luke

> On Wed, Jan 15, 2025, 10:30 Merlise Clyde, Ph.D. <clyde at duke.edu> wrote:
>
>> Thanks for the added explanation Iris and Tomas!
>>
>> So looking at the code for xlengthgets, it does appear that I may take a
>> memory hit for multiple large objects due to the second allocation before
>> the old objects are possibly garbage collected.???? There are about 12 such
>> instances per function that are returned (I do use a counter for keeping
>> track of the number of PROTECTED and to UNPROTECT for bookkeeping :-).
>>? For memory limited machines, the alloc/copy was a problem for memory usage
>> - and if I recall was one of the reasons in 2008 I switched to SETLENGTH,
>> which doesn't seem to do an allocation ???? If there is going to be an
>> absolute ban on SETLENGTH? in packages I'll probably need to address memory
>> management differently for those cases.
>>
>> I did see a note before the function def'n of xlengthgets:
>>
>> /* (if it is vectorizable). We could probably be fairly */
>> /* clever with memory here if we wanted to. */
>>
>> It would seem that memcpy would be more efficient for at least some of the
>> types? (REALSPX, INTSPX) unless I am missing something - but any way to be
>> more clever with VECSPX ?
>>
>> best,
>> Merlise
>>
>>
>>
>> Merlise Clyde (she/her/hers)
>> Professor of Statistical Science and Director of Graduate Studies
>> Duke University
>>
>> ________________________________________
>> From: Iris Simmons <ikwsimmo at gmail.com>
>> Sent: Wednesday, January 15, 2025 1:00 AM
>> To: Merlise Clyde, Ph.D. <clyde at duke.edu>
>> Cc: r-package-devel at r-project.org <r-package-devel at r-project.org>
>> Subject: Re: [R-pkg-devel] Replacement for SETLENGTH
>>
>> Hi Merlise!
>>
>>
>> Referring to here:
>>
>>
>> https://urldefense.com/v3/__https://github.com/wch/r-source/blob/bb5a829466f77a3e1d03541747d149d65e900f2b/src/main/builtin.c*L834__;Iw!!OToaGQ!uACtQIEun1eC8hwn-FzFogXQoPl1wETg9EUSV1NzAif9u15KlRTctzEq1RSA5rcbeVGv0n3geb8UexFnr_0lCLM$
>>
>> It seems as though the object is only re-used if the new length is
>> equal to the old length.
>>
>> If you use Rf_lengthgets, you will need to protect the return value.
>> The code you wrote that uses protect indexes looks correct, and the
>> reprotect is good because you no longer need the old object.
>>
>> 2 is the correct amount to unprotect. PROTECT and PROTECT_WITH_INDEX
>> (as far as I know) are the only functions that increase the size of
>> the protect stack, and so the only calls that need to be unprotected.
>> Typically, people define `int nprotect = 0;` at the start of their
>> functions, add `nprotect++;` after each PROTECT and PROTECT_WITH_INDEX
>> call, and add `UNPROTECT(nprotect);` immediately before each return or
>> function end. That makes it easier to keep track.
>>
>> I typically use R_PreserveObject and R_ReleaseObject to protect
>> objects without a need to bind them somewhere in my package's
>> namespace. This would be that .onLoad() uses R_PreserveObject to
>> protect some objects, and .onUnload uses R_ReleaseObject to release
>> the protected objects. I probably would not use that for what you're
>> describing.
>>
>>
>> Regards,
>>???? Iris
>>
>> On Tue, Jan 14, 2025 at 11:26?PM Merlise Clyde, Ph.D. <clyde at duke.edu>
>> wrote:
>>>
>>> I am trying to determine the best way to eliminate the use of SETLENGTH
>> to truncate over allocated vectors in my package BAS to eliminate the NOTES
>> about non-API calls in anticipation of R 4.5.0.
>>>
>>> From WRE:? "At times it can be useful to allocate a larger initial
>> result vector and resize it to a shorter length if that is sufficient. The
>> functions Rf_lengthgets and Rf_xlengthgets accomplish this; they are
>> analogous to using length(x) <- n in R. Typically these functions return a
>> freshly allocated object, but in some cases they may re-use the supplied
>> object."
>>>
>>> it looks like using
>>>
>>>???? x = Rf_lengthgets(x, newsize);
>>>???? SET_VECTOR_ELT(result, 0, x);
>>>
>>> before returning works to resize without a performance hit that incurs
>> with a copy.? (will this always re-use the supplied object if newsize < old
>> size?)
>>>
>>> There is no mention in section 5.9.2 about the need for re-protection of
>> the object,? but it seems to be mentioned in some packages as well as a
>> really old thread about SET_LENGTH that looks like a? non-API MACRO to
>> lengthgets,
>>>
>>> indeed if I call gc() and then rerun my test I have had some
>> non-reproducible aborts in R Studio on my M3 Mac (caught once in R -d lldb)
>>>
>>> Do I need to do something more like
>>>
>>> PROTECT_INDEX ipx0;.
>>> PROTECT_WITH_INDEX(x0 = allocVector(REALSXP, old_size), &ipx0);
>>>
>>> PROTECT_INDEX ipx1;.
>>> PROTECT_WITH_INDEX(x1 = allocVector(REALSXP, old_size), &ipx1);
>>>
>>> # fill in values in x0 and? x1up to new_size (random) < old_size
>>> ...
>>> REPROTECT(x0 = Rf_lengthgets(x0, new_size), ipx0);
>>> REPROTECT(x1 = Rf_lengthgets(x1, new_size), ipx1);
>>>
>>> SET_VECTOR_ELT(result, 0, x0);
>>> SET_VECTOR_ELT(result, 1, x1);
>>> ...
>>> UNPROTECT(2);?? # or is this 4?
>>> return(result);
>>>
>>>
>>> There is also a mention in WRE of R_PreserveObject and R_ReleaseObject -
>>>
>>> looking for advice if this is needed, or which approach is better/more
>> stable to replace SETLENGTH??? (I have many many instances that need to be
>> updated, so trying to get some clarity here before updating and running
>> code through valgrind or other sanitizers to catch any memory issues before
>> submitting an update to CRAN.
>>>
>>> best,
>>> Merlise
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>> ______________________________________________
>>> R-package-devel at r-project.org mailing list
>>>
>> https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-package-devel__;!!OToaGQ!ohDoxcAn5uIC25d42XhBz8Kd4YftOJDBoEW1NK9FOmgZpcmv0XIy5fQRm24-s_D8m9O_lR6jo6FcKiA$
>
>??????? [[alternative HTML version deleted]]
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://urldefense.com/v3/__https://stat.ethz.ch/mailman/listinfo/r-package-devel__;!!OToaGQ!uACtQIEun1eC8hwn-FzFogXQoPl1wETg9EUSV1NzAif9u15KlRTctzEq1RSA5rcbeVGv0n3geb8UexFnYd-1ZB4$
>

--
Luke Tierney
Ralph E. Wareham Professor of Mathematical Sciences
University of Iowa????????????????? Phone:???????????? 319-335-3386
Department of Statistics and??????? Fax:?????????????? 319-335-3017
??? Actuarial Science
241 Schaeffer Hall????????????????? email:?? luke-tierney at uiowa.edu
Iowa City, IA 52242???????????????? WWW:? https://urldefense.com/v3/__http://www.stat.uiowa.edu/__;!!OToaGQ!uACtQIEun1eC8hwn-FzFogXQoPl1wETg9EUSV1NzAif9u15KlRTctzEq1RSA5rcbeVGv0n3geb8UexFnFDCXgK0$

