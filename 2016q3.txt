From d.luedecke at uke.de  Fri Jul  1 10:45:17 2016
From: d.luedecke at uke.de (=?UTF-8?Q?Daniel_L=c3=bcdecke?=)
Date: Fri, 1 Jul 2016 10:45:17 +0200
Subject: [R-pkg-devel] Package license
Message-ID: <da1d9323-c7c5-786b-b81f-20e1c1df2713@uke.de>

I'm writing a small package that implements this web-bases effect size 
calculator: 
http://www.campbellcollaboration.org/escalc/html/EffectSizeCalculator-OR5.php 
in R.

The calculator is licensed under the Creative Commons 
Attribution-Noncommercial 3.0 United States License. Do I also have to 
use this license for my package? And if so, is this a valid license for 
R packages?

I'm happy to use any appropriate license, but I wanted to be sure to be 
formally correct.

Best
Daniel

--

_____________________________________________________________________

Universit?tsklinikum Hamburg-Eppendorf; K?rperschaft des ?ffentlichen Rechts; Gerichtsstand: Hamburg | www.uke.de
Vorstandsmitglieder: Prof. Dr. Burkhard G?ke (Vorsitzender), Prof. Dr. Dr. Uwe Koch-Gromus, Joachim Pr?l?, Rainer Schoppik
_____________________________________________________________________

SAVE PAPER - THINK BEFORE PRINTING

From daniel.nuest at uni-muenster.de  Fri Jul  1 10:55:36 2016
From: daniel.nuest at uni-muenster.de (=?UTF-8?Q?Daniel_N=c3=bcst?=)
Date: Fri, 1 Jul 2016 10:55:36 +0200
Subject: [R-pkg-devel] Package license
In-Reply-To: <da1d9323-c7c5-786b-b81f-20e1c1df2713@uke.de>
References: <da1d9323-c7c5-786b-b81f-20e1c1df2713@uke.de>
Message-ID: <57763008.8060407@uni-muenster.de>

Hi!

First of all: IANAL, please get one :-).

On 01/07/16 10:45, Daniel L?decke wrote:
> I'm writing a small package that implements this web-bases effect size
> calculator:
> http://www.campbellcollaboration.org/escalc/html/EffectSizeCalculator-OR5.php
> in R.
>
> The calculator is licensed under the Creative Commons
> Attribution-Noncommercial 3.0 United States License. Do I also have to
> use this license for my package? And if so, is this a valid license for
> R packages?

You can probably license your package CC-BY-NC, but you should be aware 
that this is not an open source license. I would even say that 95% of R 
users would not be able to use your package.

CC discourages usage of this license for software [1], and the 
"noncommercial" aspect is incompatible with all existing definitions of 
(F)OSS.

> I'm happy to use any appropriate license, but I wanted to be sure to be
> formally correct.

I don't really understand how you want to use the linked file. Are you 
re-implementing the functionality? If so, you are not using the software 
but the idea. I would recommend to get in touch with the original author 
and ask if you can use a regular open source license [2, 3].

Hope this helps,
Daniel

[1] 
https://creativecommons.org/faq/#can-i-apply-a-creative-commons-license-to-software
[2] https://cran.r-project.org/web/licenses/
[3] https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Licensing

> --
>
> _____________________________________________________________________
>
> Universit?tsklinikum Hamburg-Eppendorf; K?rperschaft des ?ffentlichen
> Rechts; Gerichtsstand: Hamburg | www.uke.de
> Vorstandsmitglieder: Prof. Dr. Burkhard G?ke (Vorsitzender), Prof. Dr.
> Dr. Uwe Koch-Gromus, Joachim Pr?l?, Rainer Schoppik
> _____________________________________________________________________
>
> SAVE PAPER - THINK BEFORE PRINTING
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel

-- 
Daniel N?st
Institute for Geoinformatics (ifgi),   University of M?nster
Heisenbergstra?e 2, 48149 M?nster, Germany; +49 251 83 31962
http://ifgi.uni-muenster.de/~d_nues01        http://o2r.info


From kristian.liland at nmbu.no  Mon Jul  4 08:51:34 2016
From: kristian.liland at nmbu.no (Kristian Hovde Liland)
Date: Mon, 4 Jul 2016 06:51:34 +0000
Subject: [R-pkg-devel] Documenting dependencies on Bioconductor packages
In-Reply-To: <1466492434477.59004@nmbu.no>
References: <1466492434477.59004@nmbu.no>
Message-ID: <1467615094934.60121@nmbu.no>

Hi.

No one knows how to properly document Bioconductor dependencies, or is it too obvious to warrant a response?

Best regards,
Kristian Hovde Liland

________________________________________
Fra: R-package-devel <r-package-devel-bounces at r-project.org> p? vegne av Kristian Hovde Liland <kristian.liland at nmbu.no>
Sendt: 21. juni 2016 09:00
Til: r-package-devel at r-project.org
Emne: [R-pkg-devel] Documenting dependencies on Bioconductor packages

?Dear package developers.

We are developing a set of R packages that perform statistics and classification on nucleotide sequence data. For efficient reading and writing of such data the package depends on the Biostrings package hosted by Bioconductor.

Being a mainstream repository, dependencies on Bioconductor packages have been considered okay; minus out-of-sync package updates and different hosting structure (separate devel branch at Biostrings and different recommended installation strategy).

CRAN policy enforcing is becoming stricter (which is very good considering the sheer amount of new packages arriving and future proofing), and thus we received a reply after submitting one of our packages as follows:
"Can you pls improve the Description to make clearer that you refer to the 'Biostrings' package from BioC?".

I haven't found any good examples on how to include such information in the descriptions. Is it sufficient to write at the end: "This package depends on the Biostrings package hosted by Bioconductor.", or is there a formal or more elegant way of including this information? I find documentation and CRAN policies to be a bit sparse on the subject. From other previous mailing list and forum discussions I gather that Bioconductor should not be added to the Additional_repositories list.

Best regards,
Kristian Hovde Liland
______________________________________________
R-package-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-package-devel

From nacnudus at gmail.com  Mon Jul  4 17:56:25 2016
From: nacnudus at gmail.com (Duncan Garmonsway)
Date: Mon, 4 Jul 2016 16:56:25 +0100
Subject: [R-pkg-devel] Use a small amount of C++-level code from another
 package without headers in inst/include
Message-ID: <CAARqVQOuO-ovoAJS9TMSAr1=izwD6NRD-c7=M1VBn4CW=v1DQw@mail.gmail.com>

There is an R package that defines some handy functions for extracting
files from zip archives into a std::string in C++. I'd like to use those
functions in my own packages, but I can't simply link to them because the
header is not in the inst/include directory of the original package.

My question is based on my understanding that C++-level code isn't
available outside a package unless the header is in inst/include.

To use the code, my options are:

1. Ask the package maintainer to move the C++ header file to the
inst/include directory so that I can call it from my package with linkingTo
in the DESCRIPTION file.

2. Copy and acknowledge the code, which means propagating the GPL-3 licence
to my own package.

3. Copy and pointlessly alter the code to evade copyright.

4. Copy the code, which is about 20 lines, don't alter it, don't
acknowledge it, and don't propagate the GPL-3 licence.

5. Create a separate, tiny package that makes the code I want available in
inst/include, acknowledges the original author, and propogates the GPL-3
licence to itself, but not to my actual package, which simply includes it.
 (There seems to be some doubt about the propagation of licences, but I
have read an archive post that said this is not an appropriate forum to
discuss that).

Are there any other options? Have I misunderstood Writing R Extensions or
Rcpp?

(3) and (4) aren't serious, but they become more tempting for more-trivial
code (e.g. at what point is it equivalent to copy/pasting StackOverflow
answers?)

I originally posted this question at StackOverfow, where I was directed
here.

Thanks,
Duncan

	[[alternative HTML version deleted]]


From edd at debian.org  Mon Jul  4 18:37:44 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Mon, 4 Jul 2016 11:37:44 -0500
Subject: [R-pkg-devel] Use a small amount of C++-level code from another
 package without headers in inst/include
In-Reply-To: <CAARqVQOuO-ovoAJS9TMSAr1=izwD6NRD-c7=M1VBn4CW=v1DQw@mail.gmail.com>
References: <CAARqVQOuO-ovoAJS9TMSAr1=izwD6NRD-c7=M1VBn4CW=v1DQw@mail.gmail.com>
Message-ID: <22394.37080.291728.439374@max.nulle.part>


On 4 July 2016 at 16:56, Duncan Garmonsway wrote:
| There is an R package that defines some handy functions for extracting
| files from zip archives into a std::string in C++. I'd like to use those
| functions in my own packages, but I can't simply link to them because the
| header is not in the inst/include directory of the original package.
| 
| My question is based on my understanding that C++-level code isn't
| available outside a package unless the header is in inst/include.

Not quite. See below.
 
| To use the code, my options are:
| 
| 1. Ask the package maintainer to move the C++ header file to the
| inst/include directory so that I can call it from my package with linkingTo
| in the DESCRIPTION file.

If and only if the code is 'header-only'. Some C++ code is, as eg Armadillo
in RcppArmadillo, the parts of Boost in BH, also StanHeaders, AsioHeaders etc
pp but not all. If that package has code in src/ you need to link, or better
use the exporting mechanism described in 'Writing R Extensions'.  See below.
 
| 2. Copy and acknowledge the code, which means propagating the GPL-3 licence
| to my own package.

This may be simplest.  Copy it into your src/ and be done.  Acknowledge the
author, respect the copyright and license.
 
| 3. Copy and pointlessly alter the code to evade copyright.

You were told in no uncertain terms on SO that this is NOWHERE to be even
considerable.  

This. Is. Never. An. Option.

Do. Not. Repeat. It.
 
| 4. Copy the code, which is about 20 lines, don't alter it, don't
| acknowledge it, and don't propagate the GPL-3 licence.

This is a GPL violation which will get you off CRAN, and for a reason.
 
| 5. Create a separate, tiny package that makes the code I want available in
| inst/include, acknowledges the original author, and propogates the GPL-3
| licence to itself, but not to my actual package, which simply includes it.

Possibly export from it.  See my RApiSerialize package for an example
implementation.

|  (There seems to be some doubt about the propagation of licences, but I
| have read an archive post that said this is not an appropriate forum to
| discuss that).

It is complicated.  But rest assurred that actively cheating as you appear to
suggest here is never correct.

Dirk

| Are there any other options? Have I misunderstood Writing R Extensions or
| Rcpp?
| 
| (3) and (4) aren't serious, but they become more tempting for more-trivial
| code (e.g. at what point is it equivalent to copy/pasting StackOverflow
| answers?)
| 
| I originally posted this question at StackOverfow, where I was directed
| here.
| 
| Thanks,
| Duncan
| 
| 	[[alternative HTML version deleted]]
| 
| ______________________________________________
| R-package-devel at r-project.org mailing list
| https://stat.ethz.ch/mailman/listinfo/r-package-devel

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From edd at debian.org  Mon Jul  4 19:23:34 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Mon, 4 Jul 2016 12:23:34 -0500
Subject: [R-pkg-devel] Documenting dependencies on Bioconductor packages
In-Reply-To: <1467615094934.60121@nmbu.no>
References: <1466492434477.59004@nmbu.no>
	<1467615094934.60121@nmbu.no>
Message-ID: <22394.39830.598956.584835@max.nulle.part>


On 4 July 2016 at 06:51, Kristian Hovde Liland wrote:
| I haven't found any good examples on how to include such information in the
| descriptions. Is it sufficient to write at the end: "This package depends on
| the Biostrings package hosted by Bioconductor.", or is there a formal or more
| elegant way of including this information?

Why don't you just add a Depends: as this package does:

   https://cran.r-project.org/web/packages/SimRAD/index.html

or a Suggests: (plus proper run-time tests) as done here:

   https://cran.r-project.org/web/packages/phangorn/index.html

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From sn248 at cornell.edu  Wed Jul  6 18:22:40 2016
From: sn248 at cornell.edu (Satyaprakash Nayak)
Date: Wed, 6 Jul 2016 12:22:40 -0400
Subject: [R-pkg-devel] Linking to C library from within R package - library
	not loaded error
Message-ID: <CAM3CqvLqXKJ4L22FQJ036K7-c3Tshs0uXX7qaO0a6sFDcjMOsg@mail.gmail.com>

Hi

I am trying to develop a package which links against a C library which is
installed on my system (Mac OSX) in the /usr/local/lib directory.

The C library against which I am linking is called 'Sundials
<http://computation.llnl.gov/projects/sundials-suite-nonlinear-differential-algebraic-equation-solvers>'
(an efficient solver for large scale ordinary differential/algebraic
equations) and the specific error I get when I perform 'clean and rebuild`
in RStudio, I get the following error

Library not loaded: libsundials_nvecserial.0.dylib


The Makevars is as follows

PKG_CPPFLAGS= -I../inst/include/ -I src/sundials
> PKG_LIBS= $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS) -L/usr/local/lib
> -lsundials_nvecserial -lsundials_cvode -lm


Initially, I was thinking of building the library in the package itself so
that the users don't have to install `sundials` to use the package, but I
have abandoned that approach (for now) and I am now trying to link to the
libraries installed on the system. Currently, the package does not do
anything useful, I am just trying to allocate values to the N_VNew_Serial() (a
vector type defined by the sundials library), see -
https://github.com/sn248/Rcppsbmod/blob/pr/1/src/sundials_test.cpp

I have confirmed that /usr/local/lib does contain
libsundials_nvecserial.0.dylib

The source code for the entire package can be found at -
https://github.com/sn248/Rcppsbmod/tree/pr/1

In the interest of full disclosure, I have asked a similar question before
on StackOverflow also -
http://stackoverflow.com/questions/37819967/compiling-c-in-rcpp-with-external-c-library

and received comments that this is a linking error, not compilation.

To confirm that I have sundials installed and working on my laptop, I tried
to compile and link an example from the library using the command

gcc -Wall cvRoberts_dns.c -o cvRoberts_dns.exe -I/usr/local/include
-L/usr/local/lib/ -lsundials_cvode -lsundials_nvecserial -lm

and was able to run it successfully.

Any help in linking successfully to this library in my package would be
highly appreciated.
Thanks!
SN

	[[alternative HTML version deleted]]


From sn248 at cornell.edu  Wed Jul  6 19:09:58 2016
From: sn248 at cornell.edu (Satyaprakash Nayak)
Date: Wed, 6 Jul 2016 13:09:58 -0400
Subject: [R-pkg-devel] Linking to C library from within R package -
	library not loaded error
In-Reply-To: <CAM3CqvLqXKJ4L22FQJ036K7-c3Tshs0uXX7qaO0a6sFDcjMOsg@mail.gmail.com>
References: <CAM3CqvLqXKJ4L22FQJ036K7-c3Tshs0uXX7qaO0a6sFDcjMOsg@mail.gmail.com>
Message-ID: <CAM3Cqv+Xh0W0vYJbi-Uhyy2cTmLWo+kEy3T=RHefxq1W1Rdxfg@mail.gmail.com>

A quick update

The correct command to run the sundials example is

gcc -Wall cvRoberts_dns.c -o cvRoberts_dns.exe -I/usr/local/include
-L/usr/local/lib/ -lsundials_cvode -lsundials_nvecserial -lm

OR

gcc -Wall cvRoberts_dns.c -o cvRoberts_dns.exe
/usr/local/lib/libsundials_cvode.a /usr/local/lib/libsundials_nvecserial.a

also, the command

PKG_LIBS= $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS)
/usr/local/lib/libsundials_cvode.a /usr/local/lib/libsundials_nvecserial.a

now works! So, linking to a static library works, but linking to the .so or
.dylib does not in this case.

Thanks

SN

On Wed, Jul 6, 2016 at 12:22 PM, Satyaprakash Nayak <sn248 at cornell.edu>
wrote:

> Hi
>
> I am trying to develop a package which links against a C library which is
> installed on my system (Mac OSX) in the /usr/local/lib directory.
>
> The C library against which I am linking is called 'Sundials
> <http://computation.llnl.gov/projects/sundials-suite-nonlinear-differential-algebraic-equation-solvers>'
> (an efficient solver for large scale ordinary differential/algebraic
> equations) and the specific error I get when I perform 'clean and rebuild`
> in RStudio, I get the following error
>
> Library not loaded: libsundials_nvecserial.0.dylib
>
>
> The Makevars is as follows
>
> PKG_CPPFLAGS= -I../inst/include/ -I src/sundials
>> PKG_LIBS= $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS) -L/usr/local/lib
>> -lsundials_nvecserial -lsundials_cvode -lm
>
>
> Initially, I was thinking of building the library in the package itself so
> that the users don't have to install `sundials` to use the package, but I
> have abandoned that approach (for now) and I am now trying to link to the
> libraries installed on the system. Currently, the package does not do
> anything useful, I am just trying to allocate values to the N_VNew_Serial()
> (a vector type defined by the sundials library), see -
> https://github.com/sn248/Rcppsbmod/blob/pr/1/src/sundials_test.cpp
>
> I have confirmed that /usr/local/lib does contain
> libsundials_nvecserial.0.dylib
>
> The source code for the entire package can be found at -
> https://github.com/sn248/Rcppsbmod/tree/pr/1
>
> In the interest of full disclosure, I have asked a similar question before
> on StackOverflow also -
> http://stackoverflow.com/questions/37819967/compiling-c-in-rcpp-with-external-c-library
>
> and received comments that this is a linking error, not compilation.
>
> To confirm that I have sundials installed and working on my laptop, I
> tried to compile and link an example from the library using the command
>
> gcc -Wall cvRoberts_dns.c -o cvRoberts_dns.exe -I/usr/local/include
> -L/usr/local/lib/ -lsundials_cvode -lsundials_nvecserial -lm
>
> and was able to run it successfully.
>
> Any help in linking successfully to this library in my package would be
> highly appreciated.
> Thanks!
> SN
>
>

	[[alternative HTML version deleted]]


From lucasmation at gmail.com  Mon Jul 11 16:28:04 2016
From: lucasmation at gmail.com (Lucas Ferreira Mation)
Date: Mon, 11 Jul 2016 11:28:04 -0300
Subject: [R-pkg-devel] Advice on in-RAM out of RAM (MonetDB) in data import
	package
Message-ID: <CAA+7z9FuSsfXT132e=W_s-hu2vW94zp2rEc3C3yhivts1NQMcg@mail.gmail.com>

I am writing a package that imports most of the Brazillian socio-economic
micro datasets.
(microdadosBrasil <https://github.com/lucasmation/microdadosBrasil>). The
idea of the package that the data import is very simple, so even users with
verry little R programming knowledge can use the data easily.
Although I would like to have decent performance, the first concern is
usability.

The package imports data to an in memory data.table  object.
I am now trying to implement support for out of memory datasets using
MonetDBLite.

Is there a (non OS dependent) way to predict if a dataset will fit into
memory or not? Ideally the package would ask the computer for the maximum
amount of RAM that R can use. The package would then default to MonetDBLite
if the available RAM was smaller then 3x the in memory size of the dataset.

There will also be an argument for the user to choose himself wether to use
in RAM or out of RAM, but if that argument is not provided the package
would choose for him.

In any case, does that seems reasonable? Or should I force the user to be
aware of this?

Another option would be to default to MonetDB (unless the user explicitly
asks for in-memory data). Is MonetDB performance so good that it would not
make much of a difference?

Another disadvantage of the MonetDB default is that the user will not be
able to run base-R data manipulation commands. So he will have to use dplyr
(which is great and simple) or SQL queries (which few people will know).

reagards
Lucas

	[[alternative HTML version deleted]]


From lucasmation at gmail.com  Mon Jul 11 16:32:46 2016
From: lucasmation at gmail.com (Lucas Ferreira Mation)
Date: Mon, 11 Jul 2016 11:32:46 -0300
Subject: [R-pkg-devel] Advice on in-RAM out of RAM (MonetDB) in data
	import package
In-Reply-To: <CAA+7z9FuSsfXT132e=W_s-hu2vW94zp2rEc3C3yhivts1NQMcg@mail.gmail.com>
References: <CAA+7z9FuSsfXT132e=W_s-hu2vW94zp2rEc3C3yhivts1NQMcg@mail.gmail.com>
Message-ID: <CAA+7z9HRqD2CYcY=g1NOyLpvmWTwU3fRuu++ArTnv=iwao+wfw@mail.gmail.com>

Just a clarification, I am using MonetDBLite for this.

2016-07-11 11:28 GMT-03:00 Lucas Ferreira Mation <lucasmation at gmail.com>:

> I am writing a package that imports most of the Brazillian socio-economic
> micro datasets.
> (microdadosBrasil <https://github.com/lucasmation/microdadosBrasil>). The
> idea of the package that the data import is very simple, so even users with
> verry little R programming knowledge can use the data easily.
> Although I would like to have decent performance, the first concern is
> usability.
>
> The package imports data to an in memory data.table  object.
> I am now trying to implement support for out of memory datasets using
> MonetDBLite.
>
> Is there a (non OS dependent) way to predict if a dataset will fit into
> memory or not? Ideally the package would ask the computer for the maximum
> amount of RAM that R can use. The package would then default to
> MonetDBLite if the available RAM was smaller then 3x the in memory size
> of the dataset.
>
> There will also be an argument for the user to choose himself wether to
> use in RAM or out of RAM, but if that argument is not provided the package
> would choose for him.
>
> In any case, does that seems reasonable? Or should I force the user to be
> aware of this?
>
> Another option would be to default to MonetDB (unless the user explicitly
> asks for in-memory data). Is MonetDB performance so good that it would
> not make much of a difference?
>
> Another disadvantage of the MonetDB default is that the user will not be
> able to run base-R data manipulation commands. So he will have to use dplyr
> (which is great and simple) or SQL queries (which few people will know).
>
> reagards
> Lucas
>

	[[alternative HTML version deleted]]


From S.Ellison at LGCGroup.com  Tue Jul 12 18:47:25 2016
From: S.Ellison at LGCGroup.com (S Ellison)
Date: Tue, 12 Jul 2016 17:47:25 +0100
Subject: [R-pkg-devel] Is S3 class registration essential for CRAN?
Message-ID: <1A8C1289955EF649A09086A153E2672403EB035F61@GBTEDVPEXCMB04.corp.lgc-group.com>

A short question: How necessary is explicit S3 class registration for CRAN submission? 
R-forge's check is giving me a note on this for a handful of methods in a package, and I'm unclear whether it is something that _needs_  to be fixed for CRAN submission by registering all S3 methods, needs to be fixed for _some_, or doesn't need to be changed (the present version on cran is running without apparent issues, but was submitted before the checks expanded to pick this up).

S Ellison





*******************************************************************
This email and any attachments are confidential. Any use...{{dropped:8}}


From edd at debian.org  Tue Jul 12 19:13:33 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Tue, 12 Jul 2016 12:13:33 -0500
Subject: [R-pkg-devel] Is S3 class registration essential for CRAN?
In-Reply-To: <1A8C1289955EF649A09086A153E2672403EB035F61@GBTEDVPEXCMB04.corp.lgc-group.com>
References: <1A8C1289955EF649A09086A153E2672403EB035F61@GBTEDVPEXCMB04.corp.lgc-group.com>
Message-ID: <22405.9533.742960.253325@max.nulle.part>


On 12 July 2016 at 17:47, S Ellison wrote:
| A short question: How necessary is explicit S3 class registration for CRAN submission? 
| R-forge's check is giving me a note on this for a handful of methods in a package, and I'm unclear whether it is something that _needs_  to be fixed for CRAN submission by registering all S3 methods, needs to be fixed for _some_, or doesn't need to be changed (the present version on cran is running without apparent issues, but was submitted before the checks expanded to pick this up).

You are expected to test with the release and the development versions of R
[1], and newer versions tend to only get stricter rather than more lenient.

As for 'current version on CRAN does not have issues': well, yes, the absence
of a time machine comes into play again. Tests that didn't exist at the time
have a tendency to not get triggered.  Rest assurred that the _next_ upload
will however so you are quite right to worry about this.

So without knowing the pecularities of your (unnamed) package: I'd fix it.

Dirk


[1] Using win-builder can be a good trick to get access at the latter.

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From henrik.bengtsson at gmail.com  Wed Jul 13 17:35:43 2016
From: henrik.bengtsson at gmail.com (Henrik Bengtsson)
Date: Wed, 13 Jul 2016 08:35:43 -0700
Subject: [R-pkg-devel] Is S3 class registration essential for CRAN?
In-Reply-To: <22405.9533.742960.253325@max.nulle.part>
References: <1A8C1289955EF649A09086A153E2672403EB035F61@GBTEDVPEXCMB04.corp.lgc-group.com>
	<22405.9533.742960.253325@max.nulle.part>
Message-ID: <CAFDcVCQniGZr8Yjt+3YongaOZy0xk+bXih3-di5NByP_4s256A@mail.gmail.com>

I second Dirk.  Also, from my experience:

A good rule of thumb is that you should fix all NOTEs (i.e. not have
them) when you submit to CRAN.  It's only when you have a really good
reason you could try to convince CRAN that they are there and that
they cannot be fixed easily.  I've got 20+ packages on CRAN and it's
been extremely rare that I ran into a NOTE that I couldn't fix.

Importantly, I'd assume that if your submission has issues (i.e.
ERRORs, WARNINGs or NOTEs), then CRAN needs to look at your package
manually and make a decision and most likely write you an email.  Even
if that would be a 2 min task (but I'd assume it's more) that's lots
of time spent on their end given they get so many submission every
day.  If your submission has all OKs, then it's much more likely that
your package is accepted and on CRAN very quickly (definitely < 24
hours; likely < 12 hours by my experience).  So, aim for all OKs to
save you and CRAN some time.


Registering S3 methods is as simple as specifying

S3method("mtd", "clss")

in the NAMESPACE file (for all your S3 methods).  If you use roxygen2,
this becomes nearly automatic.  It'll also improve the quality of your
package, e.g. make it play better with others.  I would certainly add
these.

Henrik


On Tue, Jul 12, 2016 at 10:13 AM, Dirk Eddelbuettel <edd at debian.org> wrote:
>
> On 12 July 2016 at 17:47, S Ellison wrote:
> | A short question: How necessary is explicit S3 class registration for CRAN submission?
> | R-forge's check is giving me a note on this for a handful of methods in a package, and I'm unclear whether it is something that _needs_  to be fixed for CRAN submission by registering all S3 methods, needs to be fixed for _some_, or doesn't need to be changed (the present version on cran is running without apparent issues, but was submitted before the checks expanded to pick this up).
>
> You are expected to test with the release and the development versions of R
> [1], and newer versions tend to only get stricter rather than more lenient.
>
> As for 'current version on CRAN does not have issues': well, yes, the absence
> of a time machine comes into play again. Tests that didn't exist at the time
> have a tendency to not get triggered.  Rest assurred that the _next_ upload
> will however so you are quite right to worry about this.
>
> So without knowing the pecularities of your (unnamed) package: I'd fix it.
>
> Dirk
>
>
> [1] Using win-builder can be a good trick to get access at the latter.
>
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From Ross.Boylan at ucsf.edu  Wed Jul 13 21:27:37 2016
From: Ross.Boylan at ucsf.edu (Boylan, Ross)
Date: Wed, 13 Jul 2016 19:27:37 +0000
Subject: [R-pkg-devel] relation between vignettes and help files
Message-ID: <F1F13E14A610474196571953929C02090C323601@ex08.net.ucsf.edu>

I have two questions, one substantive and one technical, about the relation between vignettes and help files.  By "help files" I mean the regular .Rd files.

Substantively, to what extent should material be duplicated between the help files and the vignette?  For example, my vignette includes some output summarizing the analysis.  The output has many different kinds of information, and the details about what they mean are in the help for the function generating the output.  Any advice on how much of that information to put in the vignette?.  The vignette could, of course, say to see the help for the function for details.

It seems natural to me  to have the information in both  places, except that doing so invites inconsistencies as the code changes, if not immediately.

The leads to the the technical question: is there a way to provide links to the help from the vignette?  I'm using Sweave.  And, similarly, is there a way to reference the vignettes from the help?  In particular, it seems natural to reference the vignette from the package help.

Thanks.
Ross Boylan

From mark.vanderloo at gmail.com  Wed Jul 13 21:49:16 2016
From: mark.vanderloo at gmail.com (Mark van der Loo)
Date: Wed, 13 Jul 2016 19:49:16 +0000
Subject: [R-pkg-devel] relation between vignettes and help files
In-Reply-To: <F1F13E14A610474196571953929C02090C323601@ex08.net.ucsf.edu>
References: <F1F13E14A610474196571953929C02090C323601@ex08.net.ucsf.edu>
Message-ID: <CAOKDuOidiVsfBjHF-4hnPUXxTaAs3huojEnYZSfx75fLecBPjQ@mail.gmail.com>

Afaik the only way to link to a vignette from the help file is to instruct
the reader to do something like

vignette('intro','mypkg')

On the R command-line.

In general, the Rd files describe the public API of your pkg. Each exported
function should have a help file that ideally can be read and understood in
isolation. The vignettes can provide walk-throughs for tasks that require a
sequence of functions to be called. This helps the user to get around the
package by focusing on tasks.

Although you will probably duplicate a little information, try to focus  on
subject matter in the vignette, while focusing on the technical aspects in
the Rd files.

Hope that helps,
Mark

On Wed, Jul 13, 2016, 21:29 Boylan, Ross <Ross.Boylan at ucsf.edu> wrote:

> I have two questions, one substantive and one technical, about the
> relation between vignettes and help files.  By "help files" I mean the
> regular .Rd files.
>
> Substantively, to what extent should material be duplicated between the
> help files and the vignette?  For example, my vignette includes some output
> summarizing the analysis.  The output has many different kinds of
> information, and the details about what they mean are in the help for the
> function generating the output.  Any advice on how much of that information
> to put in the vignette?.  The vignette could, of course, say to see the
> help for the function for details.
>
> It seems natural to me  to have the information in both  places, except
> that doing so invites inconsistencies as the code changes, if not
> immediately.
>
> The leads to the the technical question: is there a way to provide links
> to the help from the vignette?  I'm using Sweave.  And, similarly, is there
> a way to reference the vignettes from the help?  In particular, it seems
> natural to reference the vignette from the package help.
>
> Thanks.
> Ross Boylan
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>

	[[alternative HTML version deleted]]


From es at enricoschumann.net  Wed Jul 13 22:04:28 2016
From: es at enricoschumann.net (Enrico Schumann)
Date: Wed, 13 Jul 2016 22:04:28 +0200
Subject: [R-pkg-devel] relation between vignettes and help files
In-Reply-To: <F1F13E14A610474196571953929C02090C323601@ex08.net.ucsf.edu>
	(Ross Boylan's message of "Wed, 13 Jul 2016 19:27:37 +0000")
References: <F1F13E14A610474196571953929C02090C323601@ex08.net.ucsf.edu>
Message-ID: <8760s9ticz.fsf@enricoschumann.net>

On Wed, 13 Jul 2016, "Boylan, Ross" <Ross.Boylan at ucsf.edu> writes:

> I have two questions, one substantive and one technical, about the
> relation between vignettes and help files.  By "help files" I mean the
> regular .Rd files.
>
> Substantively, to what extent should material be duplicated between
> the help files and the vignette?  For example, my vignette includes
> some output summarizing the analysis.  The output has many different
> kinds of information, and the details about what they mean are in the
> help for the function generating the output.  Any advice on how much
> of that information to put in the vignette?.  The vignette could, of
> course, say to see the help for the function for details.
>
> It seems natural to me to have the information in both places, except
> that doing so invites inconsistencies as the code changes, if not
> immediately.
>
> The leads to the the technical question: is there a way to provide
> links to the help from the vignette?  I'm using Sweave.  And,
> similarly, is there a way to reference the vignettes from the help?
> In particular, it seems natural to reference the vignette from the
> package help.
>
> Thanks.
> Ross Boylan


I think this was discussed very recently on R-help:

https://stat.ethz.ch/pipermail/r-help/2016-June/439867.html


-- 
Enrico Schumann
Lucerne, Switzerland
http://enricoschumann.net


From murdoch.duncan at gmail.com  Wed Jul 13 22:44:41 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Wed, 13 Jul 2016 16:44:41 -0400
Subject: [R-pkg-devel] relation between vignettes and help files
In-Reply-To: <8760s9ticz.fsf@enricoschumann.net>
References: <F1F13E14A610474196571953929C02090C323601@ex08.net.ucsf.edu>
	<8760s9ticz.fsf@enricoschumann.net>
Message-ID: <23db1d0f-a79b-2565-17c4-07a97cde7f4f@gmail.com>

On 13/07/2016 4:04 PM, Enrico Schumann wrote:
> On Wed, 13 Jul 2016, "Boylan, Ross" <Ross.Boylan at ucsf.edu> writes:
>
>> I have two questions, one substantive and one technical, about the
>> relation between vignettes and help files.  By "help files" I mean the
>> regular .Rd files.
>>
>> Substantively, to what extent should material be duplicated between
>> the help files and the vignette?  For example, my vignette includes
>> some output summarizing the analysis.  The output has many different
>> kinds of information, and the details about what they mean are in the
>> help for the function generating the output.  Any advice on how much
>> of that information to put in the vignette?.  The vignette could, of
>> course, say to see the help for the function for details.
>>
>> It seems natural to me to have the information in both places, except
>> that doing so invites inconsistencies as the code changes, if not
>> immediately.
>>
>> The leads to the the technical question: is there a way to provide
>> links to the help from the vignette?  I'm using Sweave.  And,
>> similarly, is there a way to reference the vignettes from the help?
>> In particular, it seems natural to reference the vignette from the
>> package help.
>>
>> Thanks.
>> Ross Boylan
>
>
> I think this was discussed very recently on R-help:
>
> https://stat.ethz.ch/pipermail/r-help/2016-June/439867.html

I seem to recall that links from PDF files into the help system don't 
work, because those *must* be relative links, and I think PDF files 
don't support relative links.  (It is possible to set up your system so 
you can use absolute links by always running the help system on the same 
port, but you can't count on your users to be doing that.)

So Ross is probably out of luck if he's using Sweave.

Duncan Murdoch


From maechler at stat.math.ethz.ch  Fri Jul 15 14:32:29 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Fri, 15 Jul 2016 14:32:29 +0200
Subject: [R-pkg-devel] relation between vignettes and help files
In-Reply-To: <23db1d0f-a79b-2565-17c4-07a97cde7f4f@gmail.com>
References: <F1F13E14A610474196571953929C02090C323601@ex08.net.ucsf.edu>
	<8760s9ticz.fsf@enricoschumann.net>
	<23db1d0f-a79b-2565-17c4-07a97cde7f4f@gmail.com>
Message-ID: <22408.55261.223535.199878@stat.math.ethz.ch>

>>>>> Duncan Murdoch <murdoch.duncan at gmail.com>
>>>>>     on Wed, 13 Jul 2016 16:44:41 -0400 writes:

    > On 13/07/2016 4:04 PM, Enrico Schumann wrote:
    >> On Wed, 13 Jul 2016, "Boylan, Ross"
    >> <Ross.Boylan at ucsf.edu> writes:
    >> 
    >>> I have two questions, one substantive and one technical,
    >>> about the relation between vignettes and help files.  By
    >>> "help files" I mean the regular .Rd files.
    >>> 
    >>> Substantively, to what extent should material be
    >>> duplicated between the help files and the vignette?  For
    >>> example, my vignette includes some output summarizing
    >>> the analysis.  The output has many different kinds of
    >>> information, and the details about what they mean are in
    >>> the help for the function generating the output.  Any
    >>> advice on how much of that information to put in the
    >>> vignette?.  The vignette could, of course, say to see
    >>> the help for the function for details.
    >>> 
    >>> It seems natural to me to have the information in both
    >>> places, except that doing so invites inconsistencies as
    >>> the code changes, if not immediately.
    >>> 
    >>> The leads to the the technical question: is there a way
    >>> to provide links to the help from the vignette?  I'm
    >>> using Sweave.  And, similarly, is there a way to
    >>> reference the vignettes from the help?  In particular,
    >>> it seems natural to reference the vignette from the
    >>> package help.
    >>> 
    >>> Thanks.  Ross Boylan
    >> 
    >> 
    >> I think this was discussed very recently on R-help:
    >> 
    >> https://stat.ethz.ch/pipermail/r-help/2016-June/439867.html

    > I seem to recall that links from PDF files into the help
    > system don't work, because those *must* be relative links,
    > and I think PDF files don't support relative links.  (It
    > is possible to set up your system so you can use absolute
    > links by always running the help system on the same port,
    > but you can't count on your users to be doing that.)

    > So Ross is probably out of luck if he's using Sweave.

Yes, I think so too (and the above R-help thread ends up slightly wrongly).

It is even worse, isn't it: Nowadays html help pages are (almost)
always created *dynamically* via R's help() or help.start();
For my setup of 1000s of packages in my libraries in .libPaths(),
generating all the html pages is too costly 
[I think Rstudio is now smart and does this in the background
 for its *own* package data base ?? -- I wish we would enable to
 do this easily in base R !]

and I am using (ESS with) "text" help_type, and so these links
to the url in doc/html  would not work for me.

I wonder if we should not think harder about this, and provide a
portable solution.

I do agree that it should be very desirable to have links portably,
in *both* directions between
  our "reference manuals"  ( = the help pages)  and
  our "user's manuals"     ( = the vignettes ).

Martin


From Ross.Boylan at ucsf.edu  Fri Jul 15 19:23:37 2016
From: Ross.Boylan at ucsf.edu (Boylan, Ross)
Date: Fri, 15 Jul 2016 17:23:37 +0000
Subject: [R-pkg-devel] relation between vignettes and help files
In-Reply-To: <22408.55261.223535.199878@stat.math.ethz.ch>
References: <F1F13E14A610474196571953929C02090C323601@ex08.net.ucsf.edu>
	<8760s9ticz.fsf@enricoschumann.net>
	<23db1d0f-a79b-2565-17c4-07a97cde7f4f@gmail.com>,
	<22408.55261.223535.199878@stat.math.ethz.ch>
Message-ID: <F1F13E14A610474196571953929C02090C32C973@ex08.net.ucsf.edu>

One issue with integrating vignettes into the help system is that vignettes are 
more likely to have material (figures, math) that renders poorly or not at all as text.
I also mostly use ESS on terminal rather than graphical interface, and so
like the  plain text version of things.  OTOH, I used Sweave specifically so
I could put math in the vignette.

Does anyone have any thoughts about the substantive division of info between help files and
vignettes?
Ross
________________________________________
From: Martin Maechler [maechler at stat.math.ethz.ch]
Sent: Friday, July 15, 2016 5:32 AM
To: Duncan Murdoch
Cc: Enrico Schumann; Boylan, Ross; r-package-devel at r-project.org
Subject: Re: [R-pkg-devel] relation between vignettes and help files

......
It is even worse, isn't it: Nowadays html help pages are (almost)
always created *dynamically* via R's help() or help.start();
For my setup of 1000s of packages in my libraries in .libPaths(),
generating all the html pages is too costly
[I think Rstudio is now smart and does this in the background
 for its *own* package data base ?? -- I wish we would enable to
 do this easily in base R !]

and I am using (ESS with) "text" help_type, and so these links
to the url in doc/html  would not work for me.

I wonder if we should not think harder about this, and provide a
portable solution.

I do agree that it should be very desirable to have links portably,
in *both* directions between
  our "reference manuals"  ( = the help pages)  and
  our "user's manuals"     ( = the vignettes ).

Martin


From kasperdanielhansen at gmail.com  Fri Jul 15 20:04:02 2016
From: kasperdanielhansen at gmail.com (Kasper Daniel Hansen)
Date: Fri, 15 Jul 2016 14:04:02 -0400
Subject: [R-pkg-devel] relation between vignettes and help files
In-Reply-To: <F1F13E14A610474196571953929C02090C32C973@ex08.net.ucsf.edu>
References: <F1F13E14A610474196571953929C02090C323601@ex08.net.ucsf.edu>
	<8760s9ticz.fsf@enricoschumann.net>
	<23db1d0f-a79b-2565-17c4-07a97cde7f4f@gmail.com>
	<22408.55261.223535.199878@stat.math.ethz.ch>
	<F1F13E14A610474196571953929C02090C32C973@ex08.net.ucsf.edu>
Message-ID: <CAC2h7utr-d7XvXnhAWuzkjtj8c2ighsnfZ7a9T2DPd48sKty6Q@mail.gmail.com>

Well, I think it would be a headache, and suboptimal, to require vignettes
to be renderable as text.  There are several issues including that not all
vignettes have an included "source" file; there are packages with important
vignettes which are only available as PDFs (or HTML).  Also math and plot
rendering.  I don't think this is what Martin was alluding to.

But being able to link between the help files and the vignettes would be
great.  In Bioconductor we have been using vignettes for ages and they
contain a lot of extremely useful information, to the extent that I would
always first look at the vignette and only look at the Rd file for
technical details.

Best,
Kasper



On Fri, Jul 15, 2016 at 1:23 PM, Boylan, Ross <Ross.Boylan at ucsf.edu> wrote:

> One issue with integrating vignettes into the help system is that
> vignettes are
> more likely to have material (figures, math) that renders poorly or not at
> all as text.
> I also mostly use ESS on terminal rather than graphical interface, and so
> like the  plain text version of things.  OTOH, I used Sweave specifically
> so
> I could put math in the vignette.
>
> Does anyone have any thoughts about the substantive division of info
> between help files and
> vignettes?
> Ross
> ________________________________________
> From: Martin Maechler [maechler at stat.math.ethz.ch]
> Sent: Friday, July 15, 2016 5:32 AM
> To: Duncan Murdoch
> Cc: Enrico Schumann; Boylan, Ross; r-package-devel at r-project.org
> Subject: Re: [R-pkg-devel] relation between vignettes and help files
>
> ......
> It is even worse, isn't it: Nowadays html help pages are (almost)
> always created *dynamically* via R's help() or help.start();
> For my setup of 1000s of packages in my libraries in .libPaths(),
> generating all the html pages is too costly
> [I think Rstudio is now smart and does this in the background
>  for its *own* package data base ?? -- I wish we would enable to
>  do this easily in base R !]
>
> and I am using (ESS with) "text" help_type, and so these links
> to the url in doc/html  would not work for me.
>
> I wonder if we should not think harder about this, and provide a
> portable solution.
>
> I do agree that it should be very desirable to have links portably,
> in *both* directions between
>   our "reference manuals"  ( = the help pages)  and
>   our "user's manuals"     ( = the vignettes ).
>
> Martin
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>

	[[alternative HTML version deleted]]


From thomas.wainwright at noaa.gov  Fri Jul 15 21:02:34 2016
From: thomas.wainwright at noaa.gov (Tom Wainwright)
Date: Fri, 15 Jul 2016 12:02:34 -0700
Subject: [R-pkg-devel] relation between vignettes and help files
In-Reply-To: <F1F13E14A610474196571953929C02090C32C973@ex08.net.ucsf.edu>
References: <F1F13E14A610474196571953929C02090C323601@ex08.net.ucsf.edu>
	<8760s9ticz.fsf@enricoschumann.net>
	<23db1d0f-a79b-2565-17c4-07a97cde7f4f@gmail.com>
	<22408.55261.223535.199878@stat.math.ethz.ch>
	<F1F13E14A610474196571953929C02090C32C973@ex08.net.ucsf.edu>
Message-ID: <CAPw7dZGD2ZQ5JjBzr4LUq5MNgDGtf91B6n86emWb7FzoJ_+zww@mail.gmail.com>

>From a user perspective, I think a distinction needs to be made between
three things: help files, demos, and vignettes. I expect the help file for
functions to explain the API and (briefly) the methods implemented (with
references) and to have a few terse but useful examples in the Examples
section that can at least help a user understand the basic calls and main
options. Vignettes and demos are aimed more at the package rather than
function level; personally, I find vignettes more useful than demos.
Vignettes should provide more extensive use-case instances with explanation
of how and why the package might be applied. Demos tend to provide more
extensive sets of examples; I use them mostly for complicated graphics
(images, plotmath, etc.) where I can scan through a set of demos and find
some code that is close to what I want.

As far as linking from help to vignettes, for CRAN packages all the
vignettes appear on the web, and I would think it would be easy and
reliable to include html links to the vignettes on CRAN (assuming CRAN
doesn't mess about with web file hierarchies). This has a couple minor
issues I can think of: It won't help those working without internet access,
and it would link to vignettes for the current package version, not the
installed version. I suspect those problems are rare, and in those cases
users can poke around in the install directories to find what they need.
The reverse linking (vignettes to help) won't really work that way, as the
Reference Manuals on CRAN are in single PDF files not indexed by function,
but anyone clever enough to work through a vignette in R should already
know how to find their local help pages.

 Tom

On Fri, Jul 15, 2016 at 10:23 AM, Boylan, Ross <Ross.Boylan at ucsf.edu> wrote:

> One issue with integrating vignettes into the help system is that
> vignettes are
> more likely to have material (figures, math) that renders poorly or not at
> all as text.
> I also mostly use ESS on terminal rather than graphical interface, and so
> like the  plain text version of things.  OTOH, I used Sweave specifically
> so
> I could put math in the vignette.
>
> Does anyone have any thoughts about the substantive division of info
> between help files and
> vignettes?
> Ross
> ________________________________________
> From: Martin Maechler [maechler at stat.math.ethz.ch]
> Sent: Friday, July 15, 2016 5:32 AM
> To: Duncan Murdoch
> Cc: Enrico Schumann; Boylan, Ross; r-package-devel at r-project.org
> Subject: Re: [R-pkg-devel] relation between vignettes and help files
>
> ......
> It is even worse, isn't it: Nowadays html help pages are (almost)
> always created *dynamically* via R's help() or help.start();
> For my setup of 1000s of packages in my libraries in .libPaths(),
> generating all the html pages is too costly
> [I think Rstudio is now smart and does this in the background
>  for its *own* package data base ?? -- I wish we would enable to
>  do this easily in base R !]
>
> and I am using (ESS with) "text" help_type, and so these links
> to the url in doc/html  would not work for me.
>
> I wonder if we should not think harder about this, and provide a
> portable solution.
>
> I do agree that it should be very desirable to have links portably,
> in *both* directions between
>   our "reference manuals"  ( = the help pages)  and
>   our "user's manuals"     ( = the vignettes ).
>
> Martin
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>

	[[alternative HTML version deleted]]


From murdoch.duncan at gmail.com  Fri Jul 15 21:27:28 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Fri, 15 Jul 2016 15:27:28 -0400
Subject: [R-pkg-devel] relation between vignettes and help files
In-Reply-To: <22408.55261.223535.199878@stat.math.ethz.ch>
References: <F1F13E14A610474196571953929C02090C323601@ex08.net.ucsf.edu>
	<8760s9ticz.fsf@enricoschumann.net>
	<23db1d0f-a79b-2565-17c4-07a97cde7f4f@gmail.com>
	<22408.55261.223535.199878@stat.math.ethz.ch>
Message-ID: <156dad9c-9e46-5eb9-5102-3d1a36769c46@gmail.com>

On 15/07/2016 8:32 AM, Martin Maechler wrote:
>>>>>> Duncan Murdoch <murdoch.duncan at gmail.com>
>>>>>>     on Wed, 13 Jul 2016 16:44:41 -0400 writes:
>
>     > On 13/07/2016 4:04 PM, Enrico Schumann wrote:
>     >> On Wed, 13 Jul 2016, "Boylan, Ross"
>     >> <Ross.Boylan at ucsf.edu> writes:
>     >>
>     >>> I have two questions, one substantive and one technical,
>     >>> about the relation between vignettes and help files.  By
>     >>> "help files" I mean the regular .Rd files.
>     >>>
>     >>> Substantively, to what extent should material be
>     >>> duplicated between the help files and the vignette?  For
>     >>> example, my vignette includes some output summarizing
>     >>> the analysis.  The output has many different kinds of
>     >>> information, and the details about what they mean are in
>     >>> the help for the function generating the output.  Any
>     >>> advice on how much of that information to put in the
>     >>> vignette?.  The vignette could, of course, say to see
>     >>> the help for the function for details.
>     >>>
>     >>> It seems natural to me to have the information in both
>     >>> places, except that doing so invites inconsistencies as
>     >>> the code changes, if not immediately.
>     >>>
>     >>> The leads to the the technical question: is there a way
>     >>> to provide links to the help from the vignette?  I'm
>     >>> using Sweave.  And, similarly, is there a way to
>     >>> reference the vignettes from the help?  In particular,
>     >>> it seems natural to reference the vignette from the
>     >>> package help.
>     >>>
>     >>> Thanks.  Ross Boylan
>     >>
>     >>
>     >> I think this was discussed very recently on R-help:
>     >>
>     >> https://stat.ethz.ch/pipermail/r-help/2016-June/439867.html
>
>     > I seem to recall that links from PDF files into the help
>     > system don't work, because those *must* be relative links,
>     > and I think PDF files don't support relative links.  (It
>     > is possible to set up your system so you can use absolute
>     > links by always running the help system on the same port,
>     > but you can't count on your users to be doing that.)
>
>     > So Ross is probably out of luck if he's using Sweave.
>
> Yes, I think so too (and the above R-help thread ends up slightly wrongly).
>
> It is even worse, isn't it: Nowadays html help pages are (almost)
> always created *dynamically* via R's help() or help.start();
> For my setup of 1000s of packages in my libraries in .libPaths(),
> generating all the html pages is too costly
> [I think Rstudio is now smart and does this in the background
>  for its *own* package data base ?? -- I wish we would enable to
>  do this easily in base R !
>
> and I am using (ESS with) "text" help_type, and so these links
> to the url in doc/html  would not work for me.

I think this is an ESS problem, not an R problem.  If R is running, the 
relative links will work.  The help system is designed to be served by 
R, not served from static web pages.  There are ways to get the static 
pages to more or less work, but they'll never work as well as the real 
system.

Duncan Murdoch

>
> I wonder if we should not think harder about this, and provide a
> portable solution.
>
> I do agree that it should be very desirable to have links portably,
> in *both* directions between
>   our "reference manuals"  ( = the help pages)  and
>   our "user's manuals"     ( = the vignettes ).
>
> Martin
>


From murdoch.duncan at gmail.com  Fri Jul 15 21:31:39 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Fri, 15 Jul 2016 15:31:39 -0400
Subject: [R-pkg-devel] relation between vignettes and help files
In-Reply-To: <CAPw7dZGD2ZQ5JjBzr4LUq5MNgDGtf91B6n86emWb7FzoJ_+zww@mail.gmail.com>
References: <F1F13E14A610474196571953929C02090C323601@ex08.net.ucsf.edu>
	<8760s9ticz.fsf@enricoschumann.net>
	<23db1d0f-a79b-2565-17c4-07a97cde7f4f@gmail.com>
	<22408.55261.223535.199878@stat.math.ethz.ch>
	<F1F13E14A610474196571953929C02090C32C973@ex08.net.ucsf.edu>
	<CAPw7dZGD2ZQ5JjBzr4LUq5MNgDGtf91B6n86emWb7FzoJ_+zww@mail.gmail.com>
Message-ID: <89cc6c88-d209-42b9-66bb-81ccf9e869f9@gmail.com>

On 15/07/2016 3:02 PM, Tom Wainwright wrote:
>>From a user perspective, I think a distinction needs to be made between
> three things: help files, demos, and vignettes. I expect the help file for
> functions to explain the API and (briefly) the methods implemented (with
> references) and to have a few terse but useful examples in the Examples
> section that can at least help a user understand the basic calls and main
> options. Vignettes and demos are aimed more at the package rather than
> function level; personally, I find vignettes more useful than demos.
> Vignettes should provide more extensive use-case instances with explanation
> of how and why the package might be applied. Demos tend to provide more
> extensive sets of examples; I use them mostly for complicated graphics
> (images, plotmath, etc.) where I can scan through a set of demos and find
> some code that is close to what I want.
>
> As far as linking from help to vignettes, for CRAN packages all the
> vignettes appear on the web, and I would think it would be easy and
> reliable to include html links to the vignettes on CRAN (assuming CRAN
> doesn't mess about with web file hierarchies). This has a couple minor
> issues I can think of: It won't help those working without internet access,
> and it would link to vignettes for the current package version, not the
> installed version.

You can already link from help pages to vignettes, and the links don't 
rely on CRAN, they're all local. It's the links in the other direction 
that only work for particular kinds of vignettes (the ones rendered in 
HTML).

Duncan Murdoch


I suspect those problems are rare, and in those cases
> users can poke around in the install directories to find what they need.
> The reverse linking (vignettes to help) won't really work that way, as the
> Reference Manuals on CRAN are in single PDF files not indexed by function,
> but anyone clever enough to work through a vignette in R should already
> know how to find their local help pages.
>
>  Tom
>
> On Fri, Jul 15, 2016 at 10:23 AM, Boylan, Ross <Ross.Boylan at ucsf.edu> wrote:
>
>> One issue with integrating vignettes into the help system is that
>> vignettes are
>> more likely to have material (figures, math) that renders poorly or not at
>> all as text.
>> I also mostly use ESS on terminal rather than graphical interface, and so
>> like the  plain text version of things.  OTOH, I used Sweave specifically
>> so
>> I could put math in the vignette.
>>
>> Does anyone have any thoughts about the substantive division of info
>> between help files and
>> vignettes?
>> Ross
>> ________________________________________
>> From: Martin Maechler [maechler at stat.math.ethz.ch]
>> Sent: Friday, July 15, 2016 5:32 AM
>> To: Duncan Murdoch
>> Cc: Enrico Schumann; Boylan, Ross; r-package-devel at r-project.org
>> Subject: Re: [R-pkg-devel] relation between vignettes and help files
>>
>> ......
>> It is even worse, isn't it: Nowadays html help pages are (almost)
>> always created *dynamically* via R's help() or help.start();
>> For my setup of 1000s of packages in my libraries in .libPaths(),
>> generating all the html pages is too costly
>> [I think Rstudio is now smart and does this in the background
>>  for its *own* package data base ?? -- I wish we would enable to
>>  do this easily in base R !]
>>
>> and I am using (ESS with) "text" help_type, and so these links
>> to the url in doc/html  would not work for me.
>>
>> I wonder if we should not think harder about this, and provide a
>> portable solution.
>>
>> I do agree that it should be very desirable to have links portably,
>> in *both* directions between
>>   our "reference manuals"  ( = the help pages)  and
>>   our "user's manuals"     ( = the vignettes ).
>>
>> Martin
>>
>> ______________________________________________
>> R-package-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>


From maechler at stat.math.ethz.ch  Mon Jul 18 17:07:55 2016
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Mon, 18 Jul 2016 17:07:55 +0200
Subject: [R-pkg-devel] relation between vignettes and help files
In-Reply-To: <F1F13E14A610474196571953929C02090C32C973@ex08.net.ucsf.edu>
References: <F1F13E14A610474196571953929C02090C323601@ex08.net.ucsf.edu>
	<8760s9ticz.fsf@enricoschumann.net>
	<23db1d0f-a79b-2565-17c4-07a97cde7f4f@gmail.com>
	<22408.55261.223535.199878@stat.math.ethz.ch>
	<F1F13E14A610474196571953929C02090C32C973@ex08.net.ucsf.edu>
Message-ID: <22412.61643.921849.687845@stat.math.ethz.ch>

>>>>> Boylan, Ross <Ross.Boylan at ucsf.edu>
>>>>>     on Fri, 15 Jul 2016 17:23:37 +0000 writes:

    > One issue with integrating vignettes into the help system is that vignettes are 
    > more likely to have material (figures, math) that renders poorly or not at all as text.
    > I also mostly use ESS on terminal rather than graphical interface, and so
    > like the  plain text version of things.  OTOH, I used Sweave specifically so
    > I could put math in the vignette.

Emacs has been rendering graphics and pdf  for several years
now, and there are also several web browsing modes that we (ESS
maintainers) have considered using in the past.

But really I'm not interested so much in the potential ESS
problems, which *are* solvable and as Duncan says correctly are
not R problems.

Rather I did want to get back to the original issue of
facilitating and officially supporting links in both directions 
	     R (installed package) Help  <--> R (installed package) vignettes

which I think you also want to continue talking about:

    > Does anyone have any thoughts about the substantive division of info between help files and
    > vignettes?

    > Ross
    > ________________________________________
    > From: Martin Maechler [maechler at stat.math.ethz.ch]
    > Sent: Friday, July 15, 2016 5:32 AM
    > To: Duncan Murdoch
    > Cc: Enrico Schumann; Boylan, Ross; r-package-devel at r-project.org
    > Subject: Re: [R-pkg-devel] relation between vignettes and help files

    > ......
    > It is even worse, isn't it: Nowadays html help pages are (almost)
    > always created *dynamically* via R's help() or help.start();
    > For my setup of 1000s of packages in my libraries in .libPaths(),
    > generating all the html pages is too costly
    > [I think Rstudio is now smart and does this in the background
    > for its *own* package data base ?? -- I wish we would enable to
    > do this easily in base R !]

    > and I am using (ESS with) "text" help_type, and so these links
    > to the url in doc/html  would not work for me.

    > I wonder if we should not think harder about this, and provide a
    > portable solution.

    > I do agree that it should be very desirable to have links portably,
    > in *both* directions between
    > our "reference manuals"  ( = the help pages)  and
    > our "user's manuals"     ( = the vignettes ).

    > Martin


From bill at denney.ws  Wed Jul 20 20:42:51 2016
From: bill at denney.ws (Bill Denney)
Date: Wed, 20 Jul 2016 14:42:51 -0400
Subject: [R-pkg-devel] Warning that are Unintentionally OS-Specific (Maybe
	Bug in warning?)
Message-ID: <7d5ce76c-e385-f7bd-f7f4-1fa7a484f6a1@denney.ws>

Hi,

I'm developing the PKNCA package, and I've got an odd difference between 
warning behavior on different operating systems that I can't figure out.

When I run the following code on Windows 10 (with R 3.3.0), I get the 
following warning:

library(PKNCA)
source("https://raw.githubusercontent.com/billdenney/pknca/master/tests/testthat/generate.data.R")
tmpconc <- generate.conc(2, 1, 0:24)
tmpconc$conc <- 0
tmpdose <- generate.dose(tmpconc)
myconc <- PKNCAconc(tmpconc, conc~time|treatment+ID)
mydose <- PKNCAdose(tmpdose, dose~time|treatment+ID)
mydata <- PKNCAdata(myconc, mydose)
myresult <- pk.nca(mydata)

Warning messages:
1: In pk.calc.half.life(conc = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  :
   Too few points for half-life calculation (min.hl.points=3 with only 0 
points)
2: In pk.calc.half.life(conc = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  :
   Too few points for half-life calculation (min.hl.points=3 with only 0 
points)

When I run the code on Linux (Ubuntu 16.04 with R 3.3.1), I do not get a 
warning.  When I run the code on Linux after "options(warn=1)", I get 
the warning.  I have confirmed that the same code path is taken in both 
Windows and Linux by simply inserting a print statement next to the 
warning.  The actual warning code is:

     warning(sprintf(
       "Too few points for half-life calculation (min.hl.points=%g with 
only %g points)",
       min.hl.points, nrow(dfK)))

This platform inconsistency is causing issues with my package because 
the package expects the warnings, and the user should know about the 
warnings.  I've got test cases expecting the warnings, and they fail 
everywhere but Windows 
(https://cran.r-project.org/web/checks/check_results_PKNCA.html).

Does anyone have an idea why warnings may behave differently on Windows 
compared to non-Windows platforms?  Is this a bug in R somewhere?  (I've 
not been able to make a simpler example that triggers the issue, 
unfortunately.)

Thanks,

Bill


From francois.michonneau at gmail.com  Wed Jul 20 21:06:07 2016
From: francois.michonneau at gmail.com (=?UTF-8?Q?Fran=C3=A7ois_Michonneau?=)
Date: Wed, 20 Jul 2016 15:06:07 -0400
Subject: [R-pkg-devel] Warning that are Unintentionally OS-Specific
 (Maybe Bug in warning?)
In-Reply-To: <7d5ce76c-e385-f7bd-f7f4-1fa7a484f6a1@denney.ws>
References: <7d5ce76c-e385-f7bd-f7f4-1fa7a484f6a1@denney.ws>
Message-ID: <CAKL30wWWmc_t4P7WK=Wx8E0Bc9JFvG+F3XgVNw9+NsmoHJ0GmA@mail.gmail.com>

Hi Bill,

  The problem is not with the warning() function but with your if()
test that triggers the warning. It probably has something to do with
slight differences in rounding. I suggest you use debug() or browser()
on each platform to see why your condition is TRUE or FALSE.

  Cheers,
  -- Fran?ois

On Wed, Jul 20, 2016 at 2:42 PM, Bill Denney <bill at denney.ws> wrote:
> Hi,
>
> I'm developing the PKNCA package, and I've got an odd difference between
> warning behavior on different operating systems that I can't figure out.
>
> When I run the following code on Windows 10 (with R 3.3.0), I get the
> following warning:
>
> library(PKNCA)
> source("https://raw.githubusercontent.com/billdenney/pknca/master/tests/testthat/generate.data.R")
> tmpconc <- generate.conc(2, 1, 0:24)
> tmpconc$conc <- 0
> tmpdose <- generate.dose(tmpconc)
> myconc <- PKNCAconc(tmpconc, conc~time|treatment+ID)
> mydose <- PKNCAdose(tmpdose, dose~time|treatment+ID)
> mydata <- PKNCAdata(myconc, mydose)
> myresult <- pk.nca(mydata)
>
> Warning messages:
> 1: In pk.calc.half.life(conc = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  :
>   Too few points for half-life calculation (min.hl.points=3 with only 0
> points)
> 2: In pk.calc.half.life(conc = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  :
>   Too few points for half-life calculation (min.hl.points=3 with only 0
> points)
>
> When I run the code on Linux (Ubuntu 16.04 with R 3.3.1), I do not get a
> warning.  When I run the code on Linux after "options(warn=1)", I get the
> warning.  I have confirmed that the same code path is taken in both Windows
> and Linux by simply inserting a print statement next to the warning.  The
> actual warning code is:
>
>     warning(sprintf(
>       "Too few points for half-life calculation (min.hl.points=%g with only
> %g points)",
>       min.hl.points, nrow(dfK)))
>
> This platform inconsistency is causing issues with my package because the
> package expects the warnings, and the user should know about the warnings.
> I've got test cases expecting the warnings, and they fail everywhere but
> Windows (https://cran.r-project.org/web/checks/check_results_PKNCA.html).
>
> Does anyone have an idea why warnings may behave differently on Windows
> compared to non-Windows platforms?  Is this a bug in R somewhere?  (I've not
> been able to make a simpler example that triggers the issue, unfortunately.)
>
> Thanks,
>
> Bill
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From bill at denney.ws  Wed Jul 20 21:13:58 2016
From: bill at denney.ws (Bill Denney)
Date: Wed, 20 Jul 2016 15:13:58 -0400
Subject: [R-pkg-devel] Warning that are Unintentionally OS-Specific
 (Maybe Bug in warning?)
In-Reply-To: <CAKL30wWWmc_t4P7WK=Wx8E0Bc9JFvG+F3XgVNw9+NsmoHJ0GmA@mail.gmail.com>
References: <7d5ce76c-e385-f7bd-f7f4-1fa7a484f6a1@denney.ws>
	<CAKL30wWWmc_t4P7WK=Wx8E0Bc9JFvG+F3XgVNw9+NsmoHJ0GmA@mail.gmail.com>
Message-ID: <60347810-c879-6e28-8d65-11f34c5b182d@denney.ws>

Hi Fran?ois,

I thought that was the issue, too, but I confirmed it wasn't that by 
adding a print statement right above the warning in my code. The print 
statement displays the message even when the warning (one line below 
with no conditionals between) doesn't show anything.

Also, why would it behave differently when options(warn=1) is set rather 
than the default of options(warn=0)?

Thanks,

Bill


On 7/20/2016 3:06 PM, Fran?ois Michonneau wrote:
> Hi Bill,
>
>    The problem is not with the warning() function but with your if()
> test that triggers the warning. It probably has something to do with
> slight differences in rounding. I suggest you use debug() or browser()
> on each platform to see why your condition is TRUE or FALSE.
>
>    Cheers,
>    -- Fran?ois
>
> On Wed, Jul 20, 2016 at 2:42 PM, Bill Denney <bill at denney.ws> wrote:
>> Hi,
>>
>> I'm developing the PKNCA package, and I've got an odd difference between
>> warning behavior on different operating systems that I can't figure out.
>>
>> When I run the following code on Windows 10 (with R 3.3.0), I get the
>> following warning:
>>
>> library(PKNCA)
>> source("https://raw.githubusercontent.com/billdenney/pknca/master/tests/testthat/generate.data.R")
>> tmpconc <- generate.conc(2, 1, 0:24)
>> tmpconc$conc <- 0
>> tmpdose <- generate.dose(tmpconc)
>> myconc <- PKNCAconc(tmpconc, conc~time|treatment+ID)
>> mydose <- PKNCAdose(tmpdose, dose~time|treatment+ID)
>> mydata <- PKNCAdata(myconc, mydose)
>> myresult <- pk.nca(mydata)
>>
>> Warning messages:
>> 1: In pk.calc.half.life(conc = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  :
>>    Too few points for half-life calculation (min.hl.points=3 with only 0
>> points)
>> 2: In pk.calc.half.life(conc = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  :
>>    Too few points for half-life calculation (min.hl.points=3 with only 0
>> points)
>>
>> When I run the code on Linux (Ubuntu 16.04 with R 3.3.1), I do not get a
>> warning.  When I run the code on Linux after "options(warn=1)", I get the
>> warning.  I have confirmed that the same code path is taken in both Windows
>> and Linux by simply inserting a print statement next to the warning.  The
>> actual warning code is:
>>
>>      warning(sprintf(
>>        "Too few points for half-life calculation (min.hl.points=%g with only
>> %g points)",
>>        min.hl.points, nrow(dfK)))
>>
>> This platform inconsistency is causing issues with my package because the
>> package expects the warnings, and the user should know about the warnings.
>> I've got test cases expecting the warnings, and they fail everywhere but
>> Windows (https://cran.r-project.org/web/checks/check_results_PKNCA.html).
>>
>> Does anyone have an idea why warnings may behave differently on Windows
>> compared to non-Windows platforms?  Is this a bug in R somewhere?  (I've not
>> been able to make a simpler example that triggers the issue, unfortunately.)
>>
>> Thanks,
>>
>> Bill
>>
>> ______________________________________________
>> R-package-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From maxime.turgeon at mail.mcgill.ca  Wed Jul 20 21:22:37 2016
From: maxime.turgeon at mail.mcgill.ca (MTurgeon)
Date: Wed, 20 Jul 2016 13:22:37 -0600
Subject: [R-pkg-devel] Warning that are Unintentionally OS-Specific
 (Maybe Bug in warning?)
In-Reply-To: <60347810-c879-6e28-8d65-11f34c5b182d@denney.ws>
References: <7d5ce76c-e385-f7bd-f7f4-1fa7a484f6a1@denney.ws>
	<CAKL30wWWmc_t4P7WK=Wx8E0Bc9JFvG+F3XgVNw9+NsmoHJ0GmA@mail.gmail.com>
	<60347810-c879-6e28-8d65-11f34c5b182d@denney.ws>
Message-ID: <578FCF7D.4000302@mail.mcgill.ca>

Hi Bill,

This is just a hypothesis, but it could have something to do with the 
fact that you're using parallel::mclapply inside your function pk.nca? 
This would certainly explain why you have different behaviours on 
Windows and Unix systems. It would also explain why you get a different 
behaviour between options(warn=0) and options(warn=1), since the master 
receives the exceptions at different times in both cases.

Max

On 16-07-20 01:13 PM, Bill Denney wrote:
> Hi Fran?ois,
>
> I thought that was the issue, too, but I confirmed it wasn't that by 
> adding a print statement right above the warning in my code. The print 
> statement displays the message even when the warning (one line below 
> with no conditionals between) doesn't show anything.
>
> Also, why would it behave differently when options(warn=1) is set 
> rather than the default of options(warn=0)?
>
> Thanks,
>
> Bill
>
>
> On 7/20/2016 3:06 PM, Fran?ois Michonneau wrote:
>> Hi Bill,
>>
>>    The problem is not with the warning() function but with your if()
>> test that triggers the warning. It probably has something to do with
>> slight differences in rounding. I suggest you use debug() or browser()
>> on each platform to see why your condition is TRUE or FALSE.
>>
>>    Cheers,
>>    -- Fran?ois
>>
>> On Wed, Jul 20, 2016 at 2:42 PM, Bill Denney <bill at denney.ws> wrote:
>>> Hi,
>>>
>>> I'm developing the PKNCA package, and I've got an odd difference 
>>> between
>>> warning behavior on different operating systems that I can't figure 
>>> out.
>>>
>>> When I run the following code on Windows 10 (with R 3.3.0), I get the
>>> following warning:
>>>
>>> library(PKNCA)
>>> source("https://raw.githubusercontent.com/billdenney/pknca/master/tests/testthat/generate.data.R") 
>>>
>>> tmpconc <- generate.conc(2, 1, 0:24)
>>> tmpconc$conc <- 0
>>> tmpdose <- generate.dose(tmpconc)
>>> myconc <- PKNCAconc(tmpconc, conc~time|treatment+ID)
>>> mydose <- PKNCAdose(tmpdose, dose~time|treatment+ID)
>>> mydata <- PKNCAdata(myconc, mydose)
>>> myresult <- pk.nca(mydata)
>>>
>>> Warning messages:
>>> 1: In pk.calc.half.life(conc = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  :
>>>    Too few points for half-life calculation (min.hl.points=3 with 
>>> only 0
>>> points)
>>> 2: In pk.calc.half.life(conc = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  :
>>>    Too few points for half-life calculation (min.hl.points=3 with 
>>> only 0
>>> points)
>>>
>>> When I run the code on Linux (Ubuntu 16.04 with R 3.3.1), I do not 
>>> get a
>>> warning.  When I run the code on Linux after "options(warn=1)", I 
>>> get the
>>> warning.  I have confirmed that the same code path is taken in both 
>>> Windows
>>> and Linux by simply inserting a print statement next to the 
>>> warning.  The
>>> actual warning code is:
>>>
>>>      warning(sprintf(
>>>        "Too few points for half-life calculation (min.hl.points=%g 
>>> with only
>>> %g points)",
>>>        min.hl.points, nrow(dfK)))
>>>
>>> This platform inconsistency is causing issues with my package 
>>> because the
>>> package expects the warnings, and the user should know about the 
>>> warnings.
>>> I've got test cases expecting the warnings, and they fail everywhere 
>>> but
>>> Windows 
>>> (https://cran.r-project.org/web/checks/check_results_PKNCA.html).
>>>
>>> Does anyone have an idea why warnings may behave differently on Windows
>>> compared to non-Windows platforms?  Is this a bug in R somewhere?  
>>> (I've not
>>> been able to make a simpler example that triggers the issue, 
>>> unfortunately.)
>>>
>>> Thanks,
>>>
>>> Bill
>>>
>>> ______________________________________________
>>> R-package-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel

-- 
-----------------------------------------------------------------

Maxime Turgeon, PhD candidate

Department of Epidemiology, Biostatistics and Occupational Health
McGill University


From bbolker at gmail.com  Wed Jul 20 21:40:28 2016
From: bbolker at gmail.com (Ben Bolker)
Date: Wed, 20 Jul 2016 15:40:28 -0400
Subject: [R-pkg-devel] Warning that are Unintentionally OS-Specific
 (Maybe Bug in warning?)
In-Reply-To: <60347810-c879-6e28-8d65-11f34c5b182d@denney.ws>
References: <7d5ce76c-e385-f7bd-f7f4-1fa7a484f6a1@denney.ws>
	<CAKL30wWWmc_t4P7WK=Wx8E0Bc9JFvG+F3XgVNw9+NsmoHJ0GmA@mail.gmail.com>
	<60347810-c879-6e28-8d65-11f34c5b182d@denney.ws>
Message-ID: <578FD3AC.9080801@gmail.com>


   Digging into the code (specifically by setting
options(warn=2,error=recover), I see that the warning is happening
during this call:

    tmp.results <- parallel::mclapply(X = conc.dose, FUN =
pk.nca.intervals,
    intervals = data$intervals, options = data$options)

Since mclapply "relies on forking and hence is not available on Windows
unless ?mc.cores = 1?" (from ?mclapply), I can imagine that it's *not*
actually being run in parallel on Windows.  It also wouldn't surprise me
at all if it took a little bit of care to make sure that warnings were
correctly passed back from code chunks run in parallel.

  This StackOverflow post seems to ask the same question as yours:

http://stackoverflow.com/questions/21486658/warnings-suppressed-with-mclapply-in-r

  based on the discussion there, it seems as though it might be worth
bringing this up on r-devel/submitting a bug report ...

   Ben Bolker




On 16-07-20 03:13 PM, Bill Denney wrote:
> Hi Fran?ois,
> 
> I thought that was the issue, too, but I confirmed it wasn't that by
> adding a print statement right above the warning in my code. The print
> statement displays the message even when the warning (one line below
> with no conditionals between) doesn't show anything.
> 
> Also, why would it behave differently when options(warn=1) is set rather
> than the default of options(warn=0)?
> 
> Thanks,
> 
> Bill
> 
> 
> On 7/20/2016 3:06 PM, Fran?ois Michonneau wrote:
>> Hi Bill,
>>
>>    The problem is not with the warning() function but with your if()
>> test that triggers the warning. It probably has something to do with
>> slight differences in rounding. I suggest you use debug() or browser()
>> on each platform to see why your condition is TRUE or FALSE.
>>
>>    Cheers,
>>    -- Fran?ois
>>
>> On Wed, Jul 20, 2016 at 2:42 PM, Bill Denney <bill at denney.ws> wrote:
>>> Hi,
>>>
>>> I'm developing the PKNCA package, and I've got an odd difference between
>>> warning behavior on different operating systems that I can't figure out.
>>>
>>> When I run the following code on Windows 10 (with R 3.3.0), I get the
>>> following warning:
>>>
>>> library(PKNCA)
>>> source("https://raw.githubusercontent.com/billdenney/pknca/master/tests/testthat/generate.data.R")
>>>
>>> tmpconc <- generate.conc(2, 1, 0:24)
>>> tmpconc$conc <- 0
>>> tmpdose <- generate.dose(tmpconc)
>>> myconc <- PKNCAconc(tmpconc, conc~time|treatment+ID)
>>> mydose <- PKNCAdose(tmpdose, dose~time|treatment+ID)
>>> mydata <- PKNCAdata(myconc, mydose)
>>> myresult <- pk.nca(mydata)
>>>
>>> Warning messages:
>>> 1: In pk.calc.half.life(conc = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  :
>>>    Too few points for half-life calculation (min.hl.points=3 with only 0
>>> points)
>>> 2: In pk.calc.half.life(conc = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  :
>>>    Too few points for half-life calculation (min.hl.points=3 with only 0
>>> points)
>>>
>>> When I run the code on Linux (Ubuntu 16.04 with R 3.3.1), I do not get a
>>> warning.  When I run the code on Linux after "options(warn=1)", I get
>>> the
>>> warning.  I have confirmed that the same code path is taken in both
>>> Windows
>>> and Linux by simply inserting a print statement next to the warning. 
>>> The
>>> actual warning code is:
>>>
>>>      warning(sprintf(
>>>        "Too few points for half-life calculation (min.hl.points=%g
>>> with only
>>> %g points)",
>>>        min.hl.points, nrow(dfK)))
>>>
>>> This platform inconsistency is causing issues with my package because
>>> the
>>> package expects the warnings, and the user should know about the
>>> warnings.
>>> I've got test cases expecting the warnings, and they fail everywhere but
>>> Windows
>>> (https://cran.r-project.org/web/checks/check_results_PKNCA.html).
>>>
>>> Does anyone have an idea why warnings may behave differently on Windows
>>> compared to non-Windows platforms?  Is this a bug in R somewhere? 
>>> (I've not
>>> been able to make a simpler example that triggers the issue,
>>> unfortunately.)
>>>
>>> Thanks,
>>>
>>> Bill
>>>
>>> ______________________________________________
>>> R-package-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
> 
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From bill at denney.ws  Wed Jul 20 22:00:00 2016
From: bill at denney.ws (Bill Denney)
Date: Wed, 20 Jul 2016 16:00:00 -0400
Subject: [R-pkg-devel] Warning that are Unintentionally OS-Specific
 (Maybe Bug in warning?)
In-Reply-To: <578FD3AC.9080801@gmail.com>
References: <7d5ce76c-e385-f7bd-f7f4-1fa7a484f6a1@denney.ws>
	<CAKL30wWWmc_t4P7WK=Wx8E0Bc9JFvG+F3XgVNw9+NsmoHJ0GmA@mail.gmail.com>
	<60347810-c879-6e28-8d65-11f34c5b182d@denney.ws>
	<578FD3AC.9080801@gmail.com>
Message-ID: <fdc8516e-e61b-d5aa-8fd6-cb061f2d57e1@denney.ws>

Max and Ben got the right answer.  It is a bug with mclapply dropping 
warnings.  I confirmed by a quick change to the code to just use lapply, 
and the warnings appeared as expected.

I've submitted the bug at 
https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=17122

Thanks for the help!

Bill


On 7/20/2016 3:40 PM, Ben Bolker wrote:
>     Digging into the code (specifically by setting
> options(warn=2,error=recover), I see that the warning is happening
> during this call:
>
>      tmp.results <- parallel::mclapply(X = conc.dose, FUN =
> pk.nca.intervals,
>      intervals = data$intervals, options = data$options)
>
> Since mclapply "relies on forking and hence is not available on Windows
> unless ?mc.cores = 1?" (from ?mclapply), I can imagine that it's *not*
> actually being run in parallel on Windows.  It also wouldn't surprise me
> at all if it took a little bit of care to make sure that warnings were
> correctly passed back from code chunks run in parallel.
>
>    This StackOverflow post seems to ask the same question as yours:
>
> http://stackoverflow.com/questions/21486658/warnings-suppressed-with-mclapply-in-r
>
>    based on the discussion there, it seems as though it might be worth
> bringing this up on r-devel/submitting a bug report ...
>
>     Ben Bolker
>
>
>
>
> On 16-07-20 03:13 PM, Bill Denney wrote:
>> Hi Fran?ois,
>>
>> I thought that was the issue, too, but I confirmed it wasn't that by
>> adding a print statement right above the warning in my code. The print
>> statement displays the message even when the warning (one line below
>> with no conditionals between) doesn't show anything.
>>
>> Also, why would it behave differently when options(warn=1) is set rather
>> than the default of options(warn=0)?
>>
>> Thanks,
>>
>> Bill
>>
>>
>> On 7/20/2016 3:06 PM, Fran?ois Michonneau wrote:
>>> Hi Bill,
>>>
>>>     The problem is not with the warning() function but with your if()
>>> test that triggers the warning. It probably has something to do with
>>> slight differences in rounding. I suggest you use debug() or browser()
>>> on each platform to see why your condition is TRUE or FALSE.
>>>
>>>     Cheers,
>>>     -- Fran?ois
>>>
>>> On Wed, Jul 20, 2016 at 2:42 PM, Bill Denney <bill at denney.ws> wrote:
>>>> Hi,
>>>>
>>>> I'm developing the PKNCA package, and I've got an odd difference between
>>>> warning behavior on different operating systems that I can't figure out.
>>>>
>>>> When I run the following code on Windows 10 (with R 3.3.0), I get the
>>>> following warning:
>>>>
>>>> library(PKNCA)
>>>> source("https://raw.githubusercontent.com/billdenney/pknca/master/tests/testthat/generate.data.R")
>>>>
>>>> tmpconc <- generate.conc(2, 1, 0:24)
>>>> tmpconc$conc <- 0
>>>> tmpdose <- generate.dose(tmpconc)
>>>> myconc <- PKNCAconc(tmpconc, conc~time|treatment+ID)
>>>> mydose <- PKNCAdose(tmpdose, dose~time|treatment+ID)
>>>> mydata <- PKNCAdata(myconc, mydose)
>>>> myresult <- pk.nca(mydata)
>>>>
>>>> Warning messages:
>>>> 1: In pk.calc.half.life(conc = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  :
>>>>     Too few points for half-life calculation (min.hl.points=3 with only 0
>>>> points)
>>>> 2: In pk.calc.half.life(conc = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  :
>>>>     Too few points for half-life calculation (min.hl.points=3 with only 0
>>>> points)
>>>>
>>>> When I run the code on Linux (Ubuntu 16.04 with R 3.3.1), I do not get a
>>>> warning.  When I run the code on Linux after "options(warn=1)", I get
>>>> the
>>>> warning.  I have confirmed that the same code path is taken in both
>>>> Windows
>>>> and Linux by simply inserting a print statement next to the warning.
>>>> The
>>>> actual warning code is:
>>>>
>>>>       warning(sprintf(
>>>>         "Too few points for half-life calculation (min.hl.points=%g
>>>> with only
>>>> %g points)",
>>>>         min.hl.points, nrow(dfK)))
>>>>
>>>> This platform inconsistency is causing issues with my package because
>>>> the
>>>> package expects the warnings, and the user should know about the
>>>> warnings.
>>>> I've got test cases expecting the warnings, and they fail everywhere but
>>>> Windows
>>>> (https://cran.r-project.org/web/checks/check_results_PKNCA.html).
>>>>
>>>> Does anyone have an idea why warnings may behave differently on Windows
>>>> compared to non-Windows platforms?  Is this a bug in R somewhere?
>>>> (I've not
>>>> been able to make a simpler example that triggers the issue,
>>>> unfortunately.)
>>>>
>>>> Thanks,
>>>>
>>>> Bill
>>>>
>>>> ______________________________________________
>>>> R-package-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>> ______________________________________________
>> R-package-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From r.turner at auckland.ac.nz  Thu Jul 21 23:48:55 2016
From: r.turner at auckland.ac.nz (Rolf Turner)
Date: Fri, 22 Jul 2016 09:48:55 +1200
Subject: [R-pkg-devel] Possible mis-spelled words ...
Message-ID: <555cf156-259b-c1df-c2ec-639b578dc2de@auckland.ac.nz>


I just had a revision of a package built by win-builder, as a way of 
exposing it to a rigorous check before uploading it to CRAN.

The 00check.log contained the note:

 > Possibly mis-spelled words in DESCRIPTION:
 >   Delaunay (4:8, 10:29)
 >   Voronoi (4:46, 11:5)
 >   triangulations (12:28)

The spellings are, as far as I can tell correct.  Is there a way of 
telling the package checker that these spellings are OK?

I have a very vague recollection of having seen something about this 
topic on this mailing list, but a search of the archives turned up 
nothing.  Nor could I find anything about "mis-spellings" in "Writing R 
Extensions".

I don't like leaving a package in a state in which the package checker 
produces NOTES.  Is there anything that I can do about this one?   Other 
than remove the offending words, which I am reluctant to do.

cheers,

Rolf Turner

-- 
Technical Editor ANZJS
Department of Statistics
University of Auckland
Phone: +64-9-373-7599 ext. 88276


From bbolker at gmail.com  Fri Jul 22 00:00:19 2016
From: bbolker at gmail.com (Ben Bolker)
Date: Thu, 21 Jul 2016 18:00:19 -0400
Subject: [R-pkg-devel] Possible mis-spelled words ...
In-Reply-To: <555cf156-259b-c1df-c2ec-639b578dc2de@auckland.ac.nz>
References: <555cf156-259b-c1df-c2ec-639b578dc2de@auckland.ac.nz>
Message-ID: <579145F3.6040705@gmail.com>


Previous conversation on r-devel:

https://stat.ethz.ch/pipermail/r-devel/2014-December/070237.html

Martin M?chler suggests that a patch to R-devel would be welcome:

> I agree that some customization possibility would be great here.
> Maybe it'll be sufficient to allow a short list of about a dozen
> words in the DESCRIPTION itself, e.g., with an item
>
>   Extrawords: rowMedians, rowRanks


On 16-07-21 05:48 PM, Rolf Turner wrote:
> 
> I just had a revision of a package built by win-builder, as a way of
> exposing it to a rigorous check before uploading it to CRAN.
> 
> The 00check.log contained the note:
> 
>> Possibly mis-spelled words in DESCRIPTION:
>>   Delaunay (4:8, 10:29)
>>   Voronoi (4:46, 11:5)
>>   triangulations (12:28)
> 
> The spellings are, as far as I can tell correct.  Is there a way of
> telling the package checker that these spellings are OK?
> 
> I have a very vague recollection of having seen something about this
> topic on this mailing list, but a search of the archives turned up
> nothing.  Nor could I find anything about "mis-spellings" in "Writing R
> Extensions".
> 
> I don't like leaving a package in a state in which the package checker
> produces NOTES.  Is there anything that I can do about this one?   Other
> than remove the offending words, which I am reluctant to do.
> 
> cheers,
> 
> Rolf Turner
>


From r.turner at auckland.ac.nz  Fri Jul 22 00:27:40 2016
From: r.turner at auckland.ac.nz (Rolf Turner)
Date: Fri, 22 Jul 2016 10:27:40 +1200
Subject: [R-pkg-devel] Possible mis-spelled words ...
In-Reply-To: <579145F3.6040705@gmail.com>
References: <555cf156-259b-c1df-c2ec-639b578dc2de@auckland.ac.nz>
	<579145F3.6040705@gmail.com>
Message-ID: <1226a225-9d31-c566-d523-a69f45322108@auckland.ac.nz>

On 22/07/16 10:00, Ben Bolker wrote:
>
> Previous conversation on r-devel:
>
> https://stat.ethz.ch/pipermail/r-devel/2014-December/070237.html
>
> Martin M?chler suggests that a patch to R-devel would be welcome:
>
>> I agree that some customization possibility would be great here.
>> Maybe it'll be sufficient to allow a short list of about a dozen
>> words in the DESCRIPTION itself, e.g., with an item
>>
>>   Extrawords: rowMedians, rowRanks

Thanks Ben.  It would appear that no such patch has been forthcoming, so 
I guess that I will have to live with the "NOTE" produced, for now.  And 
hope that it doesn't trip up the acceptance of my package!

cheers,

Rolf

--
Technical Editor ANZJS
Department of Statistics
University of Auckland
Phone: +64-9-373-7599 ext. 88276


From murdoch.duncan at gmail.com  Fri Jul 22 00:34:16 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Thu, 21 Jul 2016 18:34:16 -0400
Subject: [R-pkg-devel] Possible mis-spelled words ...
In-Reply-To: <555cf156-259b-c1df-c2ec-639b578dc2de@auckland.ac.nz>
References: <555cf156-259b-c1df-c2ec-639b578dc2de@auckland.ac.nz>
Message-ID: <986c4d81-37d0-108e-0839-72b4f3667bdc@gmail.com>

On 21/07/2016 5:48 PM, Rolf Turner wrote:
>
> I just had a revision of a package built by win-builder, as a way of
> exposing it to a rigorous check before uploading it to CRAN.
>
> The 00check.log contained the note:
>
>  > Possibly mis-spelled words in DESCRIPTION:
>  >   Delaunay (4:8, 10:29)
>  >   Voronoi (4:46, 11:5)
>  >   triangulations (12:28)
>
> The spellings are, as far as I can tell correct.  Is there a way of
> telling the package checker that these spellings are OK?

You can put them in single quotes, and the spell checker won't check 
them.  Of course, that would make your DESCRIPTION look like crap.

You'll just have to throw yourself on the mercy of the CRAN judges.

Duncan Murdoch

>
> I have a very vague recollection of having seen something about this
> topic on this mailing list, but a search of the archives turned up
> nothing.  Nor could I find anything about "mis-spellings" in "Writing R
> Extensions".
>
> I don't like leaving a package in a state in which the package checker
> produces NOTES.  Is there anything that I can do about this one?   Other
> than remove the offending words, which I am reluctant to do.
>
> cheers,
>
> Rolf Turner
>


From ligges at statistik.tu-dortmund.de  Fri Jul 22 00:37:41 2016
From: ligges at statistik.tu-dortmund.de (Uwe Ligges)
Date: Fri, 22 Jul 2016 00:37:41 +0200
Subject: [R-pkg-devel] Possible mis-spelled words ...
In-Reply-To: <986c4d81-37d0-108e-0839-72b4f3667bdc@gmail.com>
References: <555cf156-259b-c1df-c2ec-639b578dc2de@auckland.ac.nz>
	<986c4d81-37d0-108e-0839-72b4f3667bdc@gmail.com>
Message-ID: <e7e0eb1d-7fe9-3b4e-513c-ac1a2f51e96a@statistik.tu-dortmund.de>

On 22.07.2016 00:34, Duncan Murdoch wrote:
> On 21/07/2016 5:48 PM, Rolf Turner wrote:
>>
>> I just had a revision of a package built by win-builder, as a way of
>> exposing it to a rigorous check before uploading it to CRAN.
>>
>> The 00check.log contained the note:
>>
>>  > Possibly mis-spelled words in DESCRIPTION:
>>  >   Delaunay (4:8, 10:29)
>>  >   Voronoi (4:46, 11:5)
>>  >   triangulations (12:28)
>>
>> The spellings are, as far as I can tell correct.  Is there a way of
>> telling the package checker that these spellings are OK?
>
> You can put them in single quotes, and the spell checker won't check
> them.  Of course, that would make your DESCRIPTION look like crap.

Indeed, the idea is to have software names in single quotes etc., see 
WRE, but names of persons should be fine as they are.


> You'll just have to throw yourself on the mercy of the CRAN judges.

Indeed.


And let me point out that patches are still welcome....

Best,
Uwe Ligges



> Duncan Murdoch
>
>>
>> I have a very vague recollection of having seen something about this
>> topic on this mailing list, but a search of the archives turned up
>> nothing.  Nor could I find anything about "mis-spellings" in "Writing R
>> Extensions".
>>
>> I don't like leaving a package in a state in which the package checker
>> produces NOTES.  Is there anything that I can do about this one?   Other
>> than remove the offending words, which I am reluctant to do.
>>
>> cheers,
>>
>> Rolf Turner
>>
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From r.turner at auckland.ac.nz  Fri Jul 22 00:39:12 2016
From: r.turner at auckland.ac.nz (Rolf Turner)
Date: Fri, 22 Jul 2016 10:39:12 +1200
Subject: [R-pkg-devel] Possible mis-spelled words ...
In-Reply-To: <986c4d81-37d0-108e-0839-72b4f3667bdc@gmail.com>
References: <555cf156-259b-c1df-c2ec-639b578dc2de@auckland.ac.nz>
	<986c4d81-37d0-108e-0839-72b4f3667bdc@gmail.com>
Message-ID: <9a1d19ec-3ebc-4934-d6c4-a7b6965543b5@auckland.ac.nz>

On 22/07/16 10:34, Duncan Murdoch wrote:
> On 21/07/2016 5:48 PM, Rolf Turner wrote:
>>
>> I just had a revision of a package built by win-builder, as a way of
>> exposing it to a rigorous check before uploading it to CRAN.
>>
>> The 00check.log contained the note:
>>
>>  > Possibly mis-spelled words in DESCRIPTION:
>>  >   Delaunay (4:8, 10:29)
>>  >   Voronoi (4:46, 11:5)
>>  >   triangulations (12:28)
>>
>> The spellings are, as far as I can tell correct.  Is there a way of
>> telling the package checker that these spellings are OK?
>
> You can put them in single quotes, and the spell checker won't check
> them.  Of course, that would make your DESCRIPTION look like crap.
>
> You'll just have to throw yourself on the mercy of the CRAN judges.

Thanks Duncan.  May the judges be merciful! :-)

cheers,

Rolf

-- 
Technical Editor ANZJS
Department of Statistics
University of Auckland
Phone: +64-9-373-7599 ext. 88276


From r.turner at auckland.ac.nz  Fri Jul 22 00:48:24 2016
From: r.turner at auckland.ac.nz (Rolf Turner)
Date: Fri, 22 Jul 2016 10:48:24 +1200
Subject: [R-pkg-devel] Possible mis-spelled words ...
In-Reply-To: <e7e0eb1d-7fe9-3b4e-513c-ac1a2f51e96a@statistik.tu-dortmund.de>
References: <555cf156-259b-c1df-c2ec-639b578dc2de@auckland.ac.nz>
	<986c4d81-37d0-108e-0839-72b4f3667bdc@gmail.com>
	<e7e0eb1d-7fe9-3b4e-513c-ac1a2f51e96a@statistik.tu-dortmund.de>
Message-ID: <1b3f62a1-6776-352e-01d2-522007743123@auckland.ac.nz>

On 22/07/16 10:37, Uwe Ligges wrote:
> On 22.07.2016 00:34, Duncan Murdoch wrote:
>> On 21/07/2016 5:48 PM, Rolf Turner wrote:
>>>
>>> I just had a revision of a package built by win-builder, as a way of
>>> exposing it to a rigorous check before uploading it to CRAN.
>>>
>>> The 00check.log contained the note:
>>>
>>>  > Possibly mis-spelled words in DESCRIPTION:
>>>  >   Delaunay (4:8, 10:29)
>>>  >   Voronoi (4:46, 11:5)
>>>  >   triangulations (12:28)
>>>
>>> The spellings are, as far as I can tell correct.  Is there a way of
>>> telling the package checker that these spellings are OK?
>>
>> You can put them in single quotes, and the spell checker won't check
>> them.  Of course, that would make your DESCRIPTION look like crap.
>
> Indeed, the idea is to have software names in single quotes etc., see
> WRE, but names of persons should be fine as they are.

Well "Delaunay" and "Voronoi" are person's names, nicht wahr?  But they 
seem not to be fine.  Not sure why the checker objects to 
"triangulations" --- but so does the "spell" utility on my Linux box, 
although it happily accepts the singular "triangulation".

<SNIP>

> And let me point out that patches are still welcome....

I would offer to provide a patch, but this is beyond my realm of competence.

cheers,

Rolf

-- 
Technical Editor ANZJS
Department of Statistics
University of Auckland
Phone: +64-9-373-7599 ext. 88276


From ligges at statistik.tu-dortmund.de  Fri Jul 22 00:50:08 2016
From: ligges at statistik.tu-dortmund.de (Uwe Ligges)
Date: Fri, 22 Jul 2016 00:50:08 +0200
Subject: [R-pkg-devel] Possible mis-spelled words ...
In-Reply-To: <1b3f62a1-6776-352e-01d2-522007743123@auckland.ac.nz>
References: <555cf156-259b-c1df-c2ec-639b578dc2de@auckland.ac.nz>
	<986c4d81-37d0-108e-0839-72b4f3667bdc@gmail.com>
	<e7e0eb1d-7fe9-3b4e-513c-ac1a2f51e96a@statistik.tu-dortmund.de>
	<1b3f62a1-6776-352e-01d2-522007743123@auckland.ac.nz>
Message-ID: <65a1fe24-a0a1-c9e9-5ae7-a44b53628423@statistik.tu-dortmund.de>



On 22.07.2016 00:48, Rolf Turner wrote:
> On 22/07/16 10:37, Uwe Ligges wrote:
>> On 22.07.2016 00:34, Duncan Murdoch wrote:
>>> On 21/07/2016 5:48 PM, Rolf Turner wrote:
>>>>
>>>> I just had a revision of a package built by win-builder, as a way of
>>>> exposing it to a rigorous check before uploading it to CRAN.
>>>>
>>>> The 00check.log contained the note:
>>>>
>>>>  > Possibly mis-spelled words in DESCRIPTION:
>>>>  >   Delaunay (4:8, 10:29)
>>>>  >   Voronoi (4:46, 11:5)
>>>>  >   triangulations (12:28)
>>>>
>>>> The spellings are, as far as I can tell correct.  Is there a way of
>>>> telling the package checker that these spellings are OK?
>>>
>>> You can put them in single quotes, and the spell checker won't check
>>> them.  Of course, that would make your DESCRIPTION look like crap.
>>
>> Indeed, the idea is to have software names in single quotes etc., see
>> WRE, but names of persons should be fine as they are.
>
> Well "Delaunay" and "Voronoi" are person's names, nicht wahr?

Yes, they are fine, but false positives. We have to live with false 
positives in these are manually inspected oin incoming on CRAN.

Best,
Uwe


> But they
> seem not to be fine.  Not sure why the checker objects to
> "triangulations" --- but so does the "spell" utility on my Linux box,
> although it happily accepts the singular "triangulation".
>
> <SNIP>
>
>> And let me point out that patches are still welcome....
>
> I would offer to provide a patch, but this is beyond my realm of
> competence.
>
> cheers,
>
> Rolf
>


From drjimlemon at gmail.com  Fri Jul 22 00:50:51 2016
From: drjimlemon at gmail.com (Jim Lemon)
Date: Fri, 22 Jul 2016 08:50:51 +1000
Subject: [R-pkg-devel] Possible mis-spelled words ...
In-Reply-To: <9a1d19ec-3ebc-4934-d6c4-a7b6965543b5@auckland.ac.nz>
References: <555cf156-259b-c1df-c2ec-639b578dc2de@auckland.ac.nz>
	<986c4d81-37d0-108e-0839-72b4f3667bdc@gmail.com>
	<9a1d19ec-3ebc-4934-d6c4-a7b6965543b5@auckland.ac.nz>
Message-ID: <CA+8X3fVsBHWkmQrs+wr2RFLUHRfhNj2FawPwxVot=Xim74woAQ@mail.gmail.com>

Hi all,
I had a quick look through the tools package, but was unable to find
the function that checks the DESCRIPTION file. From the look of the
functions I did examine, it looks like there will be a call somewhere
to a spell checker for DESCRIPTION. As I notice a lot of spelling
mistakes in the help files, spell checking is probably not done for
most files (or maintainers ignore the notes). Perhaps an argument to
turn off spell checking (--nospell) might solve the problem as
misspelling of a crucial word would throw an error regardless.

Jim


On Fri, Jul 22, 2016 at 8:39 AM, Rolf Turner <r.turner at auckland.ac.nz> wrote:
> On 22/07/16 10:34, Duncan Murdoch wrote:
>>
>> On 21/07/2016 5:48 PM, Rolf Turner wrote:
>>>
>>>
>>> I just had a revision of a package built by win-builder, as a way of
>>> exposing it to a rigorous check before uploading it to CRAN.
>>>
>>> The 00check.log contained the note:
>>>
>>>  > Possibly mis-spelled words in DESCRIPTION:
>>>  >   Delaunay (4:8, 10:29)
>>>  >   Voronoi (4:46, 11:5)
>>>  >   triangulations (12:28)
>>>
>>> The spellings are, as far as I can tell correct.  Is there a way of
>>> telling the package checker that these spellings are OK?
>>
>>
>> You can put them in single quotes, and the spell checker won't check
>> them.  Of course, that would make your DESCRIPTION look like crap.
>>
>> You'll just have to throw yourself on the mercy of the CRAN judges.
>
>
> Thanks Duncan.  May the judges be merciful! :-)
>
> cheers,
>
> Rolf
>
> --
> Technical Editor ANZJS
> Department of Statistics
> University of Auckland
> Phone: +64-9-373-7599 ext. 88276
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From murdoch.duncan at gmail.com  Fri Jul 22 01:52:37 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Thu, 21 Jul 2016 19:52:37 -0400
Subject: [R-pkg-devel] Possible mis-spelled words ...
In-Reply-To: <CA+8X3fVsBHWkmQrs+wr2RFLUHRfhNj2FawPwxVot=Xim74woAQ@mail.gmail.com>
References: <555cf156-259b-c1df-c2ec-639b578dc2de@auckland.ac.nz>
	<986c4d81-37d0-108e-0839-72b4f3667bdc@gmail.com>
	<9a1d19ec-3ebc-4934-d6c4-a7b6965543b5@auckland.ac.nz>
	<CA+8X3fVsBHWkmQrs+wr2RFLUHRfhNj2FawPwxVot=Xim74woAQ@mail.gmail.com>
Message-ID: <c7b42077-0221-5484-ddda-9fe7244b3c83@gmail.com>

On 21/07/2016 6:50 PM, Jim Lemon wrote:
> Hi all,
> I had a quick look through the tools package, but was unable to find
> the function that checks the DESCRIPTION file.

src/library/tools/R/QC.R near line 6600.


 From the look of the
> functions I did examine, it looks like there will be a call somewhere
> to a spell checker for DESCRIPTION. As I notice a lot of spelling
> mistakes in the help files, spell checking is probably not done for
> most files (or maintainers ignore the notes). Perhaps an argument to
> turn off spell checking (--nospell) might solve the problem as
> misspelling of a crucial word would throw an error regardless.

The ?aspell help topic shows you how to check your own .Rd files.  CRAN 
doesn't do those checks.  If you want to turn off the checks on your own 
DESCRIPTION file, set the environment variable

_R_CHECK_CRAN_INCOMING_USE_ASPELL_

to FALSE.  But if you do that and let real spelling errors slip through, 
the judges won't be merciful.

Duncan Murdoch

>
> Jim
>
>
> On Fri, Jul 22, 2016 at 8:39 AM, Rolf Turner <r.turner at auckland.ac.nz> wrote:
>> On 22/07/16 10:34, Duncan Murdoch wrote:
>>>
>>> On 21/07/2016 5:48 PM, Rolf Turner wrote:
>>>>
>>>>
>>>> I just had a revision of a package built by win-builder, as a way of
>>>> exposing it to a rigorous check before uploading it to CRAN.
>>>>
>>>> The 00check.log contained the note:
>>>>
>>>>  > Possibly mis-spelled words in DESCRIPTION:
>>>>  >   Delaunay (4:8, 10:29)
>>>>  >   Voronoi (4:46, 11:5)
>>>>  >   triangulations (12:28)
>>>>
>>>> The spellings are, as far as I can tell correct.  Is there a way of
>>>> telling the package checker that these spellings are OK?
>>>
>>>
>>> You can put them in single quotes, and the spell checker won't check
>>> them.  Of course, that would make your DESCRIPTION look like crap.
>>>
>>> You'll just have to throw yourself on the mercy of the CRAN judges.
>>
>>
>> Thanks Duncan.  May the judges be merciful! :-)
>>
>> cheers,
>>
>> Rolf
>>
>> --
>> Technical Editor ANZJS
>> Department of Statistics
>> University of Auckland
>> Phone: +64-9-373-7599 ext. 88276
>>
>> ______________________________________________
>> R-package-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From profjcnash at gmail.com  Sat Jul 23 05:01:10 2016
From: profjcnash at gmail.com (ProfJCNash)
Date: Fri, 22 Jul 2016 23:01:10 -0400
Subject: [R-pkg-devel] duplicate function during build
Message-ID: <0e2f2728-4582-7264-73ed-bf307d76888b@gmail.com>

In trying to rationalize some files in a package I'm working on, I
copied a function from one file to another, but forgot to change the
name of one of them. It turns out the name of the file containing the
"old" function was later in collation sequence than the one I was
planning to be the "new" one. To debug some issues, I put some print()
and cat() statements in the "new" file, but after building the package,
they weren't there. Turns out the "old" function got installed, as might
be expected if files processed in order. Debugging this took about 2
hours of slightly weird effort with 2 machines and 3 OS distributions
before I realized the problem. It's fairly obvious that I should expect
issues in this case, but not so clear how to detect the source of the
problem.

Question: Has anyone created a script to catch such duplicate functions
from different files during build? I think a warning message that there
are duplicate functions could save some time and effort. Maybe it's
already there, but I saw no obvious message. In this case, I'm only
working in R.

I've found build.R in the R tarball, which is where I suspect such a
check should go, and I'm willing to prepare a patch when I figure out
how this should be done. However, it seems worth asking if anyone has
needed to do this before. I've already done some searching, but the
results seem to pick up quite different posts than I need.

Cheers, JN


From sven.templer at gmail.com  Sat Jul 23 08:09:21 2016
From: sven.templer at gmail.com (Sven E. Templer)
Date: Sat, 23 Jul 2016 08:09:21 +0200
Subject: [R-pkg-devel] duplicate function during build
In-Reply-To: <0e2f2728-4582-7264-73ed-bf307d76888b@gmail.com>
References: <0e2f2728-4582-7264-73ed-bf307d76888b@gmail.com>
Message-ID: <56D129A0-71A1-4996-B397-C79D2E0C03E5@gmail.com>

Not during build, but before, you could run in a bash from the package source root:

$ awk '/function/{print $1}' R/* | uniq -d

To find the files, use:

$ grep <name> R/*

Best wishes,

Sven

> On 23 Jul 2016, at 05:01, ProfJCNash <profjcnash at gmail.com> wrote:
> 
> In trying to rationalize some files in a package I'm working on, I
> copied a function from one file to another, but forgot to change the
> name of one of them. It turns out the name of the file containing the
> "old" function was later in collation sequence than the one I was
> planning to be the "new" one. To debug some issues, I put some print()
> and cat() statements in the "new" file, but after building the package,
> they weren't there. Turns out the "old" function got installed, as might
> be expected if files processed in order. Debugging this took about 2
> hours of slightly weird effort with 2 machines and 3 OS distributions
> before I realized the problem. It's fairly obvious that I should expect
> issues in this case, but not so clear how to detect the source of the
> problem.
> 
> Question: Has anyone created a script to catch such duplicate functions
> from different files during build? I think a warning message that there
> are duplicate functions could save some time and effort. Maybe it's
> already there, but I saw no obvious message. In this case, I'm only
> working in R.
> 
> I've found build.R in the R tarball, which is where I suspect such a
> check should go, and I'm willing to prepare a patch when I figure out
> how this should be done. However, it seems worth asking if anyone has
> needed to do this before. I've already done some searching, but the
> results seem to pick up quite different posts than I need.
> 
> Cheers, JN
> 
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From h.wickham at gmail.com  Sat Jul 23 16:17:16 2016
From: h.wickham at gmail.com (Hadley Wickham)
Date: Sat, 23 Jul 2016 09:17:16 -0500
Subject: [R-pkg-devel] duplicate function during build
In-Reply-To: <0e2f2728-4582-7264-73ed-bf307d76888b@gmail.com>
References: <0e2f2728-4582-7264-73ed-bf307d76888b@gmail.com>
Message-ID: <CABdHhvF3_z_pPg5ZxzN9z5GELpCKNaLo8HWBP_vpDASaLt_ADA@mail.gmail.com>

I think this sort of meta problem is best solved with svn/git because you
can easily see if the changes you think you made align with the changes you
actually made. Learning svn or git is a lot of work, but the payoff is
worth it.

Hadley

On Friday, July 22, 2016, ProfJCNash <profjcnash at gmail.com> wrote:

> In trying to rationalize some files in a package I'm working on, I
> copied a function from one file to another, but forgot to change the
> name of one of them. It turns out the name of the file containing the
> "old" function was later in collation sequence than the one I was
> planning to be the "new" one. To debug some issues, I put some print()
> and cat() statements in the "new" file, but after building the package,
> they weren't there. Turns out the "old" function got installed, as might
> be expected if files processed in order. Debugging this took about 2
> hours of slightly weird effort with 2 machines and 3 OS distributions
> before I realized the problem. It's fairly obvious that I should expect
> issues in this case, but not so clear how to detect the source of the
> problem.
>
> Question: Has anyone created a script to catch such duplicate functions
> from different files during build? I think a warning message that there
> are duplicate functions could save some time and effort. Maybe it's
> already there, but I saw no obvious message. In this case, I'm only
> working in R.
>
> I've found build.R in the R tarball, which is where I suspect such a
> check should go, and I'm willing to prepare a patch when I figure out
> how this should be done. However, it seems worth asking if anyone has
> needed to do this before. I've already done some searching, but the
> results seem to pick up quite different posts than I need.
>
> Cheers, JN
>
> ______________________________________________
> R-package-devel at r-project.org <javascript:;> mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>


-- 
http://hadley.nz

	[[alternative HTML version deleted]]


From sven.templer at gmail.com  Sat Jul 23 18:04:48 2016
From: sven.templer at gmail.com (Sven E. Templer)
Date: Sat, 23 Jul 2016 18:04:48 +0200
Subject: [R-pkg-devel] duplicate function during build
In-Reply-To: <CABdHhvF3_z_pPg5ZxzN9z5GELpCKNaLo8HWBP_vpDASaLt_ADA@mail.gmail.com>
References: <0e2f2728-4582-7264-73ed-bf307d76888b@gmail.com>
	<CABdHhvF3_z_pPg5ZxzN9z5GELpCKNaLo8HWBP_vpDASaLt_ADA@mail.gmail.com>
Message-ID: <5CBE9554-66B8-4361-A15B-E6B4C27B481A@gmail.com>

Despite it might help, learning/using git is not tackling this specific problem, I suggest code that does:

sed -e 's/^[\ \t]*//' -e 's/#.*//' R/* | awk '/function/{print $1}' | sort | uniq -d

or

https://gist.github.com/setempler/7fcf2a3a737ce1293e0623d2bb8e08ed
(any comments welcome)

If one knows coding R, it might be more productive developing a tiny tool for that, instead of learning a new (and complex) one (as git).

Nevertheless, git is great!

Best wishes,

Sven

---

web:     www.templer.se
twitter: @setempler
> On 23 Jul 2016, at 16:17, Hadley Wickham <h.wickham at gmail.com> wrote:
> 
> I think this sort of meta problem is best solved with svn/git because you
> can easily see if the changes you think you made align with the changes you
> actually made. Learning svn or git is a lot of work, but the payoff is
> worth it.
> 
> Hadley
> 
> On Friday, July 22, 2016, ProfJCNash <profjcnash at gmail.com> wrote:
> 
>> In trying to rationalize some files in a package I'm working on, I
>> copied a function from one file to another, but forgot to change the
>> name of one of them. It turns out the name of the file containing the
>> "old" function was later in collation sequence than the one I was
>> planning to be the "new" one. To debug some issues, I put some print()
>> and cat() statements in the "new" file, but after building the package,
>> they weren't there. Turns out the "old" function got installed, as might
>> be expected if files processed in order. Debugging this took about 2
>> hours of slightly weird effort with 2 machines and 3 OS distributions
>> before I realized the problem. It's fairly obvious that I should expect
>> issues in this case, but not so clear how to detect the source of the
>> problem.
>> 
>> Question: Has anyone created a script to catch such duplicate functions
>> from different files during build? I think a warning message that there
>> are duplicate functions could save some time and effort. Maybe it's
>> already there, but I saw no obvious message. In this case, I'm only
>> working in R.
>> 
>> I've found build.R in the R tarball, which is where I suspect such a
>> check should go, and I'm willing to prepare a patch when I figure out
>> how this should be done. However, it seems worth asking if anyone has
>> needed to do this before. I've already done some searching, but the
>> results seem to pick up quite different posts than I need.
>> 
>> Cheers, JN
>> 
>> ______________________________________________
>> R-package-devel at r-project.org <javascript:;> mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>> 
> 
> 
> -- 
> http://hadley.nz
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From pgilbert902 at gmail.com  Sat Jul 23 19:16:15 2016
From: pgilbert902 at gmail.com (Paul Gilbert)
Date: Sat, 23 Jul 2016 13:16:15 -0400
Subject: [R-pkg-devel] duplicate function during build
In-Reply-To: <CABdHhvF3_z_pPg5ZxzN9z5GELpCKNaLo8HWBP_vpDASaLt_ADA@mail.gmail.com>
References: <0e2f2728-4582-7264-73ed-bf307d76888b@gmail.com>
	<CABdHhvF3_z_pPg5ZxzN9z5GELpCKNaLo8HWBP_vpDASaLt_ADA@mail.gmail.com>
Message-ID: <1caef674-a796-382c-2a65-a95416fdcaff@gmail.com>

Hadley

My initial reflex reaction was svn/git too, but then I could not see how 
to use either to identify the problem John had. If you have a good 
svn/git command for identifying duplicate functions could you please 
post it, I am curious. (BTW, John does use svn, and possibly git too.)

Thanks,
Paul

On 07/23/2016 10:17 AM, Hadley Wickham wrote:
> I think this sort of meta problem is best solved with svn/git because you
> can easily see if the changes you think you made align with the changes you
> actually made. Learning svn or git is a lot of work, but the payoff is
> worth it.
>
> Hadley
>
> On Friday, July 22, 2016, ProfJCNash <profjcnash at gmail.com> wrote:
>
>> In trying to rationalize some files in a package I'm working on, I
>> copied a function from one file to another, but forgot to change the
>> name of one of them. It turns out the name of the file containing the
>> "old" function was later in collation sequence than the one I was
>> planning to be the "new" one. To debug some issues, I put some print()
>> and cat() statements in the "new" file, but after building the package,
>> they weren't there. Turns out the "old" function got installed, as might
>> be expected if files processed in order. Debugging this took about 2
>> hours of slightly weird effort with 2 machines and 3 OS distributions
>> before I realized the problem. It's fairly obvious that I should expect
>> issues in this case, but not so clear how to detect the source of the
>> problem.
>>
>> Question: Has anyone created a script to catch such duplicate functions
>> from different files during build? I think a warning message that there
>> are duplicate functions could save some time and effort. Maybe it's
>> already there, but I saw no obvious message. In this case, I'm only
>> working in R.
>>
>> I've found build.R in the R tarball, which is where I suspect such a
>> check should go, and I'm willing to prepare a patch when I figure out
>> how this should be done. However, it seems worth asking if anyone has
>> needed to do this before. I've already done some searching, but the
>> results seem to pick up quite different posts than I need.
>>
>> Cheers, JN
>>
>> ______________________________________________
>> R-package-devel at r-project.org <javascript:;> mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>>
>
>


From profjcnash at gmail.com  Sat Jul 23 19:20:01 2016
From: profjcnash at gmail.com (ProfJCNash)
Date: Sat, 23 Jul 2016 13:20:01 -0400
Subject: [R-pkg-devel] duplicate function during build
In-Reply-To: <5CBE9554-66B8-4361-A15B-E6B4C27B481A@gmail.com>
References: <0e2f2728-4582-7264-73ed-bf307d76888b@gmail.com>
	<CABdHhvF3_z_pPg5ZxzN9z5GELpCKNaLo8HWBP_vpDASaLt_ADA@mail.gmail.com>
	<5CBE9554-66B8-4361-A15B-E6B4C27B481A@gmail.com>
Message-ID: <734d029b-c49d-7a07-28ce-010f4776283c@gmail.com>

Thanks Sven. That indeed works. And if anyone has ideas how it could be
put into R so Windows users could benefit, I'm sure it would be useful
in checks of packages.

In other investigations of this, I realized that install.R has to
prepare the .rdb and .rdx files and at that stage duplication might be
detected. If install.R puts both versions of a duplicated name into
these files, then the lazy load of library() or require() could be a
place where detection would be useful, though only one of the names gets
actually made available for use. However, my expertise with this
internal aspect of R is rather weak.

Cheers, JN

On 16-07-23 12:04 PM, Sven E. Templer wrote:
> Despite it might help, learning/using git is not tackling this specific problem, I suggest code that does:
> 
> sed -e 's/^[\ \t]*//' -e 's/#.*//' R/* | awk '/function/{print $1}' | sort | uniq -d
> 
> or
> 
> https://gist.github.com/setempler/7fcf2a3a737ce1293e0623d2bb8e08ed
> (any comments welcome)
> 
> If one knows coding R, it might be more productive developing a tiny tool for that, instead of learning a new (and complex) one (as git).
> 
> Nevertheless, git is great!
> 
> Best wishes,
> 
> Sven
> 
> ---
> 
> web:     www.templer.se
> twitter: @setempler
>> On 23 Jul 2016, at 16:17, Hadley Wickham <h.wickham at gmail.com> wrote:
>>
>> I think this sort of meta problem is best solved with svn/git because you
>> can easily see if the changes you think you made align with the changes you
>> actually made. Learning svn or git is a lot of work, but the payoff is
>> worth it.
>>
>> Hadley
>>
>> On Friday, July 22, 2016, ProfJCNash <profjcnash at gmail.com> wrote:
>>
>>> In trying to rationalize some files in a package I'm working on, I
>>> copied a function from one file to another, but forgot to change the
>>> name of one of them. It turns out the name of the file containing the
>>> "old" function was later in collation sequence than the one I was
>>> planning to be the "new" one. To debug some issues, I put some print()
>>> and cat() statements in the "new" file, but after building the package,
>>> they weren't there. Turns out the "old" function got installed, as might
>>> be expected if files processed in order. Debugging this took about 2
>>> hours of slightly weird effort with 2 machines and 3 OS distributions
>>> before I realized the problem. It's fairly obvious that I should expect
>>> issues in this case, but not so clear how to detect the source of the
>>> problem.
>>>
>>> Question: Has anyone created a script to catch such duplicate functions
>>> from different files during build? I think a warning message that there
>>> are duplicate functions could save some time and effort. Maybe it's
>>> already there, but I saw no obvious message. In this case, I'm only
>>> working in R.
>>>
>>> I've found build.R in the R tarball, which is where I suspect such a
>>> check should go, and I'm willing to prepare a patch when I figure out
>>> how this should be done. However, it seems worth asking if anyone has
>>> needed to do this before. I've already done some searching, but the
>>> results seem to pick up quite different posts than I need.
>>>
>>> Cheers, JN
>>>
>>> ______________________________________________
>>> R-package-devel at r-project.org <javascript:;> mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>>>
>>
>>
>> -- 
>> http://hadley.nz
>>
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-package-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
> 
> 
> 
> 
>


From roy.mendelssohn at noaa.gov  Sat Jul 23 19:31:12 2016
From: roy.mendelssohn at noaa.gov (Roy Mendelssohn - NOAA Federal)
Date: Sat, 23 Jul 2016 10:31:12 -0700
Subject: [R-pkg-devel] duplicate function during build
In-Reply-To: <734d029b-c49d-7a07-28ce-010f4776283c@gmail.com>
References: <0e2f2728-4582-7264-73ed-bf307d76888b@gmail.com>
	<CABdHhvF3_z_pPg5ZxzN9z5GELpCKNaLo8HWBP_vpDASaLt_ADA@mail.gmail.com>
	<5CBE9554-66B8-4361-A15B-E6B4C27B481A@gmail.com>
	<734d029b-c49d-7a07-28ce-010f4776283c@gmail.com>
Message-ID: <6B951CCE-D14C-464D-B8C9-71370129F920@noaa.gov>

I don't know if ctags works with R files,  but ctags does a similar thing as you are asking for other languages,  and can be integrated into git using hooks, as in:

https://robots.thoughtbot.com/use-git-hooks-to-automate-annoying-tasks

Don't know if this helps,  but thought I would pass it along.

-Roy

> On Jul 23, 2016, at 10:20 AM, ProfJCNash <profjcnash at gmail.com> wrote:
> 
> Thanks Sven. That indeed works. And if anyone has ideas how it could be
> put into R so Windows users could benefit, I'm sure it would be useful
> in checks of packages.
> 
> In other investigations of this, I realized that install.R has to
> prepare the .rdb and .rdx files and at that stage duplication might be
> detected. If install.R puts both versions of a duplicated name into
> these files, then the lazy load of library() or require() could be a
> place where detection would be useful, though only one of the names gets
> actually made available for use. However, my expertise with this
> internal aspect of R is rather weak.
> 
> Cheers, JN
> 
> On 16-07-23 12:04 PM, Sven E. Templer wrote:
>> Despite it might help, learning/using git is not tackling this specific problem, I suggest code that does:
>> 
>> sed -e 's/^[\ \t]*//' -e 's/#.*//' R/* | awk '/function/{print $1}' | sort | uniq -d
>> 
>> or
>> 
>> https://gist.github.com/setempler/7fcf2a3a737ce1293e0623d2bb8e08ed
>> (any comments welcome)
>> 
>> If one knows coding R, it might be more productive developing a tiny tool for that, instead of learning a new (and complex) one (as git).
>> 
>> Nevertheless, git is great!
>> 
>> Best wishes,
>> 
>> Sven
>> 
>> ---
>> 
>> web:     www.templer.se
>> twitter: @setempler
>>> On 23 Jul 2016, at 16:17, Hadley Wickham <h.wickham at gmail.com> wrote:
>>> 
>>> I think this sort of meta problem is best solved with svn/git because you
>>> can easily see if the changes you think you made align with the changes you
>>> actually made. Learning svn or git is a lot of work, but the payoff is
>>> worth it.
>>> 
>>> Hadley
>>> 
>>> On Friday, July 22, 2016, ProfJCNash <profjcnash at gmail.com> wrote:
>>> 
>>>> In trying to rationalize some files in a package I'm working on, I
>>>> copied a function from one file to another, but forgot to change the
>>>> name of one of them. It turns out the name of the file containing the
>>>> "old" function was later in collation sequence than the one I was
>>>> planning to be the "new" one. To debug some issues, I put some print()
>>>> and cat() statements in the "new" file, but after building the package,
>>>> they weren't there. Turns out the "old" function got installed, as might
>>>> be expected if files processed in order. Debugging this took about 2
>>>> hours of slightly weird effort with 2 machines and 3 OS distributions
>>>> before I realized the problem. It's fairly obvious that I should expect
>>>> issues in this case, but not so clear how to detect the source of the
>>>> problem.
>>>> 
>>>> Question: Has anyone created a script to catch such duplicate functions
>>>> from different files during build? I think a warning message that there
>>>> are duplicate functions could save some time and effort. Maybe it's
>>>> already there, but I saw no obvious message. In this case, I'm only
>>>> working in R.
>>>> 
>>>> I've found build.R in the R tarball, which is where I suspect such a
>>>> check should go, and I'm willing to prepare a patch when I figure out
>>>> how this should be done. However, it seems worth asking if anyone has
>>>> needed to do this before. I've already done some searching, but the
>>>> results seem to pick up quite different posts than I need.
>>>> 
>>>> Cheers, JN
>>>> 
>>>> ______________________________________________
>>>> R-package-devel at r-project.org <javascript:;> mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>>>> 
>>> 
>>> 
>>> -- 
>>> http://hadley.nz
>>> 
>>> 	[[alternative HTML version deleted]]
>>> 
>>> ______________________________________________
>>> R-package-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>> 
>> 
>> 
>> 
>> 
> 
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel

**********************
"The contents of this message do not reflect any position of the U.S. Government or NOAA."
**********************
Roy Mendelssohn
Supervisory Operations Research Analyst
NOAA/NMFS
Environmental Research Division
Southwest Fisheries Science Center
***Note new address and phone***
110 Shaffer Road
Santa Cruz, CA 95060
Phone: (831)-420-3666
Fax: (831) 420-3980
e-mail: Roy.Mendelssohn at noaa.gov www: http://www.pfeg.noaa.gov/

"Old age and treachery will overcome youth and skill."
"From those who have been given much, much will be expected" 
"the arc of the moral universe is long, but it bends toward justice" -MLK Jr.


From glennmschultz at me.com  Sun Jul 24 19:35:50 2016
From: glennmschultz at me.com (Glenn Schultz)
Date: Sun, 24 Jul 2016 12:35:50 -0500
Subject: [R-pkg-devel] package build warning
Message-ID: <58A556E1-B5BC-455D-BAC3-54F435E90269@me.com>

All,

I get the following warning using Roxygen2 

* checking for missing documentation entries ... WARNING
Undocumented S4 classes:
  ?MortgageEffectiveMeasures?

The code to create and document the class is below

  #' An S4 class MortgageEffectiveMeasures
  #' 
  #' A class of mortgage effective duration and convexity
  #' @slot EffDuration A numeric value the Effective Duration
  #' @slot EffConvexity A numeric value the Effective Convexity
  #' @exportClass MortgageEffectiveMeasures
  setClass("MortgageEffectiveMeasures",
           representation(
           EffDuration = "numeric",
           EffConvexity = "numeric"
         ))

The constructor function works and returns the class with the expected result.  The constructor function is documented as well as the generics and the methods.  So, I am a little puzzled as to why I am getting this warning.

I have tried removing all code and refactoring a code chunk at a time - no help
I remove the @exportClass and as expected I pass RCMD

I have looked at this and refactored it so many times if there is a mistake (and I missed it early on) I can no longer see it.  But it is a simple class and is fully documented in my package with the exception of the class.  Any suggestions as to where I should look next are be appreciated.

Best,
Glenn


From murdoch.duncan at gmail.com  Sun Jul 24 22:14:52 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Sun, 24 Jul 2016 16:14:52 -0400
Subject: [R-pkg-devel] package build warning
In-Reply-To: <58A556E1-B5BC-455D-BAC3-54F435E90269@me.com>
References: <58A556E1-B5BC-455D-BAC3-54F435E90269@me.com>
Message-ID: <59b416d2-e66c-250b-c610-90d84b368625@gmail.com>

On 24/07/2016 1:35 PM, Glenn Schultz wrote:
> All,
>
> I get the following warning using Roxygen2
>
> * checking for missing documentation entries ... WARNING
> Undocumented S4 classes:
>   ?MortgageEffectiveMeasures?
>
> The code to create and document the class is below
>
>   #' An S4 class MortgageEffectiveMeasures
>   #'
>   #' A class of mortgage effective duration and convexity
>   #' @slot EffDuration A numeric value the Effective Duration
>   #' @slot EffConvexity A numeric value the Effective Convexity
>   #' @exportClass MortgageEffectiveMeasures
>   setClass("MortgageEffectiveMeasures",
>            representation(
>            EffDuration = "numeric",
>            EffConvexity = "numeric"
>          ))
>
> The constructor function works and returns the class with the expected result.  The constructor function is documented as well as the generics and the methods.  So, I am a little puzzled as to why I am getting this warning.
>
> I have tried removing all code and refactoring a code chunk at a time - no help
> I remove the @exportClass and as expected I pass RCMD
>
> I have looked at this and refactored it so many times if there is a mistake (and I missed it early on) I can no longer see it.  But it is a simple class and is fully documented in my package with the exception of the class.  Any suggestions as to where I should look next are be appreciated.

You need to look at the Rd files.  This might be your error, or a bug in 
Roxygen2, but the help system doesn't look in .R files for help, it 
looks in the .Rd files.  If none of them include

\alias{MortgageEffectiveMeasures-class}

then you haven't documented that class.

Duncan Murdoch


From kevinushey at gmail.com  Sun Jul 24 22:27:44 2016
From: kevinushey at gmail.com (Kevin Ushey)
Date: Sun, 24 Jul 2016 13:27:44 -0700
Subject: [R-pkg-devel] package build warning
In-Reply-To: <58A556E1-B5BC-455D-BAC3-54F435E90269@me.com>
References: <58A556E1-B5BC-455D-BAC3-54F435E90269@me.com>
Message-ID: <CAJXgQP1-jk7KHu_Cnfb21P6iSu9XrCV0FWqZ+03Ri+7HSqYHzA@mail.gmail.com>

Did you call `devtools::document()` before building and checking your
package? Everything looks fine to me with your test example. You
should also double-check that you have up-to-date versions of the
devtools and roxygen2 packages.

It's also worth knowing that nowadays you can generally just use
`@export` and roxygen2 will do the right thing, depending on what
object you are trying to export.

On Sun, Jul 24, 2016 at 10:35 AM, Glenn Schultz <glennmschultz at me.com> wrote:
> All,
>
> I get the following warning using Roxygen2
>
> * checking for missing documentation entries ... WARNING
> Undocumented S4 classes:
>   ?MortgageEffectiveMeasures?
>
> The code to create and document the class is below
>
>   #' An S4 class MortgageEffectiveMeasures
>   #'
>   #' A class of mortgage effective duration and convexity
>   #' @slot EffDuration A numeric value the Effective Duration
>   #' @slot EffConvexity A numeric value the Effective Convexity
>   #' @exportClass MortgageEffectiveMeasures
>   setClass("MortgageEffectiveMeasures",
>            representation(
>            EffDuration = "numeric",
>            EffConvexity = "numeric"
>          ))
>
> The constructor function works and returns the class with the expected result.  The constructor function is documented as well as the generics and the methods.  So, I am a little puzzled as to why I am getting this warning.
>
> I have tried removing all code and refactoring a code chunk at a time - no help
> I remove the @exportClass and as expected I pass RCMD
>
> I have looked at this and refactored it so many times if there is a mistake (and I missed it early on) I can no longer see it.  But it is a simple class and is fully documented in my package with the exception of the class.  Any suggestions as to where I should look next are be appreciated.
>
> Best,
> Glenn
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From glennmschultz at me.com  Sun Jul 24 23:37:38 2016
From: glennmschultz at me.com (Glenn Schultz)
Date: Sun, 24 Jul 2016 16:37:38 -0500
Subject: [R-pkg-devel] package build warning
In-Reply-To: <CAJXgQP1-jk7KHu_Cnfb21P6iSu9XrCV0FWqZ+03Ri+7HSqYHzA@mail.gmail.com>
References: <58A556E1-B5BC-455D-BAC3-54F435E90269@me.com>
	<CAJXgQP1-jk7KHu_Cnfb21P6iSu9XrCV0FWqZ+03Ri+7HSqYHzA@mail.gmail.com>
Message-ID: <5491D337-EA8B-4FE9-BF4E-F766B9A711CF@me.com>

Duncan is correct the class is not documented but the generics, methods, and constructor functions are documented.  Kevin, I updated both devtools and Roxygen2 with the same issue.  I am using R Studio.  I tried refactoring around some functions and files whose names were close in the event that there may be some conflict.  For now, it is just a warning soI will keep looking for the problem and if I can solve it post back here as it must be quite subtle given all else is working fine.

Glenn


> On Jul 24, 2016, at 3:27 PM, Kevin Ushey <kevinushey at gmail.com> wrote:
> 
> Did you call `devtools::document()` before building and checking your
> package? Everything looks fine to me with your test example. You
> should also double-check that you have up-to-date versions of the
> devtools and roxygen2 packages.
> 
> It's also worth knowing that nowadays you can generally just use
> `@export` and roxygen2 will do the right thing, depending on what
> object you are trying to export.
> 
> On Sun, Jul 24, 2016 at 10:35 AM, Glenn Schultz <glennmschultz at me.com> wrote:
>> All,
>> 
>> I get the following warning using Roxygen2
>> 
>> * checking for missing documentation entries ... WARNING
>> Undocumented S4 classes:
>>  ?MortgageEffectiveMeasures?
>> 
>> The code to create and document the class is below
>> 
>>  #' An S4 class MortgageEffectiveMeasures
>>  #'
>>  #' A class of mortgage effective duration and convexity
>>  #' @slot EffDuration A numeric value the Effective Duration
>>  #' @slot EffConvexity A numeric value the Effective Convexity
>>  #' @exportClass MortgageEffectiveMeasures
>>  setClass("MortgageEffectiveMeasures",
>>           representation(
>>           EffDuration = "numeric",
>>           EffConvexity = "numeric"
>>         ))
>> 
>> The constructor function works and returns the class with the expected result.  The constructor function is documented as well as the generics and the methods.  So, I am a little puzzled as to why I am getting this warning.
>> 
>> I have tried removing all code and refactoring a code chunk at a time - no help
>> I remove the @exportClass and as expected I pass RCMD
>> 
>> I have looked at this and refactored it so many times if there is a mistake (and I missed it early on) I can no longer see it.  But it is a simple class and is fully documented in my package with the exception of the class.  Any suggestions as to where I should look next are be appreciated.
>> 
>> Best,
>> Glenn
>> 
>> ______________________________________________
>> R-package-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From kevinushey at gmail.com  Sun Jul 24 23:56:13 2016
From: kevinushey at gmail.com (Kevin Ushey)
Date: Sun, 24 Jul 2016 14:56:13 -0700
Subject: [R-pkg-devel] package build warning
In-Reply-To: <5491D337-EA8B-4FE9-BF4E-F766B9A711CF@me.com>
References: <58A556E1-B5BC-455D-BAC3-54F435E90269@me.com>
	<CAJXgQP1-jk7KHu_Cnfb21P6iSu9XrCV0FWqZ+03Ri+7HSqYHzA@mail.gmail.com>
	<5491D337-EA8B-4FE9-BF4E-F766B9A711CF@me.com>
Message-ID: <CAJXgQP2ihUuno+mv-z61tZLQDWX32VTzXy15hrD=BJ-QneBhyw@mail.gmail.com>

If you're using RStudio, have you enabled 'Generate documentation with
Roxygen' in your Project Options?

Can you confirm whether manually invoking 'devtools::document()'
creates a file at 'man/MortgageEffectiveMeasures-class.Rd', with the
expected documentation?

Everything looks fine for me with your example code in a dummy
package, so if you're still seeing an issue you're going to need to
share your package sources or an otherwise reproducible example.

Kevin

On Sun, Jul 24, 2016 at 2:37 PM, Glenn Schultz <glennmschultz at me.com> wrote:
> Duncan is correct the class is not documented but the generics, methods, and constructor functions are documented.  Kevin, I updated both devtools and Roxygen2 with the same issue.  I am using R Studio.  I tried refactoring around some functions and files whose names were close in the event that there may be some conflict.  For now, it is just a warning soI will keep looking for the problem and if I can solve it post back here as it must be quite subtle given all else is working fine.
>
> Glenn
>
>
>> On Jul 24, 2016, at 3:27 PM, Kevin Ushey <kevinushey at gmail.com> wrote:
>>
>> Did you call `devtools::document()` before building and checking your
>> package? Everything looks fine to me with your test example. You
>> should also double-check that you have up-to-date versions of the
>> devtools and roxygen2 packages.
>>
>> It's also worth knowing that nowadays you can generally just use
>> `@export` and roxygen2 will do the right thing, depending on what
>> object you are trying to export.
>>
>> On Sun, Jul 24, 2016 at 10:35 AM, Glenn Schultz <glennmschultz at me.com> wrote:
>>> All,
>>>
>>> I get the following warning using Roxygen2
>>>
>>> * checking for missing documentation entries ... WARNING
>>> Undocumented S4 classes:
>>>  ?MortgageEffectiveMeasures?
>>>
>>> The code to create and document the class is below
>>>
>>>  #' An S4 class MortgageEffectiveMeasures
>>>  #'
>>>  #' A class of mortgage effective duration and convexity
>>>  #' @slot EffDuration A numeric value the Effective Duration
>>>  #' @slot EffConvexity A numeric value the Effective Convexity
>>>  #' @exportClass MortgageEffectiveMeasures
>>>  setClass("MortgageEffectiveMeasures",
>>>           representation(
>>>           EffDuration = "numeric",
>>>           EffConvexity = "numeric"
>>>         ))
>>>
>>> The constructor function works and returns the class with the expected result.  The constructor function is documented as well as the generics and the methods.  So, I am a little puzzled as to why I am getting this warning.
>>>
>>> I have tried removing all code and refactoring a code chunk at a time - no help
>>> I remove the @exportClass and as expected I pass RCMD
>>>
>>> I have looked at this and refactored it so many times if there is a mistake (and I missed it early on) I can no longer see it.  But it is a simple class and is fully documented in my package with the exception of the class.  Any suggestions as to where I should look next are be appreciated.
>>>
>>> Best,
>>> Glenn
>>>
>>> ______________________________________________
>>> R-package-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>


From glennmschultz at me.com  Mon Jul 25 00:29:20 2016
From: glennmschultz at me.com (Glenn Schultz)
Date: Sun, 24 Jul 2016 17:29:20 -0500
Subject: [R-pkg-devel] package build warning
In-Reply-To: <CAJXgQP2ihUuno+mv-z61tZLQDWX32VTzXy15hrD=BJ-QneBhyw@mail.gmail.com>
References: <58A556E1-B5BC-455D-BAC3-54F435E90269@me.com>
	<CAJXgQP1-jk7KHu_Cnfb21P6iSu9XrCV0FWqZ+03Ri+7HSqYHzA@mail.gmail.com>
	<5491D337-EA8B-4FE9-BF4E-F766B9A711CF@me.com>
	<CAJXgQP2ihUuno+mv-z61tZLQDWX32VTzXy15hrD=BJ-QneBhyw@mail.gmail.com>
Message-ID: <03C2DFBE-3F60-4B76-B591-3778407CE702@me.com>

check on Generate documentation with Oxygen
check devtools::document() does not create the man/MortgageEffectiveMeasures-class.Rd

I can share my sources but I am not sure the base way to go about.  It is on github in a private repo which I can provide access or ssh key


Glenn 


> On Jul 24, 2016, at 4:56 PM, Kevin Ushey <kevinushey at gmail.com> wrote:
> 
> If you're using RStudio, have you enabled 'Generate documentation with
> Roxygen' in your Project Options?
> 
> Can you confirm whether manually invoking 'devtools::document()'
> creates a file at 'man/MortgageEffectiveMeasures-class.Rd', with the
> expected documentation?
> 
> Everything looks fine for me with your example code in a dummy
> package, so if you're still seeing an issue you're going to need to
> share your package sources or an otherwise reproducible example.
> 
> Kevin
> 
> On Sun, Jul 24, 2016 at 2:37 PM, Glenn Schultz <glennmschultz at me.com> wrote:
>> Duncan is correct the class is not documented but the generics, methods, and constructor functions are documented.  Kevin, I updated both devtools and Roxygen2 with the same issue.  I am using R Studio.  I tried refactoring around some functions and files whose names were close in the event that there may be some conflict.  For now, it is just a warning soI will keep looking for the problem and if I can solve it post back here as it must be quite subtle given all else is working fine.
>> 
>> Glenn
>> 
>> 
>>> On Jul 24, 2016, at 3:27 PM, Kevin Ushey <kevinushey at gmail.com> wrote:
>>> 
>>> Did you call `devtools::document()` before building and checking your
>>> package? Everything looks fine to me with your test example. You
>>> should also double-check that you have up-to-date versions of the
>>> devtools and roxygen2 packages.
>>> 
>>> It's also worth knowing that nowadays you can generally just use
>>> `@export` and roxygen2 will do the right thing, depending on what
>>> object you are trying to export.
>>> 
>>> On Sun, Jul 24, 2016 at 10:35 AM, Glenn Schultz <glennmschultz at me.com> wrote:
>>>> All,
>>>> 
>>>> I get the following warning using Roxygen2
>>>> 
>>>> * checking for missing documentation entries ... WARNING
>>>> Undocumented S4 classes:
>>>> ?MortgageEffectiveMeasures?
>>>> 
>>>> The code to create and document the class is below
>>>> 
>>>> #' An S4 class MortgageEffectiveMeasures
>>>> #'
>>>> #' A class of mortgage effective duration and convexity
>>>> #' @slot EffDuration A numeric value the Effective Duration
>>>> #' @slot EffConvexity A numeric value the Effective Convexity
>>>> #' @exportClass MortgageEffectiveMeasures
>>>> setClass("MortgageEffectiveMeasures",
>>>>          representation(
>>>>          EffDuration = "numeric",
>>>>          EffConvexity = "numeric"
>>>>        ))
>>>> 
>>>> The constructor function works and returns the class with the expected result.  The constructor function is documented as well as the generics and the methods.  So, I am a little puzzled as to why I am getting this warning.
>>>> 
>>>> I have tried removing all code and refactoring a code chunk at a time - no help
>>>> I remove the @exportClass and as expected I pass RCMD
>>>> 
>>>> I have looked at this and refactored it so many times if there is a mistake (and I missed it early on) I can no longer see it.  But it is a simple class and is fully documented in my package with the exception of the class.  Any suggestions as to where I should look next are be appreciated.
>>>> 
>>>> Best,
>>>> Glenn
>>>> 
>>>> ______________________________________________
>>>> R-package-devel at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>> 


From jack at jackwasey.com  Mon Jul 25 08:52:05 2016
From: jack at jackwasey.com (Jack Wasey)
Date: Mon, 25 Jul 2016 07:52:05 +0100
Subject: [R-pkg-devel] package build warning
In-Reply-To: <03C2DFBE-3F60-4B76-B591-3778407CE702@me.com>
References: <58A556E1-B5BC-455D-BAC3-54F435E90269@me.com>
	<CAJXgQP1-jk7KHu_Cnfb21P6iSu9XrCV0FWqZ+03Ri+7HSqYHzA@mail.gmail.com>
	<5491D337-EA8B-4FE9-BF4E-F766B9A711CF@me.com>
	<CAJXgQP2ihUuno+mv-z61tZLQDWX32VTzXy15hrD=BJ-QneBhyw@mail.gmail.com>
	<03C2DFBE-3F60-4B76-B591-3778407CE702@me.com>
Message-ID: <CA+zP7HHBHqCu0tFyvXp+OJgU2axUsPQkYrYTypRHYuJkReKF3Q@mail.gmail.com>

roxygen2 can be fragile when there are mistakes in preceding
roxygen2 documentation blocks, or conflicting documentation blocks
elsewhere in a package, and, if I remember correctly, extraneous empty
lines. A lack of verbose options or logging makes debugging roxygen2 errors
tricky sometimes. Try putting your function in its own file as a test. Is
other expected Rd documentation missing? As a last resort, I have had to
set debug break points in roxygen2 functions, so I can see where it is
failing.

On Sunday, July 24, 2016, Glenn Schultz <glennmschultz at me.com> wrote:

> check on Generate documentation with Oxygen
> check devtools::document() does not create the
> man/MortgageEffectiveMeasures-class.Rd
>
> I can share my sources but I am not sure the base way to go about.  It is
> on github in a private repo which I can provide access or ssh key
>
>
> Glenn
>
>
> > On Jul 24, 2016, at 4:56 PM, Kevin Ushey <kevinushey at gmail.com
> <javascript:;>> wrote:
> >
> > If you're using RStudio, have you enabled 'Generate documentation with
> > Roxygen' in your Project Options?
> >
> > Can you confirm whether manually invoking 'devtools::document()'
> > creates a file at 'man/MortgageEffectiveMeasures-class.Rd', with the
> > expected documentation?
> >
> > Everything looks fine for me with your example code in a dummy
> > package, so if you're still seeing an issue you're going to need to
> > share your package sources or an otherwise reproducible example.
> >
> > Kevin
> >
> > On Sun, Jul 24, 2016 at 2:37 PM, Glenn Schultz <glennmschultz at me.com
> <javascript:;>> wrote:
> >> Duncan is correct the class is not documented but the generics,
> methods, and constructor functions are documented.  Kevin, I updated both
> devtools and Roxygen2 with the same issue.  I am using R Studio.  I tried
> refactoring around some functions and files whose names were close in the
> event that there may be some conflict.  For now, it is just a warning soI
> will keep looking for the problem and if I can solve it post back here as
> it must be quite subtle given all else is working fine.
> >>
> >> Glenn
> >>
> >>
> >>> On Jul 24, 2016, at 3:27 PM, Kevin Ushey <kevinushey at gmail.com
> <javascript:;>> wrote:
> >>>
> >>> Did you call `devtools::document()` before building and checking your
> >>> package? Everything looks fine to me with your test example. You
> >>> should also double-check that you have up-to-date versions of the
> >>> devtools and roxygen2 packages.
> >>>
> >>> It's also worth knowing that nowadays you can generally just use
> >>> `@export` and roxygen2 will do the right thing, depending on what
> >>> object you are trying to export.
> >>>
> >>> On Sun, Jul 24, 2016 at 10:35 AM, Glenn Schultz <glennmschultz at me.com
> <javascript:;>> wrote:
> >>>> All,
> >>>>
> >>>> I get the following warning using Roxygen2
> >>>>
> >>>> * checking for missing documentation entries ... WARNING
> >>>> Undocumented S4 classes:
> >>>> ?MortgageEffectiveMeasures?
> >>>>
> >>>> The code to create and document the class is below
> >>>>
> >>>> #' An S4 class MortgageEffectiveMeasures
> >>>> #'
> >>>> #' A class of mortgage effective duration and convexity
> >>>> #' @slot EffDuration A numeric value the Effective Duration
> >>>> #' @slot EffConvexity A numeric value the Effective Convexity
> >>>> #' @exportClass MortgageEffectiveMeasures
> >>>> setClass("MortgageEffectiveMeasures",
> >>>>          representation(
> >>>>          EffDuration = "numeric",
> >>>>          EffConvexity = "numeric"
> >>>>        ))
> >>>>
> >>>> The constructor function works and returns the class with the
> expected result.  The constructor function is documented as well as the
> generics and the methods.  So, I am a little puzzled as to why I am getting
> this warning.
> >>>>
> >>>> I have tried removing all code and refactoring a code chunk at a time
> - no help
> >>>> I remove the @exportClass and as expected I pass RCMD
> >>>>
> >>>> I have looked at this and refactored it so many times if there is a
> mistake (and I missed it early on) I can no longer see it.  But it is a
> simple class and is fully documented in my package with the exception of
> the class.  Any suggestions as to where I should look next are be
> appreciated.
> >>>>
> >>>> Best,
> >>>> Glenn
> >>>>
> >>>> ______________________________________________
> >>>> R-package-devel at r-project.org <javascript:;> mailing list
> >>>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
> >>
>
> ______________________________________________
> R-package-devel at r-project.org <javascript:;> mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel

	[[alternative HTML version deleted]]


From glennmschultz at me.com  Tue Jul 26 02:12:03 2016
From: glennmschultz at me.com (Glenn Schultz)
Date: Mon, 25 Jul 2016 19:12:03 -0500
Subject: [R-pkg-devel] package build warning
In-Reply-To: <CA+zP7HHBHqCu0tFyvXp+OJgU2axUsPQkYrYTypRHYuJkReKF3Q@mail.gmail.com>
References: <58A556E1-B5BC-455D-BAC3-54F435E90269@me.com>
	<CAJXgQP1-jk7KHu_Cnfb21P6iSu9XrCV0FWqZ+03Ri+7HSqYHzA@mail.gmail.com>
	<5491D337-EA8B-4FE9-BF4E-F766B9A711CF@me.com>
	<CAJXgQP2ihUuno+mv-z61tZLQDWX32VTzXy15hrD=BJ-QneBhyw@mail.gmail.com>
	<03C2DFBE-3F60-4B76-B591-3778407CE702@me.com>
	<CA+zP7HHBHqCu0tFyvXp+OJgU2axUsPQkYrYTypRHYuJkReKF3Q@mail.gmail.com>
Message-ID: <AED4C032-721C-4F6C-B16C-6B58838D3863@me.com>

Hi Jack,

Thanks, do you think checking the files in the order of collate is the way to go?  I tried on a standalone basis and everything is okay so it must be as you suggested something before.

Glenn


> On Jul 25, 2016, at 1:52 AM, Jack Wasey <jack at jackwasey.com> wrote:
> 
> roxygen2 can be fragile when there are mistakes in preceding roxygen2 documentation blocks, or conflicting documentation blocks elsewhere in a package, and, if I remember correctly, extraneous empty lines. A lack of verbose options or logging makes debugging roxygen2 errors tricky sometimes. Try putting your function in its own file as a test. Is other expected Rd documentation missing? As a last resort, I have had to set debug break points in roxygen2 functions, so I can see where it is failing.
> 
> On Sunday, July 24, 2016, Glenn Schultz <glennmschultz at me.com <mailto:glennmschultz at me.com>> wrote:
> check on Generate documentation with Oxygen
> check devtools::document() does not create the man/MortgageEffectiveMeasures-class.Rd
> 
> I can share my sources but I am not sure the base way to go about.  It is on github in a private repo which I can provide access or ssh key
> 
> 
> Glenn
> 
> 
> > On Jul 24, 2016, at 4:56 PM, Kevin Ushey <kevinushey at gmail.com <javascript:;>> wrote:
> >
> > If you're using RStudio, have you enabled 'Generate documentation with
> > Roxygen' in your Project Options?
> >
> > Can you confirm whether manually invoking 'devtools::document()'
> > creates a file at 'man/MortgageEffectiveMeasures-class.Rd', with the
> > expected documentation?
> >
> > Everything looks fine for me with your example code in a dummy
> > package, so if you're still seeing an issue you're going to need to
> > share your package sources or an otherwise reproducible example.
> >
> > Kevin
> >
> > On Sun, Jul 24, 2016 at 2:37 PM, Glenn Schultz <glennmschultz at me.com <javascript:;>> wrote:
> >> Duncan is correct the class is not documented but the generics, methods, and constructor functions are documented.  Kevin, I updated both devtools and Roxygen2 with the same issue.  I am using R Studio.  I tried refactoring around some functions and files whose names were close in the event that there may be some conflict.  For now, it is just a warning soI will keep looking for the problem and if I can solve it post back here as it must be quite subtle given all else is working fine.
> >>
> >> Glenn
> >>
> >>
> >>> On Jul 24, 2016, at 3:27 PM, Kevin Ushey <kevinushey at gmail.com <javascript:;>> wrote:
> >>>
> >>> Did you call `devtools::document()` before building and checking your
> >>> package? Everything looks fine to me with your test example. You
> >>> should also double-check that you have up-to-date versions of the
> >>> devtools and roxygen2 packages.
> >>>
> >>> It's also worth knowing that nowadays you can generally just use
> >>> `@export` and roxygen2 will do the right thing, depending on what
> >>> object you are trying to export.
> >>>
> >>> On Sun, Jul 24, 2016 at 10:35 AM, Glenn Schultz <glennmschultz at me.com <javascript:;>> wrote:
> >>>> All,
> >>>>
> >>>> I get the following warning using Roxygen2
> >>>>
> >>>> * checking for missing documentation entries ... WARNING
> >>>> Undocumented S4 classes:
> >>>> ?MortgageEffectiveMeasures?
> >>>>
> >>>> The code to create and document the class is below
> >>>>
> >>>> #' An S4 class MortgageEffectiveMeasures
> >>>> #'
> >>>> #' A class of mortgage effective duration and convexity
> >>>> #' @slot EffDuration A numeric value the Effective Duration
> >>>> #' @slot EffConvexity A numeric value the Effective Convexity
> >>>> #' @exportClass MortgageEffectiveMeasures
> >>>> setClass("MortgageEffectiveMeasures",
> >>>>          representation(
> >>>>          EffDuration = "numeric",
> >>>>          EffConvexity = "numeric"
> >>>>        ))
> >>>>
> >>>> The constructor function works and returns the class with the expected result.  The constructor function is documented as well as the generics and the methods.  So, I am a little puzzled as to why I am getting this warning.
> >>>>
> >>>> I have tried removing all code and refactoring a code chunk at a time - no help
> >>>> I remove the @exportClass and as expected I pass RCMD
> >>>>
> >>>> I have looked at this and refactored it so many times if there is a mistake (and I missed it early on) I can no longer see it.  But it is a simple class and is fully documented in my package with the exception of the class.  Any suggestions as to where I should look next are be appreciated.
> >>>>
> >>>> Best,
> >>>> Glenn
> >>>>
> >>>> ______________________________________________
> >>>> R-package-devel at r-project.org <javascript:;> mailing list
> >>>> https://stat.ethz.ch/mailman/listinfo/r-package-devel <https://stat.ethz.ch/mailman/listinfo/r-package-devel>
> >>
> 
> ______________________________________________
> R-package-devel at r-project.org <javascript:;> mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel <https://stat.ethz.ch/mailman/listinfo/r-package-devel>

	[[alternative HTML version deleted]]


From es at enricoschumann.net  Wed Jul 27 22:42:51 2016
From: es at enricoschumann.net (Enrico Schumann)
Date: Wed, 27 Jul 2016 22:42:51 +0200
Subject: [R-pkg-devel] duplicate function during build
In-Reply-To: <734d029b-c49d-7a07-28ce-010f4776283c@gmail.com>
	(profjcnash@gmail.com's message of "Sat, 23 Jul 2016 13:20:01 -0400")
References: <0e2f2728-4582-7264-73ed-bf307d76888b@gmail.com>
	<CABdHhvF3_z_pPg5ZxzN9z5GELpCKNaLo8HWBP_vpDASaLt_ADA@mail.gmail.com>
	<5CBE9554-66B8-4361-A15B-E6B4C27B481A@gmail.com>
	<734d029b-c49d-7a07-28ce-010f4776283c@gmail.com>
Message-ID: <87invqsth0.fsf@enricoschumann.net>

On Sat, 23 Jul 2016, ProfJCNash <profjcnash at gmail.com> writes:

> Thanks Sven. That indeed works. And if anyone has ideas how it could be
> put into R so Windows users could benefit, I'm sure it would be useful
> in checks of packages.

You could use R functionality to rewrite the shell
commands. Perhaps along those lines:

--8<---------------cut here---------------start------------->8---
fun_names <- function(dir,
                      duplicates_only = TRUE,
                      file_pattern = "[.][rR]$",
                      fun_pattern = " *([^\\s]+) *<- *function.*") {

    files <- dir(dir, pattern = file_pattern, full.names = TRUE)
    ans <- data.frame(fun = character(0),
                      file = character(0))
    for (f in files) {
        txt <- readLines(f)
        fun.lines <- grepl(fun_pattern, txt)
        
        if (any(fun.lines)) {
            ans <- rbind(ans,
                         data.frame(fun = gsub(fun_pattern, "\\1",
                                               txt[fun.lines],
                                               perl = TRUE),
                                    file = f,
                                    line = which(fun.lines),
                                    stringsAsFactors = FALSE))
        }
    }

    ans <- ans[order(ans[["fun"]]), ]

    if (duplicates_only) {
        d <- duplicated(ans[["fun"]])
        d0 <- match(unique(ans[["fun"]][d]), ans[["fun"]])
        ans <- ans[sort(c(d0, which(d))),]
    }

    ans
}
--8<---------------cut here---------------end--------------->8---

One would call then function on a directory.

For instance,

  fun_names("~/Packages/NMOF/R")

gives me output

         fun                                    file line
10  cfHeston       /home/es/Packages/NMOF/R/callCF.R   41
18  cfHeston /home/es/Packages/NMOF/R/callHestoncf.R   29

## [...] 

But it will be tricky to catch only such re-definitions
of functions that have been left in the files by
mistake. For instance, I often define short helper
functions within other functions, and such helper
functions might then get flagged, too.

Kind regards
        Enrico



> In other investigations of this, I realized that install.R has to
> prepare the .rdb and .rdx files and at that stage duplication might be
> detected. If install.R puts both versions of a duplicated name into
> these files, then the lazy load of library() or require() could be a
> place where detection would be useful, though only one of the names gets
> actually made available for use. However, my expertise with this
> internal aspect of R is rather weak.
>
> Cheers, JN
>
> On 16-07-23 12:04 PM, Sven E. Templer wrote:
>> Despite it might help, learning/using git is not tackling this specific problem, I suggest code that does:
>> 
>> sed -e 's/^[\ \t]*//' -e 's/#.*//' R/* | awk '/function/{print $1}' | sort | uniq -d
>> 
>> or
>> 
>> https://gist.github.com/setempler/7fcf2a3a737ce1293e0623d2bb8e08ed
>> (any comments welcome)
>> 
>> If one knows coding R, it might be more productive developing a tiny tool for that, instead of learning a new (and complex) one (as git).
>> 
>> Nevertheless, git is great!
>> 
>> Best wishes,
>> 
>> Sven
>> 
>> ---
>> 
>> web:     www.templer.se
>> twitter: @setempler
>>> On 23 Jul 2016, at 16:17, Hadley Wickham <h.wickham at gmail.com> wrote:
>>>
>>> I think this sort of meta problem is best solved with svn/git because you
>>> can easily see if the changes you think you made align with the changes you
>>> actually made. Learning svn or git is a lot of work, but the payoff is
>>> worth it.
>>>
>>> Hadley
>>>
>>> On Friday, July 22, 2016, ProfJCNash <profjcnash at gmail.com> wrote:
>>>
>>>> In trying to rationalize some files in a package I'm working on, I
>>>> copied a function from one file to another, but forgot to change the
>>>> name of one of them. It turns out the name of the file containing the
>>>> "old" function was later in collation sequence than the one I was
>>>> planning to be the "new" one. To debug some issues, I put some print()
>>>> and cat() statements in the "new" file, but after building the package,
>>>> they weren't there. Turns out the "old" function got installed, as might
>>>> be expected if files processed in order. Debugging this took about 2
>>>> hours of slightly weird effort with 2 machines and 3 OS distributions
>>>> before I realized the problem. It's fairly obvious that I should expect
>>>> issues in this case, but not so clear how to detect the source of the
>>>> problem.
>>>>
>>>> Question: Has anyone created a script to catch such duplicate functions
>>>> from different files during build? I think a warning message that there
>>>> are duplicate functions could save some time and effort. Maybe it's
>>>> already there, but I saw no obvious message. In this case, I'm only
>>>> working in R.
>>>>
>>>> I've found build.R in the R tarball, which is where I suspect such a
>>>> check should go, and I'm willing to prepare a patch when I figure out
>>>> how this should be done. However, it seems worth asking if anyone has
>>>> needed to do this before. I've already done some searching, but the
>>>> results seem to pick up quite different posts than I need.
>>>>
>>>> Cheers, JN
>>>>

-- 
Enrico Schumann
Lucerne, Switzerland
http://enricoschumann.net


From vineethawarriyar.kod at ucalgary.ca  Thu Jul 28 21:30:18 2016
From: vineethawarriyar.kod at ucalgary.ca (Vineetha Warriyar Kodalore Vijayan)
Date: Thu, 28 Jul 2016 19:30:18 +0000
Subject: [R-pkg-devel] Regarding Fortran 77/95 Codes for building R package
Message-ID: <BY2PR01MB1781205923F800B8ACC61BCA97000@BY2PR01MB1781.prod.exchangelabs.com>

Hi,


 I'm new to programming and now trying to build a R package which uses Fortran 95 codes ( gfortran 6.1 compiler) with a view to submit to CRAN at some point of time. I did go through the "Writing R extension" manual and got an impression that the codes must be in FORTRAN 77.

I would like to know if I can proceed with my fortran 95 codes or do I have to change everything into FORTRAN 77.  I would really appreciate if you can provide a right direction how to proceed.


Thank you,

Vineetha



	[[alternative HTML version deleted]]


From maxime.turgeon at mail.mcgill.ca  Thu Jul 28 22:03:17 2016
From: maxime.turgeon at mail.mcgill.ca (MTurgeon)
Date: Thu, 28 Jul 2016 14:03:17 -0600
Subject: [R-pkg-devel] Regarding Fortran 77/95 Codes for building R
 package
In-Reply-To: <BY2PR01MB1781205923F800B8ACC61BCA97000@BY2PR01MB1781.prod.exchangelabs.com>
References: <BY2PR01MB1781205923F800B8ACC61BCA97000@BY2PR01MB1781.prod.exchangelabs.com>
Message-ID: <96e8325c-07a0-5f28-4c30-22ad44643eca@mail.mcgill.ca>

Hi Vineetha,

The key part of Writing R extensions is section 1.2.3., especially the 
following sentence: "Packages making use of Fortran 90/95 features 
should use file extension.f90or.f95for the source files".

Incidentally, your question has already been asked on this mailing list: 
https://stat.ethz.ch/pipermail/r-devel/2007-December/047695.html.

Best,

Max


On 16-07-28 01:30 PM, Vineetha Warriyar Kodalore Vijayan wrote:
> Hi,
>
>
>   I'm new to programming and now trying to build a R package which uses Fortran 95 codes ( gfortran 6.1 compiler) with a view to submit to CRAN at some point of time. I did go through the "Writing R extension" manual and got an impression that the codes must be in FORTRAN 77.
>
> I would like to know if I can proceed with my fortran 95 codes or do I have to change everything into FORTRAN 77.  I would really appreciate if you can provide a right direction how to proceed.
>
>
> Thank you,
>
> Vineetha
>
>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel

-- 
-----------------------------------------------------------------

Maxime Turgeon, PhD candidate

Department of Epidemiology, Biostatistics and Occupational Health
McGill University


	[[alternative HTML version deleted]]


From glennmschultz at me.com  Sun Jul 31 21:01:14 2016
From: glennmschultz at me.com (Glenn Schultz)
Date: Sun, 31 Jul 2016 14:01:14 -0500
Subject: [R-pkg-devel] create methods in package
Message-ID: <FF0715AC-4F2A-4FE8-9059-32CA12BC0C96@me.com>

All,

I have set-up both getters and setters for my package and everything works great (just like BioConductor).  Now, I would like to create new methods that create graphs of cashflows and distributions of OAS simulations. My question is this.  Should the method call the constructor function and then plot or is it better to call the method against an object that has been create and resides in the local environment?

Example 1:

foo <- constructor(foo)
method(foo)

Example 2:

method(foo,..){
constructor
plot(constructor)}

Thanks in Advance,
Glenn

From sn248 at cornell.edu  Mon Aug  1 05:32:27 2016
From: sn248 at cornell.edu (Satyaprakash Nayak)
Date: Sun, 31 Jul 2016 23:32:27 -0400
Subject: [R-pkg-devel] Can't build package but can load it with
	devtools::load_all()
Message-ID: <CAM3CqvLs1OkBp7KW5BTDLYUjGAn7bogXv+T8zhLVwztDaZaY9g@mail.gmail.com>

Hi

I am trying to build a package with interfaces with C library libSBML
<http://sbml.org/Software/libSBML> (although a package libSBML exists).
When I try to build the package using "Clean and Rebuild" command in
RStudio, I am getting the following error

** R
> ** preparing package for lazy loading
> ** help
> *** installing help indices
> ** building package indices
> ** testing if installed package can be loaded
> Error in dyn.load(file, DLLpath = DLLpath, ...) :
>   unable to load shared object
> '/Library/Frameworks/R.framework/Versions/3.3/Resources/library/Rcppsbml/libs/Rcppsbml.so':
>
> dlopen(/Library/Frameworks/R.framework/Versions/3.3/Resources/library/Rcppsbml/libs/Rcppsbml.so,
> 6): Library not loaded: libsbml.5.dylib
>   Referenced from:
> /Library/Frameworks/R.framework/Versions/3.3/Resources/library/Rcppsbml/libs/Rcppsbml.so
>   Reason: image not found
> Error: loading failed
> Execution halted
> ERROR: loading failed
> * removing
> ?/Library/Frameworks/R.framework/Versions/3.3/Resources/library/Rcppsbml?
> Exited with status 1.


However, if I issue the command

devtools::load_all()

after "Clean and Rebuild" command, I get the message

Loading Rcppsbml


and I can also use the functions defined in the package! However, as soon
as I restart my R session, I cannot load the library (understandable, as I
don't think the package is built correctly).

Based on the error shown, I think libsbml.5.dylib is not being loaded,
however, it is there in the /usr/local/lib folder.

The code for this package can be found at

https://github.com/sn248/Rcppsbml

Any help in resolving this error would be highly appreciated!

Thank you
Satyaprakash Nayak

	[[alternative HTML version deleted]]


From sn248 at cornell.edu  Mon Aug  1 06:32:20 2016
From: sn248 at cornell.edu (Satyaprakash Nayak)
Date: Mon, 1 Aug 2016 00:32:20 -0400
Subject: [R-pkg-devel] Can't build package but can load it with
	devtools::load_all()
In-Reply-To: <CAM3CqvLs1OkBp7KW5BTDLYUjGAn7bogXv+T8zhLVwztDaZaY9g@mail.gmail.com>
References: <CAM3CqvLs1OkBp7KW5BTDLYUjGAn7bogXv+T8zhLVwztDaZaY9g@mail.gmail.com>
Message-ID: <CAM3CqvJ=YbEVoXjjBER9H5OjvnDqp3UzMhm173j1NgsKSPKWHg@mail.gmail.com>

Just an update - I re-installed libSBML and now

devtools::load_all()


is giving an error

> devtools::load_all()
> Loading Rcppsbml
> Error in dyn.load(dllfile) :
>   unable to load shared object '/<PATH-TO-DIR>/Rcppsbml/src/Rcppsbml.so':
>   dlopen(/<PATH-TO-DIR>/Rcppsbml/src/Rcppsbml.so, 6): Symbol not found:
> __ZN7libsbml10SBMLReader16readSBMLFromFileERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE


<PATH-TO-DIR> is the path to package directory

Thank you
Satyaprakash Nayak

On Sun, Jul 31, 2016 at 11:32 PM, Satyaprakash Nayak <sn248 at cornell.edu>
wrote:

> Hi
>
> I am trying to build a package with interfaces with C library libSBML
> <http://sbml.org/Software/libSBML> (although a package libSBML exists).
> When I try to build the package using "Clean and Rebuild" command in
> RStudio, I am getting the following error
>
> ** R
>> ** preparing package for lazy loading
>> ** help
>> *** installing help indices
>> ** building package indices
>> ** testing if installed package can be loaded
>> Error in dyn.load(file, DLLpath = DLLpath, ...) :
>>   unable to load shared object
>> '/Library/Frameworks/R.framework/Versions/3.3/Resources/library/Rcppsbml/libs/Rcppsbml.so':
>>
>> dlopen(/Library/Frameworks/R.framework/Versions/3.3/Resources/library/Rcppsbml/libs/Rcppsbml.so,
>> 6): Library not loaded: libsbml.5.dylib
>>   Referenced from:
>> /Library/Frameworks/R.framework/Versions/3.3/Resources/library/Rcppsbml/libs/Rcppsbml.so
>>   Reason: image not found
>> Error: loading failed
>> Execution halted
>> ERROR: loading failed
>> * removing
>> ?/Library/Frameworks/R.framework/Versions/3.3/Resources/library/Rcppsbml?
>> Exited with status 1.
>
>
> However, if I issue the command
>
> devtools::load_all()
>
> after "Clean and Rebuild" command, I get the message
>
> Loading Rcppsbml
>
>
> and I can also use the functions defined in the package! However, as soon
> as I restart my R session, I cannot load the library (understandable, as I
> don't think the package is built correctly).
>
> Based on the error shown, I think libsbml.5.dylib is not being loaded,
> however, it is there in the /usr/local/lib folder.
>
> The code for this package can be found at
>
> https://github.com/sn248/Rcppsbml
>
> Any help in resolving this error would be highly appreciated!
>
> Thank you
> Satyaprakash Nayak
>

	[[alternative HTML version deleted]]


From thosjleeper at gmail.com  Tue Aug  2 18:26:03 2016
From: thosjleeper at gmail.com (Thomas J. Leeper)
Date: Tue, 2 Aug 2016 17:26:03 +0100
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
Message-ID: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>

I have a fairly open-ended question about the handling of package
dependencies that is inspired by the precise distinction between
"Depends", "Imports", and "Suggests" listed in DESCRIPTION.

Some background, as I understand it: Prior to requiring package
namespaces, we listed package dependencies in "Depends" because the
required package had to be (1) installed and (2) on the search path in
order to access its functions. After introducing and requiring
namespaces, there are very few circumstances in which "Depends" is
needed because functions from the required package can either be
imported (via "Imports" and NAMESPACE) and/or referred to using the
`pkg::fun()` style. "Suggests" packages are maybe needed for examples,
vignettes, etc. but are not installed by default via
`install.packages()`, so are not guaranteed to be available.

Some observations:

1. "Depends" seems to be less useful than before, except in rare cases
where a package needs to be (a) installed, (b) loaded, and (c) on the
search path. Imports covers most package dependency use cases.

2. There is a gap in functionality between "Imports" and "Suggests".
Sometimes there is a need for functions that should be available
(i.e., installed) but do not need to be loaded or imported because
they are rarely used (e.g., graphing functions). Importing the
functions adds bloat but only putting their package in "Suggests" does
not guarantee availability when, for example, calling
`requireNamespace()` or `require()`.

Suggestion:

Might it be useful to have a category between "Imports" and "Suggests"
that covers packages that should be installed but not imported?

This could be done by changing `install.packages()` to cover
"Suggests" by default, changing the meaning of "Depends" and
"Imports", or adding a new category to DESCRIPTION.

I am interested in hearing your thoughts on this issue.

Best,
-Thomas

Thomas J. Leeper
http://www.thomasleeper.com


From edd at debian.org  Tue Aug  2 18:34:57 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Tue, 2 Aug 2016 11:34:57 -0500
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
Message-ID: <22432.52145.624449.132640@max.nulle.part>


See eg https://www.debian.org/doc/debian-policy/ch-relationships.html

We have other big fish to fry.  Eg many packages have LinkingTo: BH (as Boost
headers are indeed awesome) but this 120 mb (!!) payload is needed _once_
during package compilation / installation and never again afterwards.  So
Build-Depends: would be a nice addition too.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From josh.m.ulrich at gmail.com  Tue Aug  2 18:36:51 2016
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Tue, 2 Aug 2016 11:36:51 -0500
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
Message-ID: <CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>

On Tue, Aug 2, 2016 at 11:26 AM, Thomas J. Leeper <thosjleeper at gmail.com> wrote:
> I have a fairly open-ended question about the handling of package
> dependencies that is inspired by the precise distinction between
> "Depends", "Imports", and "Suggests" listed in DESCRIPTION.
>
> Some background, as I understand it: Prior to requiring package
> namespaces, we listed package dependencies in "Depends" because the
> required package had to be (1) installed and (2) on the search path in
> order to access its functions. After introducing and requiring
> namespaces, there are very few circumstances in which "Depends" is
> needed because functions from the required package can either be
> imported (via "Imports" and NAMESPACE) and/or referred to using the
> `pkg::fun()` style. "Suggests" packages are maybe needed for examples,
> vignettes, etc. but are not installed by default via
> `install.packages()`, so are not guaranteed to be available.
>
> Some observations:
>
> 1. "Depends" seems to be less useful than before, except in rare cases
> where a package needs to be (a) installed, (b) loaded, and (c) on the
> search path. Imports covers most package dependency use cases.
>
> 2. There is a gap in functionality between "Imports" and "Suggests".
> Sometimes there is a need for functions that should be available
> (i.e., installed) but do not need to be loaded or imported because
> they are rarely used (e.g., graphing functions). Importing the
> functions adds bloat but only putting their package in "Suggests" does
> not guarantee availability when, for example, calling
> `requireNamespace()` or `require()`.
>
Maybe I'm missing something, but isn't that the point of calling
requireNamespace()?  For example:
if (requireNamespace("suggestedPackage"))
  stop("suggestedPackage required but not installed")

That doesn't seem like a heavy burden for package writers when writing
infrequently used functions in their package.  You could even add the
install.packages command to the error message to instruct users to
install the required package.

> Suggestion:
>
> Might it be useful to have a category between "Imports" and "Suggests"
> that covers packages that should be installed but not imported?
>
> This could be done by changing `install.packages()` to cover
> "Suggests" by default, changing the meaning of "Depends" and
> "Imports", or adding a new category to DESCRIPTION.
>
I personally would not want install.packages() to install packages I'm
unlikely to actually use.

It's also not clear to me how importing rarely used functions causes
bloat, but installing all packages for all rarely-used functions does
not cause bloat.

> I am interested in hearing your thoughts on this issue.
>
> Best,
> -Thomas
>
> Thomas J. Leeper
> http://www.thomasleeper.com
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel



-- 
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com
R/Finance 2016 | www.rinfinance.com


From thosjleeper at gmail.com  Tue Aug  2 18:44:22 2016
From: thosjleeper at gmail.com (Thomas J. Leeper)
Date: Tue, 2 Aug 2016 17:44:22 +0100
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <22432.52145.624449.132640@max.nulle.part>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<22432.52145.624449.132640@max.nulle.part>
Message-ID: <CAOC91MQ1-wpMfqLwDQk-dwQ3gcb7wAJS20wNff5QK-gbgL+nrA@mail.gmail.com>

Dirk,

That is useful. I think the "Recommends" category from that link is
pretty much what I am suggesting - something that should be installed
if it's available in the package repository but is not loaded/imported
by default.

Some of those other relationships sound like they would also be
useful, for example in the case you mention.

-Thomas

Thomas J. Leeper
http://www.thomasleeper.com


On Tue, Aug 2, 2016 at 5:34 PM, Dirk Eddelbuettel <edd at debian.org> wrote:
>
> See eg https://www.debian.org/doc/debian-policy/ch-relationships.html
>
> We have other big fish to fry.  Eg many packages have LinkingTo: BH (as Boost
> headers are indeed awesome) but this 120 mb (!!) payload is needed _once_
> during package compilation / installation and never again afterwards.  So
> Build-Depends: would be a nice addition too.
>
> Dirk
>
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From edd at debian.org  Tue Aug  2 19:01:12 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Tue, 2 Aug 2016 12:01:12 -0500
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
Message-ID: <22432.53720.657653.204852@max.nulle.part>


On 2 August 2016 at 11:36, Joshua Ulrich wrote:
| Maybe I'm missing something, but isn't that the point of calling
| requireNamespace()?  For example:
| if (requireNamespace("suggestedPackage"))
|   stop("suggestedPackage required but not installed")
| 
| That doesn't seem like a heavy burden for package writers when writing
| infrequently used functions in their package.  You could even add the
| install.packages command to the error message to instruct users to
| install the required package.

[...]

| I personally would not want install.packages() to install packages I'm
| unlikely to actually use.
| 
| It's also not clear to me how importing rarely used functions causes
| bloat, but installing all packages for all rarely-used functions does
| not cause bloat.

Sadly, some people whose advocacy is taken as religous gospel in some
circles, particularly beginners, advocate pretty much that: treat Suggests:
as Depends: and install it anyway because, hell, why would one tests.

I regularly run (large) reverse depends checks against some of my more widely
used packages and run into this all the time.

We (as a community, including CRAN whose gatekeepers I have failed to
convince about this on on multiple attempts) are doing this wrong.
"Suggests:" really means optionally, rather than unconditionally.  But it
would appear that you and I are about to only ones desiring that behaviour.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From murdoch.duncan at gmail.com  Tue Aug  2 19:12:40 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Tue, 2 Aug 2016 13:12:40 -0400
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <22432.53720.657653.204852@max.nulle.part>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
Message-ID: <79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>

On 02/08/2016 1:01 PM, Dirk Eddelbuettel wrote:
>
> On 2 August 2016 at 11:36, Joshua Ulrich wrote:
> | Maybe I'm missing something, but isn't that the point of calling
> | requireNamespace()?  For example:
> | if (requireNamespace("suggestedPackage"))
> |   stop("suggestedPackage required but not installed")
> |
> | That doesn't seem like a heavy burden for package writers when writing
> | infrequently used functions in their package.  You could even add the
> | install.packages command to the error message to instruct users to
> | install the required package.
>
> [...]
>
> | I personally would not want install.packages() to install packages I'm
> | unlikely to actually use.
> |
> | It's also not clear to me how importing rarely used functions causes
> | bloat, but installing all packages for all rarely-used functions does
> | not cause bloat.
>
> Sadly, some people whose advocacy is taken as religous gospel in some
> circles, particularly beginners, advocate pretty much that: treat Suggests:
> as Depends: and install it anyway because, hell, why would one tests.
>
> I regularly run (large) reverse depends checks against some of my more widely
> used packages and run into this all the time.
>
> We (as a community, including CRAN whose gatekeepers I have failed to
> convince about this on on multiple attempts) are doing this wrong.
> "Suggests:" really means optionally, rather than unconditionally.  But it
> would appear that you and I are about to only ones desiring that behaviour.

I thought I understood Joshua's point (and agreed with it), but you also 
seem to be agreeing with him and I don't understand at all what you're 
saying.

What is "this" in your last paragraph, that you have failed to convince 
CRAN gatekeepers about?

Duncan Murdoch


From edd at debian.org  Tue Aug  2 19:41:58 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Tue, 2 Aug 2016 12:41:58 -0500
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
Message-ID: <22432.56166.592987.654553@max.nulle.part>


On 2 August 2016 at 13:12, Duncan Murdoch wrote:
| On 02/08/2016 1:01 PM, Dirk Eddelbuettel wrote:
| >
| > On 2 August 2016 at 11:36, Joshua Ulrich wrote:
| > | Maybe I'm missing something, but isn't that the point of calling
| > | requireNamespace()?  For example:
| > | if (requireNamespace("suggestedPackage"))
| > |   stop("suggestedPackage required but not installed")
| > |
| > | That doesn't seem like a heavy burden for package writers when writing
| > | infrequently used functions in their package.  You could even add the
| > | install.packages command to the error message to instruct users to
| > | install the required package.
| >
| > [...]
| >
| > | I personally would not want install.packages() to install packages I'm
| > | unlikely to actually use.
| > |
| > | It's also not clear to me how importing rarely used functions causes
| > | bloat, but installing all packages for all rarely-used functions does
| > | not cause bloat.
| >
| > Sadly, some people whose advocacy is taken as religous gospel in some
| > circles, particularly beginners, advocate pretty much that: treat Suggests:
| > as Depends: and install it anyway because, hell, why would one tests.
| >
| > I regularly run (large) reverse depends checks against some of my more widely
| > used packages and run into this all the time.
| >
| > We (as a community, including CRAN whose gatekeepers I have failed to
| > convince about this on on multiple attempts) are doing this wrong.
| > "Suggests:" really means optionally, rather than unconditionally.  But it
| > would appear that you and I are about to only ones desiring that behaviour.
| 
| I thought I understood Joshua's point (and agreed with it), but you also 
| seem to be agreeing with him and I don't understand at all what you're 
| saying.
| 
| What is "this" in your last paragraph, that you have failed to convince 
| CRAN gatekeepers about?

It is really simple:  Having _both_ Suggests: foo _and_ an unconditonal call
to foo::bar() in the code.

Whereas Josh and I argue that it needs to be conditional on requireNames()
coming back TRUE.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From kevinushey at gmail.com  Tue Aug  2 20:00:25 2016
From: kevinushey at gmail.com (Kevin Ushey)
Date: Tue, 2 Aug 2016 11:00:25 -0700
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
Message-ID: <CAJXgQP1uQ1uCy9WJs5a7LEwzNmivQKMGujbE=bGKj2fgwxgV2g@mail.gmail.com>

You could abuse the LinkingTo: field of the DESCRIPTION file, to
specify 'packages you want installed alongside your package that you
won't necessarily use at runtime'. (It's possible that 'R CMD check'
might warn about strange usages of LinkingTo:, but I'm not sure)

You could also just place these packages in Suggests, but guard their
usages with a function that attempts to download, install and load
those packages. E.g. (pseudo-ish code)

    ensure_package_loaded <- function(package) {
      if (requireNamespace(package))
        return(TRUE)
      if (interactive())
       # prompt user to download + install package, then try to load again
      stop("routine requires package but is not installed")
    }

and use it as:

    uses_foo <- function() {
      ensure_package_loaded("foo")
      foo::bar()
    }

This would at least minimize the amount of time spent 'annoying' the
user re: installation of package dependencies (it would only happen
the first time they try to use those functions)

Overall, I think the best resolution here is through clever use of
Suggests + on-demand installation of required packages, rather than
adding another field to the DESCRIPTION file.

Cheers,
Kevin

On Tue, Aug 2, 2016 at 9:26 AM, Thomas J. Leeper <thosjleeper at gmail.com> wrote:
> I have a fairly open-ended question about the handling of package
> dependencies that is inspired by the precise distinction between
> "Depends", "Imports", and "Suggests" listed in DESCRIPTION.
>
> Some background, as I understand it: Prior to requiring package
> namespaces, we listed package dependencies in "Depends" because the
> required package had to be (1) installed and (2) on the search path in
> order to access its functions. After introducing and requiring
> namespaces, there are very few circumstances in which "Depends" is
> needed because functions from the required package can either be
> imported (via "Imports" and NAMESPACE) and/or referred to using the
> `pkg::fun()` style. "Suggests" packages are maybe needed for examples,
> vignettes, etc. but are not installed by default via
> `install.packages()`, so are not guaranteed to be available.
>
> Some observations:
>
> 1. "Depends" seems to be less useful than before, except in rare cases
> where a package needs to be (a) installed, (b) loaded, and (c) on the
> search path. Imports covers most package dependency use cases.
>
> 2. There is a gap in functionality between "Imports" and "Suggests".
> Sometimes there is a need for functions that should be available
> (i.e., installed) but do not need to be loaded or imported because
> they are rarely used (e.g., graphing functions). Importing the
> functions adds bloat but only putting their package in "Suggests" does
> not guarantee availability when, for example, calling
> `requireNamespace()` or `require()`.
>
> Suggestion:
>
> Might it be useful to have a category between "Imports" and "Suggests"
> that covers packages that should be installed but not imported?
>
> This could be done by changing `install.packages()` to cover
> "Suggests" by default, changing the meaning of "Depends" and
> "Imports", or adding a new category to DESCRIPTION.
>
> I am interested in hearing your thoughts on this issue.
>
> Best,
> -Thomas
>
> Thomas J. Leeper
> http://www.thomasleeper.com
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From cdetermanjr at gmail.com  Tue Aug  2 21:17:39 2016
From: cdetermanjr at gmail.com (Charles Determan)
Date: Tue, 2 Aug 2016 14:17:39 -0500
Subject: [R-pkg-devel] Recommendation on qr method export
Message-ID: <CAKxd1KPZQQpHKdu5Sx_zMWxJXgG=yx2wyJfv75HSwiG2rM2Ljg@mail.gmail.com>

Hello,

I am currently working on an implementation of QR decomposition (leveraging
a C++ library via Rcpp).  Naturally I would like to have the R syntax as
similar as possible to base R 'qr' function.  Given the class structure of
my package my instinct was to export an S4/S3 method.

However, the QR decomposition doesn't store the final QR matrix in the same
format as base R via LINPACK, nor does it return 'qraux', 'rank' or 'pivot'
objects but instead a 'betas' object.  The final 'R' and 'Q' matrices are
in fact identical to those ultimately returned by qr.R or qr.Q.

So my question is, given these differences, should I just create a
different function name or would creating a qr.myclass dispatch be
acceptable (whether S3 or S4)?  I would prefer the latter as I would like
the classes to potentially take advantage of previously written code using
'qr'.

Thanks,
Charles

	[[alternative HTML version deleted]]


From edd at debian.org  Tue Aug  2 21:39:06 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Tue, 2 Aug 2016 14:39:06 -0500
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <CAJXgQP1uQ1uCy9WJs5a7LEwzNmivQKMGujbE=bGKj2fgwxgV2g@mail.gmail.com>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAJXgQP1uQ1uCy9WJs5a7LEwzNmivQKMGujbE=bGKj2fgwxgV2g@mail.gmail.com>
Message-ID: <22432.63194.174059.797840@max.nulle.part>


On 2 August 2016 at 11:00, Kevin Ushey wrote:
| You could abuse the LinkingTo: field of the DESCRIPTION file, to
| specify 'packages you want installed alongside your package that you
| won't necessarily use at runtime'. (It's possible that 'R CMD check'
| might warn about strange usages of LinkingTo:, but I'm not sure)

I'd rather not abuse LinkingTo: any further. I fear its feelings are
sufficiently hurt being mostly used for 'IncludeFrom:' and no linking.

Kidding aside I think we have room for new tags in DESCRIPTION. We may as
well do it right.
 
| You could also just place these packages in Suggests, but guard their
| usages with a function that attempts to download, install and load
| those packages. E.g. (pseudo-ish code)
| 
|     ensure_package_loaded <- function(package) {
|       if (requireNamespace(package))
|         return(TRUE)

Nice.  [ And erratum in my previus email where I meant requireNamespace() ]

We could even go one further and store this in a per-package environment,
being filled through .onLoad() or .onAttach().

|       if (interactive())
|        # prompt user to download + install package, then try to load again
|       stop("routine requires package but is not installed")
|     }

I don't see why this should work only when interactive(). I think it should
work all the time.

I also don't think it needs to stop. It is after all just some auxiliary
functionality that Suggests provides.  Eg extra regression tests, say with or
without a certain backend -- and those tests then need the yes/no toggle and
skip if unavailable.
 
| and use it as:
| 
|     uses_foo <- function() {
|       ensure_package_loaded("foo")
|       foo::bar()
|     }

Sure.
 
| This would at least minimize the amount of time spent 'annoying' the
| user re: installation of package dependencies (it would only happen
| the first time they try to use those functions)

I don't really want other packages going off installing autonomously.
We pretty much make this explicit in DESCRIPTION so that the user can make an
informed choice.
 
| Overall, I think the best resolution here is through clever use of
| Suggests + on-demand installation of required packages, rather than
| adding another field to the DESCRIPTION file.

Wholly agreed on some part, less so on the remainders.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From thosjleeper at gmail.com  Tue Aug  2 21:57:57 2016
From: thosjleeper at gmail.com (Thomas J. Leeper)
Date: Tue, 2 Aug 2016 20:57:57 +0100
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <22432.63194.174059.797840@max.nulle.part>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAJXgQP1uQ1uCy9WJs5a7LEwzNmivQKMGujbE=bGKj2fgwxgV2g@mail.gmail.com>
	<22432.63194.174059.797840@max.nulle.part>
Message-ID: <CAOC91MTeGFaD_csRijdDCx-Yc+=B9p6hk2qCDV4AaFcG12Zs8A@mail.gmail.com>

My concerns with installing on the fly are that it (1) requires internet
access during run time, and either (2) involves assumptions about
repository and library locations, or (3) requires exposing all arguments to
install.packages() via higher level functions, or (4) needs interactivity.

-Thomas

On Aug 2, 2016 8:39 PM, "Dirk Eddelbuettel" <edd at debian.org> wrote:

>
> On 2 August 2016 at 11:00, Kevin Ushey wrote:
> | You could abuse the LinkingTo: field of the DESCRIPTION file, to
> | specify 'packages you want installed alongside your package that you
> | won't necessarily use at runtime'. (It's possible that 'R CMD check'
> | might warn about strange usages of LinkingTo:, but I'm not sure)
>
> I'd rather not abuse LinkingTo: any further. I fear its feelings are
> sufficiently hurt being mostly used for 'IncludeFrom:' and no linking.
>
> Kidding aside I think we have room for new tags in DESCRIPTION. We may as
> well do it right.
>
> | You could also just place these packages in Suggests, but guard their
> | usages with a function that attempts to download, install and load
> | those packages. E.g. (pseudo-ish code)
> |
> |     ensure_package_loaded <- function(package) {
> |       if (requireNamespace(package))
> |         return(TRUE)
>
> Nice.  [ And erratum in my previus email where I meant requireNamespace() ]
>
> We could even go one further and store this in a per-package environment,
> being filled through .onLoad() or .onAttach().
>
> |       if (interactive())
> |        # prompt user to download + install package, then try to load
> again
> |       stop("routine requires package but is not installed")
> |     }
>
> I don't see why this should work only when interactive(). I think it should
> work all the time.
>
> I also don't think it needs to stop. It is after all just some auxiliary
> functionality that Suggests provides.  Eg extra regression tests, say with
> or
> without a certain backend -- and those tests then need the yes/no toggle
> and
> skip if unavailable.
>
> | and use it as:
> |
> |     uses_foo <- function() {
> |       ensure_package_loaded("foo")
> |       foo::bar()
> |     }
>
> Sure.
>
> | This would at least minimize the amount of time spent 'annoying' the
> | user re: installation of package dependencies (it would only happen
> | the first time they try to use those functions)
>
> I don't really want other packages going off installing autonomously.
> We pretty much make this explicit in DESCRIPTION so that the user can make
> an
> informed choice.
>
> | Overall, I think the best resolution here is through clever use of
> | Suggests + on-demand installation of required packages, rather than
> | adding another field to the DESCRIPTION file.
>
> Wholly agreed on some part, less so on the remainders.
>
> Dirk
>
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>

	[[alternative HTML version deleted]]


From murdoch.duncan at gmail.com  Tue Aug  2 22:07:19 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Tue, 2 Aug 2016 16:07:19 -0400
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <22432.56166.592987.654553@max.nulle.part>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
Message-ID: <b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>

On 02/08/2016 1:41 PM, Dirk Eddelbuettel wrote:
>
> On 2 August 2016 at 13:12, Duncan Murdoch wrote:
> | On 02/08/2016 1:01 PM, Dirk Eddelbuettel wrote:
> | >
> | > On 2 August 2016 at 11:36, Joshua Ulrich wrote:
> | > | Maybe I'm missing something, but isn't that the point of calling
> | > | requireNamespace()?  For example:
> | > | if (requireNamespace("suggestedPackage"))
> | > |   stop("suggestedPackage required but not installed")
> | > |
> | > | That doesn't seem like a heavy burden for package writers when writing
> | > | infrequently used functions in their package.  You could even add the
> | > | install.packages command to the error message to instruct users to
> | > | install the required package.
> | >
> | > [...]
> | >
> | > | I personally would not want install.packages() to install packages I'm
> | > | unlikely to actually use.
> | > |
> | > | It's also not clear to me how importing rarely used functions causes
> | > | bloat, but installing all packages for all rarely-used functions does
> | > | not cause bloat.
> | >
> | > Sadly, some people whose advocacy is taken as religous gospel in some
> | > circles, particularly beginners, advocate pretty much that: treat Suggests:
> | > as Depends: and install it anyway because, hell, why would one tests.
> | >
> | > I regularly run (large) reverse depends checks against some of my more widely
> | > used packages and run into this all the time.
> | >
> | > We (as a community, including CRAN whose gatekeepers I have failed to
> | > convince about this on on multiple attempts) are doing this wrong.
> | > "Suggests:" really means optionally, rather than unconditionally.  But it
> | > would appear that you and I are about to only ones desiring that behaviour.
> |
> | I thought I understood Joshua's point (and agreed with it), but you also
> | seem to be agreeing with him and I don't understand at all what you're
> | saying.
> |
> | What is "this" in your last paragraph, that you have failed to convince
> | CRAN gatekeepers about?
>
> It is really simple:  Having _both_ Suggests: foo _and_ an unconditonal call
> to foo::bar() in the code.
>
> Whereas Josh and I argue that it needs to be conditional on requireNames()
> coming back TRUE.

I am feeling particularly dense today.  What about "Having _both_ 
Suggests: foo _and_ an unconditonal call to foo::bar() in the code." did 
you fail to convince CRAN about?  That it is a good thing, or a bad thing?

Duncan Murdoch


From edd at debian.org  Tue Aug  2 22:20:02 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Tue, 2 Aug 2016 15:20:02 -0500
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
	<b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
Message-ID: <22433.114.172309.681071@max.nulle.part>


On 2 August 2016 at 16:07, Duncan Murdoch wrote:
| On 02/08/2016 1:41 PM, Dirk Eddelbuettel wrote:
| >
| > On 2 August 2016 at 13:12, Duncan Murdoch wrote:
| > | On 02/08/2016 1:01 PM, Dirk Eddelbuettel wrote:
| > | >
| > | > On 2 August 2016 at 11:36, Joshua Ulrich wrote:
| > | > | Maybe I'm missing something, but isn't that the point of calling
| > | > | requireNamespace()?  For example:
| > | > | if (requireNamespace("suggestedPackage"))
| > | > |   stop("suggestedPackage required but not installed")
| > | > |
| > | > | That doesn't seem like a heavy burden for package writers when writing
| > | > | infrequently used functions in their package.  You could even add the
| > | > | install.packages command to the error message to instruct users to
| > | > | install the required package.
| > | >
| > | > [...]
| > | >
| > | > | I personally would not want install.packages() to install packages I'm
| > | > | unlikely to actually use.
| > | > |
| > | > | It's also not clear to me how importing rarely used functions causes
| > | > | bloat, but installing all packages for all rarely-used functions does
| > | > | not cause bloat.
| > | >
| > | > Sadly, some people whose advocacy is taken as religous gospel in some
| > | > circles, particularly beginners, advocate pretty much that: treat Suggests:
| > | > as Depends: and install it anyway because, hell, why would one tests.
| > | >
| > | > I regularly run (large) reverse depends checks against some of my more widely
| > | > used packages and run into this all the time.
| > | >
| > | > We (as a community, including CRAN whose gatekeepers I have failed to
| > | > convince about this on on multiple attempts) are doing this wrong.
| > | > "Suggests:" really means optionally, rather than unconditionally.  But it
| > | > would appear that you and I are about to only ones desiring that behaviour.
| > |
| > | I thought I understood Joshua's point (and agreed with it), but you also
| > | seem to be agreeing with him and I don't understand at all what you're
| > | saying.
| > |
| > | What is "this" in your last paragraph, that you have failed to convince
| > | CRAN gatekeepers about?
| >
| > It is really simple:  Having _both_ Suggests: foo _and_ an unconditonal call
| > to foo::bar() in the code.
| >
| > Whereas Josh and I argue that it needs to be conditional on requireNames()
| > coming back TRUE.
| 
| I am feeling particularly dense today.  What about "Having _both_ 
| Suggests: foo _and_ an unconditonal call to foo::bar() in the code." did 
| you fail to convince CRAN about?  That it is a good thing, or a bad thing?

It is a Really Bad Thing )TM) because I read Writing R Extensions as meaning
that these ought to be tested for presence (as Suggests != Depends, so we
cannot [rather: should not] assume them) yet package authors are sloppy (and
CRAN let's them, being charged as facilitator to a crime here) and BAM I get
a failing test as some bad, bad code unconditionally calls code that should
only be called conditional on a suggested package actuallt being there.

Hth,  Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From h.wickham at gmail.com  Tue Aug  2 22:20:26 2016
From: h.wickham at gmail.com (Hadley Wickham)
Date: Tue, 2 Aug 2016 15:20:26 -0500
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
	<b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
Message-ID: <CABdHhvGUmvp4nzkGBgD4xN51w-L8qO3PPwDnJmGNx+kNoNi9Og@mail.gmail.com>

>> It is really simple:  Having _both_ Suggests: foo _and_ an unconditonal
>> call
>> to foo::bar() in the code.
>>
>> Whereas Josh and I argue that it needs to be conditional on requireNames()
>> coming back TRUE.
>
>
> I am feeling particularly dense today.  What about "Having _both_ Suggests:
> foo _and_ an unconditonal call to foo::bar() in the code." did you fail to
> convince CRAN about?  That it is a good thing, or a bad thing?

The key question is: should R CMD check work if you the suggested
packages are installed? This generally affects tests, examples, and
vignettes.

If the answer is yes, R CMD check should work, then it would be
helpful for CRAN to enforce this, so that those of us who regularly
run revdep checks on large numbers of packages don't have to install
suggested packages.

Personally, I just install all the suggested dependencies of reverse
dependencies - it's not a huge burden for me since I can install
binaries from CRAN.

Hadley

-- 
http://hadley.nz


From pdalgd at gmail.com  Tue Aug  2 23:34:49 2016
From: pdalgd at gmail.com (Peter Dalgaard)
Date: Tue, 2 Aug 2016 23:34:49 +0200
Subject: [R-pkg-devel] Recommendation on qr method export
In-Reply-To: <CAKxd1KPZQQpHKdu5Sx_zMWxJXgG=yx2wyJfv75HSwiG2rM2Ljg@mail.gmail.com>
References: <CAKxd1KPZQQpHKdu5Sx_zMWxJXgG=yx2wyJfv75HSwiG2rM2Ljg@mail.gmail.com>
Message-ID: <FB51A768-5DFA-46C4-8DDE-9F393EED6817@gmail.com>

Not strictly what you're asking, but at some point it may be important to note that the "QR" method used by lm() and friends (notably anova() and aov()) actually relies on successive orthogonalization. This does yield a QR decomposition but the reverse is not true. A generic X=QR decomposition does orthogonalize, but it does not necessarily hold that the first k columns of Q spans the same subspace as the first k columns of X. LINPACK's QR happens to be implemented as successive orthogonalization, but LAPACK's is not, so only the former is usable with lm().

So, I suppose what I am getting at is that not even lm() uses qr(), it calls LINPACK directly.

-pd


> On 02 Aug 2016, at 21:17 , Charles Determan <cdetermanjr at gmail.com> wrote:
> 
> Hello,
> 
> I am currently working on an implementation of QR decomposition (leveraging
> a C++ library via Rcpp).  Naturally I would like to have the R syntax as
> similar as possible to base R 'qr' function.  Given the class structure of
> my package my instinct was to export an S4/S3 method.
> 
> However, the QR decomposition doesn't store the final QR matrix in the same
> format as base R via LINPACK, nor does it return 'qraux', 'rank' or 'pivot'
> objects but instead a 'betas' object.  The final 'R' and 'Q' matrices are
> in fact identical to those ultimately returned by qr.R or qr.Q.
> 
> So my question is, given these differences, should I just create a
> different function name or would creating a qr.myclass dispatch be
> acceptable (whether S3 or S4)?  I would prefer the latter as I would like
> the classes to potentially take advantage of previously written code using
> 'qr'.
> 
> Thanks,
> Charles
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From murdoch.duncan at gmail.com  Wed Aug  3 00:13:29 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Tue, 2 Aug 2016 18:13:29 -0400
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <22433.114.172309.681071@max.nulle.part>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
	<b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
	<22433.114.172309.681071@max.nulle.part>
Message-ID: <41d5da4d-3430-a0d7-8a56-d5343ffdee52@gmail.com>

On 02/08/2016 4:20 PM, Dirk Eddelbuettel wrote:
>
> On 2 August 2016 at 16:07, Duncan Murdoch wrote:
> | On 02/08/2016 1:41 PM, Dirk Eddelbuettel wrote:
> | >
> | > On 2 August 2016 at 13:12, Duncan Murdoch wrote:
> | > | On 02/08/2016 1:01 PM, Dirk Eddelbuettel wrote:
> | > | >
> | > | > On 2 August 2016 at 11:36, Joshua Ulrich wrote:
> | > | > | Maybe I'm missing something, but isn't that the point of calling
> | > | > | requireNamespace()?  For example:
> | > | > | if (requireNamespace("suggestedPackage"))
> | > | > |   stop("suggestedPackage required but not installed")
> | > | > |
> | > | > | That doesn't seem like a heavy burden for package writers when writing
> | > | > | infrequently used functions in their package.  You could even add the
> | > | > | install.packages command to the error message to instruct users to
> | > | > | install the required package.
> | > | >
> | > | > [...]
> | > | >
> | > | > | I personally would not want install.packages() to install packages I'm
> | > | > | unlikely to actually use.
> | > | > |
> | > | > | It's also not clear to me how importing rarely used functions causes
> | > | > | bloat, but installing all packages for all rarely-used functions does
> | > | > | not cause bloat.
> | > | >
> | > | > Sadly, some people whose advocacy is taken as religous gospel in some
> | > | > circles, particularly beginners, advocate pretty much that: treat Suggests:
> | > | > as Depends: and install it anyway because, hell, why would one tests.
> | > | >
> | > | > I regularly run (large) reverse depends checks against some of my more widely
> | > | > used packages and run into this all the time.
> | > | >
> | > | > We (as a community, including CRAN whose gatekeepers I have failed to
> | > | > convince about this on on multiple attempts) are doing this wrong.
> | > | > "Suggests:" really means optionally, rather than unconditionally.  But it
> | > | > would appear that you and I are about to only ones desiring that behaviour.
> | > |
> | > | I thought I understood Joshua's point (and agreed with it), but you also
> | > | seem to be agreeing with him and I don't understand at all what you're
> | > | saying.
> | > |
> | > | What is "this" in your last paragraph, that you have failed to convince
> | > | CRAN gatekeepers about?
> | >
> | > It is really simple:  Having _both_ Suggests: foo _and_ an unconditonal call
> | > to foo::bar() in the code.
> | >
> | > Whereas Josh and I argue that it needs to be conditional on requireNames()
> | > coming back TRUE.
> |
> | I am feeling particularly dense today.  What about "Having _both_
> | Suggests: foo _and_ an unconditonal call to foo::bar() in the code." did
> | you fail to convince CRAN about?  That it is a good thing, or a bad thing?
>
> It is a Really Bad Thing )TM) because I read Writing R Extensions as meaning
> that these ought to be tested for presence (as Suggests != Depends, so we
> cannot [rather: should not] assume them) yet package authors are sloppy (and
> CRAN let's them, being charged as facilitator to a crime here) and BAM I get
> a failing test as some bad, bad code unconditionally calls code that should
> only be called conditional on a suggested package actuallt being there.

Okay, now I think I understand, but I agree with CRAN.  It is not 
feasible to tell if the test happened somewhere in the code unless we 
enforce a particular way of writing the test.

I would object if I had to write if (requireNamespace("foo")) multiple 
times just to satisfy CRAN's test, when any sane human could tell that 
the first test was sufficient.

For example, if my package Suggests: foo, I should be able to write

if (!requireNamespace("foo"))
   stop("Package foo is needed for this example")

and then merrily call foo::bar() as many times as I like.

Or am I still misunderstanding you?  What particular thing should CRAN 
change?

Duncan Murdoch


From edd at debian.org  Wed Aug  3 00:34:09 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Tue, 2 Aug 2016 17:34:09 -0500
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <41d5da4d-3430-a0d7-8a56-d5343ffdee52@gmail.com>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
	<b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
	<22433.114.172309.681071@max.nulle.part>
	<41d5da4d-3430-a0d7-8a56-d5343ffdee52@gmail.com>
Message-ID: <22433.8161.749443.565578@max.nulle.part>


On 2 August 2016 at 18:13, Duncan Murdoch wrote:
| Okay, now I think I understand, but I agree with CRAN.  It is not 
| feasible to tell if the test happened somewhere in the code unless we 
| enforce a particular way of writing the test.

Debian has well over 20k packages, and they are tested this way.  You just
need to show the will of testing in an _empty_ environment to ensure
_everything_ that is needed is loaded.
 
| I would object if I had to write if (requireNamespace("foo")) multiple 
| times just to satisfy CRAN's test, when any sane human could tell that 
| the first test was sufficient.
| 
| For example, if my package Suggests: foo, I should be able to write
| 
| if (!requireNamespace("foo"))
|    stop("Package foo is needed for this example")
| 
| and then merrily call foo::bar() as many times as I like.
| 
| Or am I still misunderstanding you?  What particular thing should CRAN 
| change?

You seem to misunderstand that both you and I want 

  if (!requireNamespace("foo"))
     stop("Package foo is needed for this example")

(or alternative per-call tests) and that CRAN does not enforce either.

CRAN, like Hadley, just closes its eyes, swallows hard, and then simply loads
everything treating Suggests as if it were Depends.

But it ain't. Suggests != Depends.

Now clearer?

Dirk, now bored of this and it is clearly not going anywhere soon

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From murdoch.duncan at gmail.com  Wed Aug  3 01:45:34 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Tue, 2 Aug 2016 19:45:34 -0400
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <22433.8161.749443.565578@max.nulle.part>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
	<b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
	<22433.114.172309.681071@max.nulle.part>
	<41d5da4d-3430-a0d7-8a56-d5343ffdee52@gmail.com>
	<22433.8161.749443.565578@max.nulle.part>
Message-ID: <150d50f3-8e37-7799-3f9f-e60d5cbba952@gmail.com>

On 02/08/2016 6:34 PM, Dirk Eddelbuettel wrote:
>
> On 2 August 2016 at 18:13, Duncan Murdoch wrote:
> | Okay, now I think I understand, but I agree with CRAN.  It is not
> | feasible to tell if the test happened somewhere in the code unless we
> | enforce a particular way of writing the test.
>
> Debian has well over 20k packages, and they are tested this way.  You just
> need to show the will of testing in an _empty_ environment to ensure
> _everything_ that is needed is loaded.
>
> | I would object if I had to write if (requireNamespace("foo")) multiple
> | times just to satisfy CRAN's test, when any sane human could tell that
> | the first test was sufficient.
> |
> | For example, if my package Suggests: foo, I should be able to write
> |
> | if (!requireNamespace("foo"))
> |    stop("Package foo is needed for this example")
> |
> | and then merrily call foo::bar() as many times as I like.
> |
> | Or am I still misunderstanding you?  What particular thing should CRAN
> | change?
>
> You seem to misunderstand that both you and I want
>
>   if (!requireNamespace("foo"))
>      stop("Package foo is needed for this example")
>
> (or alternative per-call tests) and that CRAN does not enforce either.
>
> CRAN, like Hadley, just closes its eyes, swallows hard, and then simply loads
> everything treating Suggests as if it were Depends.
>
> But it ain't. Suggests != Depends.
>
> Now clearer?


So really what you're suggesting is that CRAN should run tests with the 
suggested packages absent.  Presumably tests should also be run with 
them present.

But if they did that, the code that I want to write would call stop() 
and fail.  So we'd need some way to say "Let the user know they need 
'foo' to run this, but don't fail."  And we'd need to phase this in 
really gradually, because tons of packages are using code like my example.

You volunteered to help CRAN package checking.  Why not put together 
code to implement your idea, and see how big the problem would be to 
phase it in, by seeing how many packages fail under it?

Duncan Murdoch


From mark.vanderloo at gmail.com  Wed Aug  3 10:13:34 2016
From: mark.vanderloo at gmail.com (Mark van der Loo)
Date: Wed, 03 Aug 2016 08:13:34 +0000
Subject: [R-pkg-devel] openMP/reduction statement causes build crash on
	travis-ci
Message-ID: <CAOKDuOg7JtNUmk4q5Bm91oxdOkfDCGQBOnvx5bNEobfRv99aXg@mail.gmail.com>

Dear pkg developers,


I'm working on a package using C code and openMP. The package builds and
tests fine on my own machine[1] and also on r-hub[2]. However on travis-ci
the build crashes[3] with the following message (plus a few similar):

gower.c:297:29: error: expected ?+?, ?*?, ?-?, ?&?, ?^?, ?|?, ?&&?, or ?||?
before ?min?

The line in question is an #omp pragma statement:

  #pragma omp for reduction(min:imin), reduction(max:imax)


I am using #pragma omp statements all over the place and this is the only
type causing crashes. I'm guessing it has something to do with travis
building on a 12.04 ubuntu VM with a rather old  gcc (4.6.3).

So I have two questions:

1. Has anyone else seen this? Or am I missing something?
2. Is there a workaround, or should I just go for another build service
(which one)?

Cheers,
Mark


[1] Linux duvel 4.4.0-31-generic #50-Ubuntu SMP Wed Jul 13 00:07:12 UTC
2016 x86_64 x86_64 x86_64 GNU/Linux w/gcc 5.4.0, libgomp1.0.0
[2]
https://builder.r-hub.io/status/gower_0.0.1.tar.gz-8c487e92f4af364ee73f85ca8f59775c
[3] https://travis-ci.org/markvanderloo/gower#L619

	[[alternative HTML version deleted]]


From mark.vanderloo at gmail.com  Wed Aug  3 11:32:11 2016
From: mark.vanderloo at gmail.com (Mark van der Loo)
Date: Wed, 03 Aug 2016 09:32:11 +0000
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <150d50f3-8e37-7799-3f9f-e60d5cbba952@gmail.com>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
	<b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
	<22433.114.172309.681071@max.nulle.part>
	<41d5da4d-3430-a0d7-8a56-d5343ffdee52@gmail.com>
	<22433.8161.749443.565578@max.nulle.part>
	<150d50f3-8e37-7799-3f9f-e60d5cbba952@gmail.com>
Message-ID: <CAOKDuOhEZwpWD_h59bRnei6B_Q3XsC5F0aeueTkn3jOaqAVzTw@mail.gmail.com>

After reading the link in Dirk's initial reply, how about adding
fields 'Recommends'
and 'Build-Depends' to DESCRIPTION as in Debian?

Recommends: only gets installed, can be used via if(requireNamespace())
from the package and in pkg tests[1]. [Debian: The Recommends field should
list packages that would be found together with this one in all but unusual
installations.]
Build-Depends: gets installed before build, removed after.
Suggests: only installed when requested at install.packages() and only used
in examples/vignettes.

If 'tons of packages' are using if(requireNamespace) in their package code
there seems to be a need for something like this. Compliance to the above
can be checked automatically and  a gradual implementation via
NOTE->WARNING->ERROR in R CMD check seems possible.

Perhaps more controversially a 'Breaks' field could be considered. There
are a few packages out there that have many, many, dependencies.
Implementing breaking updates currently depends on the willingness of many
authors to update their package or convincing the CRAN maintainers to allow
for (temporary) breakage.

The suggestion to have functions auto-install things is very inconvenient
for the good reasons pointed out by Thomas. Additionally, it is often based
on the wrong assumptions. Example: the RGtk2 package has this habit of
trying to install when libgtk2 is not on the path. But in my case that is
often exactly the case: it is just not on the path (libgtk2 is on the
network, the VM just doesn't know yet). So I'd rather have a proper and
accurate error message (which is good practice anyway).


Best,
Mark

[1] actually, once we know a pkg is Recommended, the 'if(requireNamespace)'
could even be absorbed in the :: operator.




Op wo 3 aug. 2016 om 01:46 schreef Duncan Murdoch <murdoch.duncan at gmail.com
>:

> On 02/08/2016 6:34 PM, Dirk Eddelbuettel wrote:
> >
> > On 2 August 2016 at 18:13, Duncan Murdoch wrote:
> > | Okay, now I think I understand, but I agree with CRAN.  It is not
> > | feasible to tell if the test happened somewhere in the code unless we
> > | enforce a particular way of writing the test.
> >
> > Debian has well over 20k packages, and they are tested this way.  You
> just
> > need to show the will of testing in an _empty_ environment to ensure
> > _everything_ that is needed is loaded.
> >
> > | I would object if I had to write if (requireNamespace("foo")) multiple
> > | times just to satisfy CRAN's test, when any sane human could tell that
> > | the first test was sufficient.
> > |
> > | For example, if my package Suggests: foo, I should be able to write
> > |
> > | if (!requireNamespace("foo"))
> > |    stop("Package foo is needed for this example")
> > |
> > | and then merrily call foo::bar() as many times as I like.
> > |
> > | Or am I still misunderstanding you?  What particular thing should CRAN
> > | change?
> >
> > You seem to misunderstand that both you and I want
> >
> >   if (!requireNamespace("foo"))
> >      stop("Package foo is needed for this example")
> >
> > (or alternative per-call tests) and that CRAN does not enforce either.
> >
> > CRAN, like Hadley, just closes its eyes, swallows hard, and then simply
> loads
> > everything treating Suggests as if it were Depends.
> >
> > But it ain't. Suggests != Depends.
> >
> > Now clearer?
>
>
> So really what you're suggesting is that CRAN should run tests with the
> suggested packages absent.  Presumably tests should also be run with
> them present.
>
> But if they did that, the code that I want to write would call stop()
> and fail.  So we'd need some way to say "Let the user know they need
> 'foo' to run this, but don't fail."  And we'd need to phase this in
> really gradually, because tons of packages are using code like my example.
>
> You volunteered to help CRAN package checking.  Why not put together
> code to implement your idea, and see how big the problem would be to
> phase it in, by seeing how many packages fail under it?
>
> Duncan Murdoch
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>

	[[alternative HTML version deleted]]


From murdoch.duncan at gmail.com  Wed Aug  3 13:41:26 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Wed, 3 Aug 2016 07:41:26 -0400
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <CAOKDuOhEZwpWD_h59bRnei6B_Q3XsC5F0aeueTkn3jOaqAVzTw@mail.gmail.com>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
	<b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
	<22433.114.172309.681071@max.nulle.part>
	<41d5da4d-3430-a0d7-8a56-d5343ffdee52@gmail.com>
	<22433.8161.749443.565578@max.nulle.part>
	<150d50f3-8e37-7799-3f9f-e60d5cbba952@gmail.com>
	<CAOKDuOhEZwpWD_h59bRnei6B_Q3XsC5F0aeueTkn3jOaqAVzTw@mail.gmail.com>
Message-ID: <85adbe47-244a-1988-9bb4-c013ca68272e@gmail.com>

On 03/08/2016 5:32 AM, Mark van der Loo wrote:
>
> After reading the link in Dirk's initial reply, how about adding fields
> 'Recommends' and 'Build-Depends' to DESCRIPTION as in Debian?
>
> Recommends: only gets installed, can be used via if(requireNamespace())
> from the package and in pkg tests[1]. [Debian: The Recommends field
> should list packages that would be found together with this one in all
> but unusual installations.]
> Build-Depends: gets installed before build, removed after.
> Suggests: only installed when requested at install.packages() and only
> used in examples/vignettes.

I think the distinction between Recommends and Suggests is too subtle 
here.  I already think it's a bad thing that we are using these words in 
ways that don't really correspond to English usage.  I'd much rather 
have a way of declaring explicitly the different aspects of dependence 
on a package rather than bundling them up into cute labels, but it's too 
late for that now.  However, we don't need to make things worse.

>
> If 'tons of packages' are using if(requireNamespace) in their package
> code there seems to be a need for something like this. Compliance to the
> above can be checked automatically and  a gradual implementation via
> NOTE->WARNING->ERROR in R CMD check seems possible.

I don't follow the argument here.  What problem are you solving?

> Perhaps more controversially a 'Breaks' field could be considered. There
> are a few packages out there that have many, many, dependencies.
> Implementing breaking updates currently depends on the willingness of
> many authors to update their package or convincing the CRAN maintainers
> to allow for (temporary) breakage.

This isn't controversial, it's just a bad idea.  Don't encourage people 
to break things.

> The suggestion to have functions auto-install things is very
> inconvenient for the good reasons pointed out by Thomas. Additionally,
> it is often based on the wrong assumptions. Example: the RGtk2 package
> has this habit of trying to install when libgtk2 is not on the path. But
> in my case that is often exactly the case: it is just not on the path
> (libgtk2 is on the network, the VM just doesn't know yet). So I'd rather
> have a proper and accurate error message (which is good practice anyway).
>
>
> Best,
> Mark
>
> [1] actually, once we know a pkg is Recommended, the
> 'if(requireNamespace)' could even be absorbed in the :: operator.

I don't see how :: would be any different than it is now.  If you don't 
have foo available, and you try to use foo::bar(), what would happen 
other than an error?

Duncan Murdoch

>
>
>
>
> Op wo 3 aug. 2016 om 01:46 schreef Duncan Murdoch
> <murdoch.duncan at gmail.com <mailto:murdoch.duncan at gmail.com>>:
>
>     On 02/08/2016 6:34 PM, Dirk Eddelbuettel wrote:
>     >
>     > On 2 August 2016 at 18:13, Duncan Murdoch wrote:
>     > | Okay, now I think I understand, but I agree with CRAN.  It is not
>     > | feasible to tell if the test happened somewhere in the code
>     unless we
>     > | enforce a particular way of writing the test.
>     >
>     > Debian has well over 20k packages, and they are tested this way.
>     You just
>     > need to show the will of testing in an _empty_ environment to ensure
>     > _everything_ that is needed is loaded.
>     >
>     > | I would object if I had to write if (requireNamespace("foo"))
>     multiple
>     > | times just to satisfy CRAN's test, when any sane human could
>     tell that
>     > | the first test was sufficient.
>     > |
>     > | For example, if my package Suggests: foo, I should be able to write
>     > |
>     > | if (!requireNamespace("foo"))
>     > |    stop("Package foo is needed for this example")
>     > |
>     > | and then merrily call foo::bar() as many times as I like.
>     > |
>     > | Or am I still misunderstanding you?  What particular thing
>     should CRAN
>     > | change?
>     >
>     > You seem to misunderstand that both you and I want
>     >
>     >   if (!requireNamespace("foo"))
>     >      stop("Package foo is needed for this example")
>     >
>     > (or alternative per-call tests) and that CRAN does not enforce either.
>     >
>     > CRAN, like Hadley, just closes its eyes, swallows hard, and then
>     simply loads
>     > everything treating Suggests as if it were Depends.
>     >
>     > But it ain't. Suggests != Depends.
>     >
>     > Now clearer?
>
>
>     So really what you're suggesting is that CRAN should run tests with the
>     suggested packages absent.  Presumably tests should also be run with
>     them present.
>
>     But if they did that, the code that I want to write would call stop()
>     and fail.  So we'd need some way to say "Let the user know they need
>     'foo' to run this, but don't fail."  And we'd need to phase this in
>     really gradually, because tons of packages are using code like my
>     example.
>
>     You volunteered to help CRAN package checking.  Why not put together
>     code to implement your idea, and see how big the problem would be to
>     phase it in, by seeing how many packages fail under it?
>
>     Duncan Murdoch
>
>     ______________________________________________
>     R-package-devel at r-project.org <mailto:R-package-devel at r-project.org>
>     mailing list
>     https://stat.ethz.ch/mailman/listinfo/r-package-devel
>


From edd at debian.org  Wed Aug  3 14:24:44 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Wed, 3 Aug 2016 07:24:44 -0500
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <150d50f3-8e37-7799-3f9f-e60d5cbba952@gmail.com>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
	<b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
	<22433.114.172309.681071@max.nulle.part>
	<41d5da4d-3430-a0d7-8a56-d5343ffdee52@gmail.com>
	<22433.8161.749443.565578@max.nulle.part>
	<150d50f3-8e37-7799-3f9f-e60d5cbba952@gmail.com>
Message-ID: <22433.57996.144409.881996@max.nulle.part>


On 2 August 2016 at 19:45, Duncan Murdoch wrote:
| Why not put together code to implement your idea, and see how big the
| problem would be to phase it in, by seeing how many packages fail under it?

Ahh, the old 'put-up-or-shut-up' gambit, very nice. Big fan of that myself.

I have been sitting on the need to build better infrastructure for my reverse
depends checks anyway, and may get there over the fall.  Or not as I have
been saying that for a long time...  It will likely be Docker-based which may
or may not be suitable for CRAN, but should be for r-hub which may get this
all by itself too.  Not sure of this can be done in R alone.

Then again, users of TravisCI know that just toggling

_R_CHECK_FORCE_SUGGESTS_=FALSE

does it too so in that sense it is already there, but not used?

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From edd at debian.org  Wed Aug  3 14:38:53 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Wed, 3 Aug 2016 07:38:53 -0500
Subject: [R-pkg-devel] openMP/reduction statement causes build crash
	on	travis-ci
In-Reply-To: <CAOKDuOg7JtNUmk4q5Bm91oxdOkfDCGQBOnvx5bNEobfRv99aXg@mail.gmail.com>
References: <CAOKDuOg7JtNUmk4q5Bm91oxdOkfDCGQBOnvx5bNEobfRv99aXg@mail.gmail.com>
Message-ID: <22433.58845.750959.250128@max.nulle.part>


On 3 August 2016 at 08:13, Mark van der Loo wrote:
| Dear pkg developers,
| 
| 
| I'm working on a package using C code and openMP. The package builds and
| tests fine on my own machine[1] and also on r-hub[2]. However on travis-ci
| the build crashes[3] with the following message (plus a few similar):
| 
| gower.c:297:29: error: expected ?+?, ?*?, ?-?, ?&?, ?^?, ?|?, ?&&?, or ?||?
| before ?min?
| 
| The line in question is an #omp pragma statement:
| 
|   #pragma omp for reduction(min:imin), reduction(max:imax)
| 
| 
| I am using #pragma omp statements all over the place and this is the only
| type causing crashes. I'm guessing it has something to do with travis
| building on a 12.04 ubuntu VM with a rather old  gcc (4.6.3).
| 
| So I have two questions:
| 
| 1. Has anyone else seen this? Or am I missing something?
| 2. Is there a workaround, or should I just go for another build service
| (which one)?

You can actually switch to 'Trusty' aka 14.04.

That has been around for a bit, and AFAIK works with both the old scheme (ie
r-travis) or the new scheme. [ I am partial to the old scheme which I now use
via this fork http://eddelbuettel.github.io/r-travis/ -- and my drat and
digest packages were the first to adopt it. ]

We can take this off-line, but this should work.  I first used this when I
needed g++-4.8 and I am pretty sure I have a .travis.yml somewhere using
g++-4.9 because it was needed in one project.  "Yes we can."

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From mark.vanderloo at gmail.com  Wed Aug  3 15:04:07 2016
From: mark.vanderloo at gmail.com (Mark van der Loo)
Date: Wed, 03 Aug 2016 13:04:07 +0000
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <85adbe47-244a-1988-9bb4-c013ca68272e@gmail.com>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
	<b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
	<22433.114.172309.681071@max.nulle.part>
	<41d5da4d-3430-a0d7-8a56-d5343ffdee52@gmail.com>
	<22433.8161.749443.565578@max.nulle.part>
	<150d50f3-8e37-7799-3f9f-e60d5cbba952@gmail.com>
	<CAOKDuOhEZwpWD_h59bRnei6B_Q3XsC5F0aeueTkn3jOaqAVzTw@mail.gmail.com>
	<85adbe47-244a-1988-9bb4-c013ca68272e@gmail.com>
Message-ID: <CAOKDuOgdvb73-QTYYtkU3UN4z7V-+Y56zvuGB+sXfnFJYsQacA@mail.gmail.com>

>> Recommends: only gets installed, can be used via if(requireNamespace())
>> from the package and in pkg tests[1] [snip]
>> Build-Depends: gets installed before build, removed after.
>> Suggests: only installed when requested at install.packages() and only
>> used in examples/vignettes.

[snip]
>  I'd much rather
> have a way of declaring explicitly the different aspects of dependence
> on a package rather than bundling them up into cute labels,

Agreed

> but it's too late for that now.  However, we don't need to make things
worse.

Disagreed. We could follow the well-established practices of Debian (and
CRAN already does that, partially).


>> If 'tons of packages' are using if(requireNamespace) in their package
>> code there seems to be a need for something like this. [snip]

> I don't follow the argument here.  What problem are you solving?

Basically I'm trying to address the idea suggested by Thomas, who started
this conversation, and make it a bit more explicit. I felt that the
discussion went a little off-track there.

Right now, when package code (not examples) uses a suggested package, part
of that package will by default not work - at least that's how people use
it now. I would like it to work by default. For examples/vignettes you
could be more forgiving since running an example is not core functionality
of a package.

>> Perhaps more controversially a 'Breaks' field could be considered. [snip]

> This isn't controversial, it's just a bad idea.  Don't encourage people
> to break things.

Your reaction just proved my point about it being controversial. More
seriously, real progress is hardly ever possible without breaking things,
so I think at least people could have a serious discussion about it before
dismissing it simply as a bad idea. The Debian community obviously once
thought it was a good idea, so why not discuss it for R/CRAN? (discussions
are also an important way to progress even if no line of code is changed).
At the moment, I'm inclined against the idea, but I for one like to see me
proven wrong.


>> [1] actually, once we know a pkg is Recommended, the
>> 'if(requireNamespace)' could even be absorbed in the :: operator.

>I don't see how :: would be any different than it is now.  If you don't
>have foo available, and you try to use foo::bar(), what would happen
>other than an error?

I think you're right there. <resets brain>.

Best,
Mark


Op wo 3 aug. 2016 om 13:41 schreef Duncan Murdoch <murdoch.duncan at gmail.com
>:

> On 03/08/2016 5:32 AM, Mark van der Loo wrote:
> >
> > After reading the link in Dirk's initial reply, how about adding fields
> > 'Recommends' and 'Build-Depends' to DESCRIPTION as in Debian?
> >
> > Recommends: only gets installed, can be used via if(requireNamespace())
> > from the package and in pkg tests[1]. [Debian: The Recommends field
> > should list packages that would be found together with this one in all
> > but unusual installations.]
> > Build-Depends: gets installed before build, removed after.
> > Suggests: only installed when requested at install.packages() and only
> > used in examples/vignettes.
>
> I think the distinction between Recommends and Suggests is too subtle
> here.  I already think it's a bad thing that we are using these words in
> ways that don't really correspond to English usage.  I'd much rather
> have a way of declaring explicitly the different aspects of dependence
> on a package rather than bundling them up into cute labels, but it's too
> late for that now.  However, we don't need to make things worse.
>
> >
> > If 'tons of packages' are using if(requireNamespace) in their package
> > code there seems to be a need for something like this. Compliance to the
> > above can be checked automatically and  a gradual implementation via
> > NOTE->WARNING->ERROR in R CMD check seems possible.
>
> I don't follow the argument here.  What problem are you solving?
>
> > Perhaps more controversially a 'Breaks' field could be considered. There
> > are a few packages out there that have many, many, dependencies.
> > Implementing breaking updates currently depends on the willingness of
> > many authors to update their package or convincing the CRAN maintainers
> > to allow for (temporary) breakage.
>
> This isn't controversial, it's just a bad idea.  Don't encourage people
> to break things.
>
> > The suggestion to have functions auto-install things is very
> > inconvenient for the good reasons pointed out by Thomas. Additionally,
> > it is often based on the wrong assumptions. Example: the RGtk2 package
> > has this habit of trying to install when libgtk2 is not on the path. But
> > in my case that is often exactly the case: it is just not on the path
> > (libgtk2 is on the network, the VM just doesn't know yet). So I'd rather
> > have a proper and accurate error message (which is good practice anyway).
> >
> >
> > Best,
> > Mark
> >
> > [1] actually, once we know a pkg is Recommended, the
> > 'if(requireNamespace)' could even be absorbed in the :: operator.
>
> I don't see how :: would be any different than it is now.  If you don't
> have foo available, and you try to use foo::bar(), what would happen
> other than an error?
>
> Duncan Murdoch
>
> >
> >
> >
> >
> > Op wo 3 aug. 2016 om 01:46 schreef Duncan Murdoch
> > <murdoch.duncan at gmail.com <mailto:murdoch.duncan at gmail.com>>:
> >
> >     On 02/08/2016 6:34 PM, Dirk Eddelbuettel wrote:
> >     >
> >     > On 2 August 2016 at 18:13, Duncan Murdoch wrote:
> >     > | Okay, now I think I understand, but I agree with CRAN.  It is not
> >     > | feasible to tell if the test happened somewhere in the code
> >     unless we
> >     > | enforce a particular way of writing the test.
> >     >
> >     > Debian has well over 20k packages, and they are tested this way.
> >     You just
> >     > need to show the will of testing in an _empty_ environment to
> ensure
> >     > _everything_ that is needed is loaded.
> >     >
> >     > | I would object if I had to write if (requireNamespace("foo"))
> >     multiple
> >     > | times just to satisfy CRAN's test, when any sane human could
> >     tell that
> >     > | the first test was sufficient.
> >     > |
> >     > | For example, if my package Suggests: foo, I should be able to
> write
> >     > |
> >     > | if (!requireNamespace("foo"))
> >     > |    stop("Package foo is needed for this example")
> >     > |
> >     > | and then merrily call foo::bar() as many times as I like.
> >     > |
> >     > | Or am I still misunderstanding you?  What particular thing
> >     should CRAN
> >     > | change?
> >     >
> >     > You seem to misunderstand that both you and I want
> >     >
> >     >   if (!requireNamespace("foo"))
> >     >      stop("Package foo is needed for this example")
> >     >
> >     > (or alternative per-call tests) and that CRAN does not enforce
> either.
> >     >
> >     > CRAN, like Hadley, just closes its eyes, swallows hard, and then
> >     simply loads
> >     > everything treating Suggests as if it were Depends.
> >     >
> >     > But it ain't. Suggests != Depends.
> >     >
> >     > Now clearer?
> >
> >
> >     So really what you're suggesting is that CRAN should run tests with
> the
> >     suggested packages absent.  Presumably tests should also be run with
> >     them present.
> >
> >     But if they did that, the code that I want to write would call stop()
> >     and fail.  So we'd need some way to say "Let the user know they need
> >     'foo' to run this, but don't fail."  And we'd need to phase this in
> >     really gradually, because tons of packages are using code like my
> >     example.
> >
> >     You volunteered to help CRAN package checking.  Why not put together
> >     code to implement your idea, and see how big the problem would be to
> >     phase it in, by seeing how many packages fail under it?
> >
> >     Duncan Murdoch
> >
> >     ______________________________________________
> >     R-package-devel at r-project.org <mailto:R-package-devel at r-project.org>
> >     mailing list
> >     https://stat.ethz.ch/mailman/listinfo/r-package-devel
> >
>
>

	[[alternative HTML version deleted]]


From cdetermanjr at gmail.com  Wed Aug  3 15:16:59 2016
From: cdetermanjr at gmail.com (Charles Determan)
Date: Wed, 3 Aug 2016 08:16:59 -0500
Subject: [R-pkg-devel] Recommendation on qr method export
In-Reply-To: <FB51A768-5DFA-46C4-8DDE-9F393EED6817@gmail.com>
References: <CAKxd1KPZQQpHKdu5Sx_zMWxJXgG=yx2wyJfv75HSwiG2rM2Ljg@mail.gmail.com>
	<FB51A768-5DFA-46C4-8DDE-9F393EED6817@gmail.com>
Message-ID: <CAKxd1KO16f3yic_AoMTiqsx0zgX2_f=nTGu9XQnoOqVv+ckGZg@mail.gmail.com>

Thanks for the input Peter.  I suppose I never looked at lm() to see how it
was used there.  Given that though, do you see any reason then to not
create an S3/S4 method if different methods are used for different
functions?  I'm just looking for some design guidance from the community
here before I just implement something that may cause more confusion.

Regards,
Charles

On Tue, Aug 2, 2016 at 4:34 PM, Peter Dalgaard <pdalgd at gmail.com> wrote:

> Not strictly what you're asking, but at some point it may be important to
> note that the "QR" method used by lm() and friends (notably anova() and
> aov()) actually relies on successive orthogonalization. This does yield a
> QR decomposition but the reverse is not true. A generic X=QR decomposition
> does orthogonalize, but it does not necessarily hold that the first k
> columns of Q spans the same subspace as the first k columns of X. LINPACK's
> QR happens to be implemented as successive orthogonalization, but LAPACK's
> is not, so only the former is usable with lm().
>
> So, I suppose what I am getting at is that not even lm() uses qr(), it
> calls LINPACK directly.
>
> -pd
>
>
> > On 02 Aug 2016, at 21:17 , Charles Determan <cdetermanjr at gmail.com>
> wrote:
> >
> > Hello,
> >
> > I am currently working on an implementation of QR decomposition
> (leveraging
> > a C++ library via Rcpp).  Naturally I would like to have the R syntax as
> > similar as possible to base R 'qr' function.  Given the class structure
> of
> > my package my instinct was to export an S4/S3 method.
> >
> > However, the QR decomposition doesn't store the final QR matrix in the
> same
> > format as base R via LINPACK, nor does it return 'qraux', 'rank' or
> 'pivot'
> > objects but instead a 'betas' object.  The final 'R' and 'Q' matrices are
> > in fact identical to those ultimately returned by qr.R or qr.Q.
> >
> > So my question is, given these differences, should I just create a
> > different function name or would creating a qr.myclass dispatch be
> > acceptable (whether S3 or S4)?  I would prefer the latter as I would like
> > the classes to potentially take advantage of previously written code
> using
> > 'qr'.
> >
> > Thanks,
> > Charles
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-package-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-package-devel
>
>

	[[alternative HTML version deleted]]


From thosjleeper at gmail.com  Wed Aug  3 15:20:59 2016
From: thosjleeper at gmail.com (Thomas J. Leeper)
Date: Wed, 3 Aug 2016 14:20:59 +0100
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <CAOKDuOgdvb73-QTYYtkU3UN4z7V-+Y56zvuGB+sXfnFJYsQacA@mail.gmail.com>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
	<b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
	<22433.114.172309.681071@max.nulle.part>
	<41d5da4d-3430-a0d7-8a56-d5343ffdee52@gmail.com>
	<22433.8161.749443.565578@max.nulle.part>
	<150d50f3-8e37-7799-3f9f-e60d5cbba952@gmail.com>
	<CAOKDuOhEZwpWD_h59bRnei6B_Q3XsC5F0aeueTkn3jOaqAVzTw@mail.gmail.com>
	<85adbe47-244a-1988-9bb4-c013ca68272e@gmail.com>
	<CAOKDuOgdvb73-QTYYtkU3UN4z7V-+Y56zvuGB+sXfnFJYsQacA@mail.gmail.com>
Message-ID: <CAOC91MTPkYRBd4GZxdNhGXr+MM=yab3P_9Ah6z-30wUsEQc_Lg@mail.gmail.com>

The issue seems to boil down to the fact that Suggests is covering two
very different use cases: (a) conditional package code and (b)
example/test/vignette code.

Consider a package (say "foo") that is only used in tests. Users do
not need "foo" since package code never calls it. If our package
instead calls "foo" conditionally (requireNamespace(); foo::bar(),
etc.), then users may very well want "foo" and need it much more than
they would if "foo" were only used in tests. Yet DESCRIPTION does not
allow a distinction two be made between these two scenarios.

I think the length and complexity of the discussion in WRE[1] makes
clear that Suggests is being used two cover these two very different
use cases.

-Thomas

[1] https://cran.r-project.org/doc/manuals/r-devel/R-exts.html#Package-Dependencies

Thomas J. Leeper
http://www.thomasleeper.com


On Wed, Aug 3, 2016 at 2:04 PM, Mark van der Loo
<mark.vanderloo at gmail.com> wrote:
>>> Recommends: only gets installed, can be used via if(requireNamespace())
>>> from the package and in pkg tests[1] [snip]
>>> Build-Depends: gets installed before build, removed after.
>>> Suggests: only installed when requested at install.packages() and only
>>> used in examples/vignettes.
>
> [snip]
>>  I'd much rather
>> have a way of declaring explicitly the different aspects of dependence
>> on a package rather than bundling them up into cute labels,
>
> Agreed
>
>> but it's too late for that now.  However, we don't need to make things
>> worse.
>
> Disagreed. We could follow the well-established practices of Debian (and
> CRAN already does that, partially).
>
>
>>> If 'tons of packages' are using if(requireNamespace) in their package
>>> code there seems to be a need for something like this. [snip]
>
>> I don't follow the argument here.  What problem are you solving?
>
> Basically I'm trying to address the idea suggested by Thomas, who started
> this conversation, and make it a bit more explicit. I felt that the
> discussion went a little off-track there.
>
> Right now, when package code (not examples) uses a suggested package, part
> of that package will by default not work - at least that's how people use it
> now. I would like it to work by default. For examples/vignettes you could be
> more forgiving since running an example is not core functionality of a
> package.
>
>>> Perhaps more controversially a 'Breaks' field could be considered. [snip]
>
>> This isn't controversial, it's just a bad idea.  Don't encourage people
>> to break things.
>
> Your reaction just proved my point about it being controversial. More
> seriously, real progress is hardly ever possible without breaking things, so
> I think at least people could have a serious discussion about it before
> dismissing it simply as a bad idea. The Debian community obviously once
> thought it was a good idea, so why not discuss it for R/CRAN? (discussions
> are also an important way to progress even if no line of code is changed).
> At the moment, I'm inclined against the idea, but I for one like to see me
> proven wrong.
>
>
>>> [1] actually, once we know a pkg is Recommended, the
>>> 'if(requireNamespace)' could even be absorbed in the :: operator.
>
>>I don't see how :: would be any different than it is now.  If you don't
>>have foo available, and you try to use foo::bar(), what would happen
>>other than an error?
>
> I think you're right there. <resets brain>.
>
> Best,
> Mark
>
>
> Op wo 3 aug. 2016 om 13:41 schreef Duncan Murdoch
> <murdoch.duncan at gmail.com>:
>>
>> On 03/08/2016 5:32 AM, Mark van der Loo wrote:
>> >
>> > After reading the link in Dirk's initial reply, how about adding fields
>> > 'Recommends' and 'Build-Depends' to DESCRIPTION as in Debian?
>> >
>> > Recommends: only gets installed, can be used via if(requireNamespace())
>> > from the package and in pkg tests[1]. [Debian: The Recommends field
>> > should list packages that would be found together with this one in all
>> > but unusual installations.]
>> > Build-Depends: gets installed before build, removed after.
>> > Suggests: only installed when requested at install.packages() and only
>> > used in examples/vignettes.
>>
>> I think the distinction between Recommends and Suggests is too subtle
>> here.  I already think it's a bad thing that we are using these words in
>> ways that don't really correspond to English usage.  I'd much rather
>> have a way of declaring explicitly the different aspects of dependence
>> on a package rather than bundling them up into cute labels, but it's too
>> late for that now.  However, we don't need to make things worse.
>>
>> >
>> > If 'tons of packages' are using if(requireNamespace) in their package
>> > code there seems to be a need for something like this. Compliance to the
>> > above can be checked automatically and  a gradual implementation via
>> > NOTE->WARNING->ERROR in R CMD check seems possible.
>>
>> I don't follow the argument here.  What problem are you solving?
>>
>> > Perhaps more controversially a 'Breaks' field could be considered. There
>> > are a few packages out there that have many, many, dependencies.
>> > Implementing breaking updates currently depends on the willingness of
>> > many authors to update their package or convincing the CRAN maintainers
>> > to allow for (temporary) breakage.
>>
>> This isn't controversial, it's just a bad idea.  Don't encourage people
>> to break things.
>>
>> > The suggestion to have functions auto-install things is very
>> > inconvenient for the good reasons pointed out by Thomas. Additionally,
>> > it is often based on the wrong assumptions. Example: the RGtk2 package
>> > has this habit of trying to install when libgtk2 is not on the path. But
>> > in my case that is often exactly the case: it is just not on the path
>> > (libgtk2 is on the network, the VM just doesn't know yet). So I'd rather
>> > have a proper and accurate error message (which is good practice
>> > anyway).
>> >
>> >
>> > Best,
>> > Mark
>> >
>> > [1] actually, once we know a pkg is Recommended, the
>> > 'if(requireNamespace)' could even be absorbed in the :: operator.
>>
>> I don't see how :: would be any different than it is now.  If you don't
>> have foo available, and you try to use foo::bar(), what would happen
>> other than an error?
>>
>> Duncan Murdoch
>>
>> >
>> >
>> >
>> >
>> > Op wo 3 aug. 2016 om 01:46 schreef Duncan Murdoch
>> > <murdoch.duncan at gmail.com <mailto:murdoch.duncan at gmail.com>>:
>> >
>> >     On 02/08/2016 6:34 PM, Dirk Eddelbuettel wrote:
>> >     >
>> >     > On 2 August 2016 at 18:13, Duncan Murdoch wrote:
>> >     > | Okay, now I think I understand, but I agree with CRAN.  It is
>> > not
>> >     > | feasible to tell if the test happened somewhere in the code
>> >     unless we
>> >     > | enforce a particular way of writing the test.
>> >     >
>> >     > Debian has well over 20k packages, and they are tested this way.
>> >     You just
>> >     > need to show the will of testing in an _empty_ environment to
>> > ensure
>> >     > _everything_ that is needed is loaded.
>> >     >
>> >     > | I would object if I had to write if (requireNamespace("foo"))
>> >     multiple
>> >     > | times just to satisfy CRAN's test, when any sane human could
>> >     tell that
>> >     > | the first test was sufficient.
>> >     > |
>> >     > | For example, if my package Suggests: foo, I should be able to
>> > write
>> >     > |
>> >     > | if (!requireNamespace("foo"))
>> >     > |    stop("Package foo is needed for this example")
>> >     > |
>> >     > | and then merrily call foo::bar() as many times as I like.
>> >     > |
>> >     > | Or am I still misunderstanding you?  What particular thing
>> >     should CRAN
>> >     > | change?
>> >     >
>> >     > You seem to misunderstand that both you and I want
>> >     >
>> >     >   if (!requireNamespace("foo"))
>> >     >      stop("Package foo is needed for this example")
>> >     >
>> >     > (or alternative per-call tests) and that CRAN does not enforce
>> > either.
>> >     >
>> >     > CRAN, like Hadley, just closes its eyes, swallows hard, and then
>> >     simply loads
>> >     > everything treating Suggests as if it were Depends.
>> >     >
>> >     > But it ain't. Suggests != Depends.
>> >     >
>> >     > Now clearer?
>> >
>> >
>> >     So really what you're suggesting is that CRAN should run tests with
>> > the
>> >     suggested packages absent.  Presumably tests should also be run with
>> >     them present.
>> >
>> >     But if they did that, the code that I want to write would call
>> > stop()
>> >     and fail.  So we'd need some way to say "Let the user know they need
>> >     'foo' to run this, but don't fail."  And we'd need to phase this in
>> >     really gradually, because tons of packages are using code like my
>> >     example.
>> >
>> >     You volunteered to help CRAN package checking.  Why not put together
>> >     code to implement your idea, and see how big the problem would be to
>> >     phase it in, by seeing how many packages fail under it?
>> >
>> >     Duncan Murdoch
>> >
>> >     ______________________________________________
>> >     R-package-devel at r-project.org <mailto:R-package-devel at r-project.org>
>> >     mailing list
>> >     https://stat.ethz.ch/mailman/listinfo/r-package-devel
>> >
>>
>


From mark.vanderloo at gmail.com  Wed Aug  3 15:22:45 2016
From: mark.vanderloo at gmail.com (Mark van der Loo)
Date: Wed, 03 Aug 2016 13:22:45 +0000
Subject: [R-pkg-devel] openMP/reduction statement causes build crash on
	travis-ci
In-Reply-To: <22433.58845.750959.250128@max.nulle.part>
References: <CAOKDuOg7JtNUmk4q5Bm91oxdOkfDCGQBOnvx5bNEobfRv99aXg@mail.gmail.com>
	<22433.58845.750959.250128@max.nulle.part>
Message-ID: <CAOKDuOhZgTdYKxyz13WpvkkR=V7vFuCNcBq8K4wJYmEmh4tn4Q@mail.gmail.com>

Thanks Dirk! that did it. I wasn't aware of the trusty 14.04 option.


Just adding

sudo: required
dist: trusty

at the top of my .travis.yaml solved it
https://docs.travis-ci.com/user/trusty-ci-environment/,


Cheers,
Mark



Op wo 3 aug. 2016 om 14:38 schreef Dirk Eddelbuettel <edd at debian.org>:

>
> On 3 August 2016 at 08:13, Mark van der Loo wrote:
> | Dear pkg developers,
> |
> |
> | I'm working on a package using C code and openMP. The package builds and
> | tests fine on my own machine[1] and also on r-hub[2]. However on
> travis-ci
> | the build crashes[3] with the following message (plus a few similar):
> |
> | gower.c:297:29: error: expected ?+?, ?*?, ?-?, ?&?, ?^?, ?|?, ?&&?, or
> ?||?
> | before ?min?
> |
> | The line in question is an #omp pragma statement:
> |
> |   #pragma omp for reduction(min:imin), reduction(max:imax)
> |
> |
> | I am using #pragma omp statements all over the place and this is the only
> | type causing crashes. I'm guessing it has something to do with travis
> | building on a 12.04 ubuntu VM with a rather old  gcc (4.6.3).
> |
> | So I have two questions:
> |
> | 1. Has anyone else seen this? Or am I missing something?
> | 2. Is there a workaround, or should I just go for another build service
> | (which one)?
>
> You can actually switch to 'Trusty' aka 14.04.
>
> That has been around for a bit, and AFAIK works with both the old scheme
> (ie
> r-travis) or the new scheme. [ I am partial to the old scheme which I now
> use
> via this fork http://eddelbuettel.github.io/r-travis/ -- and my drat and
> digest packages were the first to adopt it. ]
>
> We can take this off-line, but this should work.  I first used this when I
> needed g++-4.8 and I am pretty sure I have a .travis.yml somewhere using
> g++-4.9 because it was needed in one project.  "Yes we can."
>
> Dirk
>
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>

	[[alternative HTML version deleted]]


From profjcnash at gmail.com  Wed Aug  3 15:44:05 2016
From: profjcnash at gmail.com (ProfJCNash)
Date: Wed, 3 Aug 2016 09:44:05 -0400
Subject: [R-pkg-devel] Recommendation on qr method export
In-Reply-To: <CAKxd1KO16f3yic_AoMTiqsx0zgX2_f=nTGu9XQnoOqVv+ckGZg@mail.gmail.com>
References: <CAKxd1KPZQQpHKdu5Sx_zMWxJXgG=yx2wyJfv75HSwiG2rM2Ljg@mail.gmail.com>
	<FB51A768-5DFA-46C4-8DDE-9F393EED6817@gmail.com>
	<CAKxd1KO16f3yic_AoMTiqsx0zgX2_f=nTGu9XQnoOqVv+ckGZg@mail.gmail.com>
Message-ID: <348d3886-2b26-cc5a-52bc-b81044302d89@gmail.com>

Closely related to the different QR variations, Claudia Beleites and I
have a very crude start on some attempts to categorize different svd
approaches in R. Perhaps it's worth combining efforts with QR because of
the overlap and producing a sort of enlarged vignette or even a Task
View. I suggest contacting me offline (I use nashjc _at_ uottawa.ca as
my working email, and the one above for mailing lists) if interested.
However, I view my current effort as a useful ongoing set of notes
rather than a definitive treatment of the issues.

Best, JN


On 16-08-03 09:16 AM, Charles Determan wrote:
> Thanks for the input Peter.  I suppose I never looked at lm() to see how it
> was used there.  Given that though, do you see any reason then to not
> create an S3/S4 method if different methods are used for different
> functions?  I'm just looking for some design guidance from the community
> here before I just implement something that may cause more confusion.
> 
> Regards,
> Charles
> 
> On Tue, Aug 2, 2016 at 4:34 PM, Peter Dalgaard <pdalgd at gmail.com> wrote:
> 
>> Not strictly what you're asking, but at some point it may be important to
>> note that the "QR" method used by lm() and friends (notably anova() and
>> aov()) actually relies on successive orthogonalization. This does yield a
>> QR decomposition but the reverse is not true. A generic X=QR decomposition
>> does orthogonalize, but it does not necessarily hold that the first k
>> columns of Q spans the same subspace as the first k columns of X. LINPACK's
>> QR happens to be implemented as successive orthogonalization, but LAPACK's
>> is not, so only the former is usable with lm().
>>
>> So, I suppose what I am getting at is that not even lm() uses qr(), it
>> calls LINPACK directly.
>>
>> -pd
>>
>>
>>> On 02 Aug 2016, at 21:17 , Charles Determan <cdetermanjr at gmail.com>
>> wrote:
>>>
>>> Hello,
>>>
>>> I am currently working on an implementation of QR decomposition
>> (leveraging
>>> a C++ library via Rcpp).  Naturally I would like to have the R syntax as
>>> similar as possible to base R 'qr' function.  Given the class structure
>> of
>>> my package my instinct was to export an S4/S3 method.
>>>
>>> However, the QR decomposition doesn't store the final QR matrix in the
>> same
>>> format as base R via LINPACK, nor does it return 'qraux', 'rank' or
>> 'pivot'
>>> objects but instead a 'betas' object.  The final 'R' and 'Q' matrices are
>>> in fact identical to those ultimately returned by qr.R or qr.Q.
>>>
>>> So my question is, given these differences, should I just create a
>>> different function name or would creating a qr.myclass dispatch be
>>> acceptable (whether S3 or S4)?  I would prefer the latter as I would like
>>> the classes to potentially take advantage of previously written code
>> using
>>> 'qr'.
>>>
>>> Thanks,
>>> Charles
>>>
>>>       [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-package-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>>
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>


From ligges at statistik.tu-dortmund.de  Wed Aug  3 15:52:17 2016
From: ligges at statistik.tu-dortmund.de (Uwe Ligges)
Date: Wed, 3 Aug 2016 15:52:17 +0200
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <CAOKDuOgdvb73-QTYYtkU3UN4z7V-+Y56zvuGB+sXfnFJYsQacA@mail.gmail.com>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
	<b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
	<22433.114.172309.681071@max.nulle.part>
	<41d5da4d-3430-a0d7-8a56-d5343ffdee52@gmail.com>
	<22433.8161.749443.565578@max.nulle.part>
	<150d50f3-8e37-7799-3f9f-e60d5cbba952@gmail.com>
	<CAOKDuOhEZwpWD_h59bRnei6B_Q3XsC5F0aeueTkn3jOaqAVzTw@mail.gmail.com>
	<85adbe47-244a-1988-9bb4-c013ca68272e@gmail.com>
	<CAOKDuOgdvb73-QTYYtkU3UN4z7V-+Y56zvuGB+sXfnFJYsQacA@mail.gmail.com>
Message-ID: <d553f397-0aa4-3740-a0e2-d51d572d2610@statistik.tu-dortmund.de>



On 03.08.2016 15:04, Mark van der Loo wrote:
>>> Recommends: only gets installed, can be used via if(requireNamespace())
>>> from the package and in pkg tests[1] [snip]
>>> Build-Depends: gets installed before build, removed after.
>>> Suggests: only installed when requested at install.packages() and only
>>> used in examples/vignettes.
>
> [snip]
>>  I'd much rather
>> have a way of declaring explicitly the different aspects of dependence
>> on a package rather than bundling them up into cute labels,
>
> Agreed
>
>> but it's too late for that now.  However, we don't need to make things
> worse.
>
> Disagreed. We could follow the well-established practices of Debian (and
> CRAN already does that, partially).
>
>
>>> If 'tons of packages' are using if(requireNamespace) in their package
>>> code there seems to be a need for something like this. [snip]
>
>> I don't follow the argument here.  What problem are you solving?
>
> Basically I'm trying to address the idea suggested by Thomas, who started
> this conversation, and make it a bit more explicit. I felt that the
> discussion went a little off-track there.
>
> Right now, when package code (not examples) uses a suggested package, part
> of that package will by default not work - at least that's how people use
> it now. I would like it to work by default. For examples/vignettes you
> could be more forgiving since running an example is not core functionality
> of a package.
>
>>> Perhaps more controversially a 'Breaks' field could be considered. [snip]
>
>> This isn't controversial, it's just a bad idea.  Don't encourage people
>> to break things.
>
> Your reaction just proved my point about it being controversial. More
> seriously, real progress is hardly ever possible without breaking things,
> so I think at least people could have a serious discussion about it before
> dismissing it simply as a bad idea. The Debian community obviously once
> thought it was a good idea, so why not discuss it for R/CRAN? (discussions
> are also an important way to progress even if no line of code is changed).
> At the moment, I'm inclined against the idea, but I for one like to see me
> proven wrong.


I don't see a point for the discussion, because there is even a CRAN 
policy that explain the procedure if there is really need (which should 
be carefully decided) to break things.


Best,
Uwe Ligges





>>> [1] actually, once we know a pkg is Recommended, the
>>> 'if(requireNamespace)' could even be absorbed in the :: operator.
>
>> I don't see how :: would be any different than it is now.  If you don't
>> have foo available, and you try to use foo::bar(), what would happen
>> other than an error?
>
> I think you're right there. <resets brain>.
>
> Best,
> Mark
>
>
> Op wo 3 aug. 2016 om 13:41 schreef Duncan Murdoch <murdoch.duncan at gmail.com
>> :
>
>> On 03/08/2016 5:32 AM, Mark van der Loo wrote:
>>>
>>> After reading the link in Dirk's initial reply, how about adding fields
>>> 'Recommends' and 'Build-Depends' to DESCRIPTION as in Debian?
>>>
>>> Recommends: only gets installed, can be used via if(requireNamespace())
>>> from the package and in pkg tests[1]. [Debian: The Recommends field
>>> should list packages that would be found together with this one in all
>>> but unusual installations.]
>>> Build-Depends: gets installed before build, removed after.
>>> Suggests: only installed when requested at install.packages() and only
>>> used in examples/vignettes.
>>
>> I think the distinction between Recommends and Suggests is too subtle
>> here.  I already think it's a bad thing that we are using these words in
>> ways that don't really correspond to English usage.  I'd much rather
>> have a way of declaring explicitly the different aspects of dependence
>> on a package rather than bundling them up into cute labels, but it's too
>> late for that now.  However, we don't need to make things worse.
>>
>>>
>>> If 'tons of packages' are using if(requireNamespace) in their package
>>> code there seems to be a need for something like this. Compliance to the
>>> above can be checked automatically and  a gradual implementation via
>>> NOTE->WARNING->ERROR in R CMD check seems possible.
>>
>> I don't follow the argument here.  What problem are you solving?
>>
>>> Perhaps more controversially a 'Breaks' field could be considered. There
>>> are a few packages out there that have many, many, dependencies.
>>> Implementing breaking updates currently depends on the willingness of
>>> many authors to update their package or convincing the CRAN maintainers
>>> to allow for (temporary) breakage.
>>
>> This isn't controversial, it's just a bad idea.  Don't encourage people
>> to break things.
>>
>>> The suggestion to have functions auto-install things is very
>>> inconvenient for the good reasons pointed out by Thomas. Additionally,
>>> it is often based on the wrong assumptions. Example: the RGtk2 package
>>> has this habit of trying to install when libgtk2 is not on the path. But
>>> in my case that is often exactly the case: it is just not on the path
>>> (libgtk2 is on the network, the VM just doesn't know yet). So I'd rather
>>> have a proper and accurate error message (which is good practice anyway).
>>>
>>>
>>> Best,
>>> Mark
>>>
>>> [1] actually, once we know a pkg is Recommended, the
>>> 'if(requireNamespace)' could even be absorbed in the :: operator.
>>
>> I don't see how :: would be any different than it is now.  If you don't
>> have foo available, and you try to use foo::bar(), what would happen
>> other than an error?
>>
>> Duncan Murdoch
>>
>>>
>>>
>>>
>>>
>>> Op wo 3 aug. 2016 om 01:46 schreef Duncan Murdoch
>>> <murdoch.duncan at gmail.com <mailto:murdoch.duncan at gmail.com>>:
>>>
>>>     On 02/08/2016 6:34 PM, Dirk Eddelbuettel wrote:
>>>     >
>>>     > On 2 August 2016 at 18:13, Duncan Murdoch wrote:
>>>     > | Okay, now I think I understand, but I agree with CRAN.  It is not
>>>     > | feasible to tell if the test happened somewhere in the code
>>>     unless we
>>>     > | enforce a particular way of writing the test.
>>>     >
>>>     > Debian has well over 20k packages, and they are tested this way.
>>>     You just
>>>     > need to show the will of testing in an _empty_ environment to
>> ensure
>>>     > _everything_ that is needed is loaded.
>>>     >
>>>     > | I would object if I had to write if (requireNamespace("foo"))
>>>     multiple
>>>     > | times just to satisfy CRAN's test, when any sane human could
>>>     tell that
>>>     > | the first test was sufficient.
>>>     > |
>>>     > | For example, if my package Suggests: foo, I should be able to
>> write
>>>     > |
>>>     > | if (!requireNamespace("foo"))
>>>     > |    stop("Package foo is needed for this example")
>>>     > |
>>>     > | and then merrily call foo::bar() as many times as I like.
>>>     > |
>>>     > | Or am I still misunderstanding you?  What particular thing
>>>     should CRAN
>>>     > | change?
>>>     >
>>>     > You seem to misunderstand that both you and I want
>>>     >
>>>     >   if (!requireNamespace("foo"))
>>>     >      stop("Package foo is needed for this example")
>>>     >
>>>     > (or alternative per-call tests) and that CRAN does not enforce
>> either.
>>>     >
>>>     > CRAN, like Hadley, just closes its eyes, swallows hard, and then
>>>     simply loads
>>>     > everything treating Suggests as if it were Depends.
>>>     >
>>>     > But it ain't. Suggests != Depends.
>>>     >
>>>     > Now clearer?
>>>
>>>
>>>     So really what you're suggesting is that CRAN should run tests with
>> the
>>>     suggested packages absent.  Presumably tests should also be run with
>>>     them present.
>>>
>>>     But if they did that, the code that I want to write would call stop()
>>>     and fail.  So we'd need some way to say "Let the user know they need
>>>     'foo' to run this, but don't fail."  And we'd need to phase this in
>>>     really gradually, because tons of packages are using code like my
>>>     example.
>>>
>>>     You volunteered to help CRAN package checking.  Why not put together
>>>     code to implement your idea, and see how big the problem would be to
>>>     phase it in, by seeing how many packages fail under it?
>>>
>>>     Duncan Murdoch
>>>
>>>     ______________________________________________
>>>     R-package-devel at r-project.org <mailto:R-package-devel at r-project.org>
>>>     mailing list
>>>     https://stat.ethz.ch/mailman/listinfo/r-package-devel
>>>
>>
>>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>


From ligges at statistik.tu-dortmund.de  Wed Aug  3 15:54:39 2016
From: ligges at statistik.tu-dortmund.de (Uwe Ligges)
Date: Wed, 3 Aug 2016 15:54:39 +0200
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <CAOC91MTPkYRBd4GZxdNhGXr+MM=yab3P_9Ah6z-30wUsEQc_Lg@mail.gmail.com>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
	<b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
	<22433.114.172309.681071@max.nulle.part>
	<41d5da4d-3430-a0d7-8a56-d5343ffdee52@gmail.com>
	<22433.8161.749443.565578@max.nulle.part>
	<150d50f3-8e37-7799-3f9f-e60d5cbba952@gmail.com>
	<CAOKDuOhEZwpWD_h59bRnei6B_Q3XsC5F0aeueTkn3jOaqAVzTw@mail.gmail.com>
	<85adbe47-244a-1988-9bb4-c013ca68272e@gmail.com>
	<CAOKDuOgdvb73-QTYYtkU3UN4z7V-+Y56zvuGB+sXfnFJYsQacA@mail.gmail.com>
	<CAOC91MTPkYRBd4GZxdNhGXr+MM=yab3P_9Ah6z-30wUsEQc_Lg@mail.gmail.com>
Message-ID: <2f9eb5fe-9473-cd06-dc9c-db6dfcaa4fa8@statistik.tu-dortmund.de>



On 03.08.2016 15:20, Thomas J. Leeper wrote:
> The issue seems to boil down to the fact that Suggests is covering two
> very different use cases: (a) conditional package code and (b)
> example/test/vignette code.
>
> Consider a package (say "foo") that is only used in tests. Users do
> not need "foo" since package code never calls it. If our package
> instead calls "foo" conditionally (requireNamespace(); foo::bar(),
> etc.), then users may very well want "foo" and need it much more than
> they would if "foo" were only used in tests. Yet DESCRIPTION does not
> allow a distinction two be made between these two scenarios.
>
> I think the length and complexity of the discussion in WRE[1] makes
> clear that Suggests is being used two cover these two very different
> use cases.


I am more worried about yet another dependency level that confuses more 
than it helps for the majority of developers and users.
As an example, I nneed to explain myself again and again what "Enhances" 
means (and perhaps I am still doing it wrong).

Best,
Uwe Ligges


> -Thomas
>
> [1] https://cran.r-project.org/doc/manuals/r-devel/R-exts.html#Package-Dependencies
>
> Thomas J. Leeper
> http://www.thomasleeper.com
>
>
> On Wed, Aug 3, 2016 at 2:04 PM, Mark van der Loo
> <mark.vanderloo at gmail.com> wrote:
>>>> Recommends: only gets installed, can be used via if(requireNamespace())
>>>> from the package and in pkg tests[1] [snip]
>>>> Build-Depends: gets installed before build, removed after.
>>>> Suggests: only installed when requested at install.packages() and only
>>>> used in examples/vignettes.
>>
>> [snip]
>>>  I'd much rather
>>> have a way of declaring explicitly the different aspects of dependence
>>> on a package rather than bundling them up into cute labels,
>>
>> Agreed
>>
>>> but it's too late for that now.  However, we don't need to make things
>>> worse.
>>
>> Disagreed. We could follow the well-established practices of Debian (and
>> CRAN already does that, partially).
>>
>>
>>>> If 'tons of packages' are using if(requireNamespace) in their package
>>>> code there seems to be a need for something like this. [snip]
>>
>>> I don't follow the argument here.  What problem are you solving?
>>
>> Basically I'm trying to address the idea suggested by Thomas, who started
>> this conversation, and make it a bit more explicit. I felt that the
>> discussion went a little off-track there.
>>
>> Right now, when package code (not examples) uses a suggested package, part
>> of that package will by default not work - at least that's how people use it
>> now. I would like it to work by default. For examples/vignettes you could be
>> more forgiving since running an example is not core functionality of a
>> package.
>>
>>>> Perhaps more controversially a 'Breaks' field could be considered. [snip]
>>
>>> This isn't controversial, it's just a bad idea.  Don't encourage people
>>> to break things.
>>
>> Your reaction just proved my point about it being controversial. More
>> seriously, real progress is hardly ever possible without breaking things, so
>> I think at least people could have a serious discussion about it before
>> dismissing it simply as a bad idea. The Debian community obviously once
>> thought it was a good idea, so why not discuss it for R/CRAN? (discussions
>> are also an important way to progress even if no line of code is changed).
>> At the moment, I'm inclined against the idea, but I for one like to see me
>> proven wrong.
>>
>>
>>>> [1] actually, once we know a pkg is Recommended, the
>>>> 'if(requireNamespace)' could even be absorbed in the :: operator.
>>
>>> I don't see how :: would be any different than it is now.  If you don't
>>> have foo available, and you try to use foo::bar(), what would happen
>>> other than an error?
>>
>> I think you're right there. <resets brain>.
>>
>> Best,
>> Mark
>>
>>
>> Op wo 3 aug. 2016 om 13:41 schreef Duncan Murdoch
>> <murdoch.duncan at gmail.com>:
>>>
>>> On 03/08/2016 5:32 AM, Mark van der Loo wrote:
>>>>
>>>> After reading the link in Dirk's initial reply, how about adding fields
>>>> 'Recommends' and 'Build-Depends' to DESCRIPTION as in Debian?
>>>>
>>>> Recommends: only gets installed, can be used via if(requireNamespace())
>>>> from the package and in pkg tests[1]. [Debian: The Recommends field
>>>> should list packages that would be found together with this one in all
>>>> but unusual installations.]
>>>> Build-Depends: gets installed before build, removed after.
>>>> Suggests: only installed when requested at install.packages() and only
>>>> used in examples/vignettes.
>>>
>>> I think the distinction between Recommends and Suggests is too subtle
>>> here.  I already think it's a bad thing that we are using these words in
>>> ways that don't really correspond to English usage.  I'd much rather
>>> have a way of declaring explicitly the different aspects of dependence
>>> on a package rather than bundling them up into cute labels, but it's too
>>> late for that now.  However, we don't need to make things worse.
>>>
>>>>
>>>> If 'tons of packages' are using if(requireNamespace) in their package
>>>> code there seems to be a need for something like this. Compliance to the
>>>> above can be checked automatically and  a gradual implementation via
>>>> NOTE->WARNING->ERROR in R CMD check seems possible.
>>>
>>> I don't follow the argument here.  What problem are you solving?
>>>
>>>> Perhaps more controversially a 'Breaks' field could be considered. There
>>>> are a few packages out there that have many, many, dependencies.
>>>> Implementing breaking updates currently depends on the willingness of
>>>> many authors to update their package or convincing the CRAN maintainers
>>>> to allow for (temporary) breakage.
>>>
>>> This isn't controversial, it's just a bad idea.  Don't encourage people
>>> to break things.
>>>
>>>> The suggestion to have functions auto-install things is very
>>>> inconvenient for the good reasons pointed out by Thomas. Additionally,
>>>> it is often based on the wrong assumptions. Example: the RGtk2 package
>>>> has this habit of trying to install when libgtk2 is not on the path. But
>>>> in my case that is often exactly the case: it is just not on the path
>>>> (libgtk2 is on the network, the VM just doesn't know yet). So I'd rather
>>>> have a proper and accurate error message (which is good practice
>>>> anyway).
>>>>
>>>>
>>>> Best,
>>>> Mark
>>>>
>>>> [1] actually, once we know a pkg is Recommended, the
>>>> 'if(requireNamespace)' could even be absorbed in the :: operator.
>>>
>>> I don't see how :: would be any different than it is now.  If you don't
>>> have foo available, and you try to use foo::bar(), what would happen
>>> other than an error?
>>>
>>> Duncan Murdoch
>>>
>>>>
>>>>
>>>>
>>>>
>>>> Op wo 3 aug. 2016 om 01:46 schreef Duncan Murdoch
>>>> <murdoch.duncan at gmail.com <mailto:murdoch.duncan at gmail.com>>:
>>>>
>>>>     On 02/08/2016 6:34 PM, Dirk Eddelbuettel wrote:
>>>>     >
>>>>     > On 2 August 2016 at 18:13, Duncan Murdoch wrote:
>>>>     > | Okay, now I think I understand, but I agree with CRAN.  It is
>>>> not
>>>>     > | feasible to tell if the test happened somewhere in the code
>>>>     unless we
>>>>     > | enforce a particular way of writing the test.
>>>>     >
>>>>     > Debian has well over 20k packages, and they are tested this way.
>>>>     You just
>>>>     > need to show the will of testing in an _empty_ environment to
>>>> ensure
>>>>     > _everything_ that is needed is loaded.
>>>>     >
>>>>     > | I would object if I had to write if (requireNamespace("foo"))
>>>>     multiple
>>>>     > | times just to satisfy CRAN's test, when any sane human could
>>>>     tell that
>>>>     > | the first test was sufficient.
>>>>     > |
>>>>     > | For example, if my package Suggests: foo, I should be able to
>>>> write
>>>>     > |
>>>>     > | if (!requireNamespace("foo"))
>>>>     > |    stop("Package foo is needed for this example")
>>>>     > |
>>>>     > | and then merrily call foo::bar() as many times as I like.
>>>>     > |
>>>>     > | Or am I still misunderstanding you?  What particular thing
>>>>     should CRAN
>>>>     > | change?
>>>>     >
>>>>     > You seem to misunderstand that both you and I want
>>>>     >
>>>>     >   if (!requireNamespace("foo"))
>>>>     >      stop("Package foo is needed for this example")
>>>>     >
>>>>     > (or alternative per-call tests) and that CRAN does not enforce
>>>> either.
>>>>     >
>>>>     > CRAN, like Hadley, just closes its eyes, swallows hard, and then
>>>>     simply loads
>>>>     > everything treating Suggests as if it were Depends.
>>>>     >
>>>>     > But it ain't. Suggests != Depends.
>>>>     >
>>>>     > Now clearer?
>>>>
>>>>
>>>>     So really what you're suggesting is that CRAN should run tests with
>>>> the
>>>>     suggested packages absent.  Presumably tests should also be run with
>>>>     them present.
>>>>
>>>>     But if they did that, the code that I want to write would call
>>>> stop()
>>>>     and fail.  So we'd need some way to say "Let the user know they need
>>>>     'foo' to run this, but don't fail."  And we'd need to phase this in
>>>>     really gradually, because tons of packages are using code like my
>>>>     example.
>>>>
>>>>     You volunteered to help CRAN package checking.  Why not put together
>>>>     code to implement your idea, and see how big the problem would be to
>>>>     phase it in, by seeing how many packages fail under it?
>>>>
>>>>     Duncan Murdoch
>>>>
>>>>     ______________________________________________
>>>>     R-package-devel at r-project.org <mailto:R-package-devel at r-project.org>
>>>>     mailing list
>>>>     https://stat.ethz.ch/mailman/listinfo/r-package-devel
>>>>
>>>
>>
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>


From ligges at statistik.tu-dortmund.de  Wed Aug  3 16:00:36 2016
From: ligges at statistik.tu-dortmund.de (Uwe Ligges)
Date: Wed, 3 Aug 2016 16:00:36 +0200
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <22433.57996.144409.881996@max.nulle.part>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
	<b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
	<22433.114.172309.681071@max.nulle.part>
	<41d5da4d-3430-a0d7-8a56-d5343ffdee52@gmail.com>
	<22433.8161.749443.565578@max.nulle.part>
	<150d50f3-8e37-7799-3f9f-e60d5cbba952@gmail.com>
	<22433.57996.144409.881996@max.nulle.part>
Message-ID: <2db7e05f-b24f-f71c-4718-d71bf1067370@statistik.tu-dortmund.de>



On 03.08.2016 14:24, Dirk Eddelbuettel wrote:
>
> On 2 August 2016 at 19:45, Duncan Murdoch wrote:
> | Why not put together code to implement your idea, and see how big the
> | problem would be to phase it in, by seeing how many packages fail under it?
>
> Ahh, the old 'put-up-or-shut-up' gambit, very nice. Big fan of that myself.
>
> I have been sitting on the need to build better infrastructure for my reverse
> depends checks anyway, and may get there over the fall.  Or not as I have
> been saying that for a long time...  It will likely be Docker-based which may
> or may not be suitable for CRAN, but should be for r-hub which may get this
> all by itself too.  Not sure of this can be done in R alone.
>
> Then again, users of TravisCI know that just toggling
>
> _R_CHECK_FORCE_SUGGESTS_=FALSE

I was travelling, hence a delayed response:

Why users of TravisCI? It is documented in the manual. Setting it to 
true gives an error in the check if the suggested package is not 
available for the check. And typically you want to have it available to 
be able to actually check all parts of your package.
So this is not what you are looking for.

What you suggest means that we would have to run the checks twice, as 
Duncan explained already, once with and once without the suggetsed 
package installed.

Best,
Uwe






>
> does it too so in that sense it is already there, but not used?
>
> Dirk
>


From edd at debian.org  Wed Aug  3 16:14:46 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Wed, 3 Aug 2016 09:14:46 -0500
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <2db7e05f-b24f-f71c-4718-d71bf1067370@statistik.tu-dortmund.de>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
	<b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
	<22433.114.172309.681071@max.nulle.part>
	<41d5da4d-3430-a0d7-8a56-d5343ffdee52@gmail.com>
	<22433.8161.749443.565578@max.nulle.part>
	<150d50f3-8e37-7799-3f9f-e60d5cbba952@gmail.com>
	<22433.57996.144409.881996@max.nulle.part>
	<2db7e05f-b24f-f71c-4718-d71bf1067370@statistik.tu-dortmund.de>
Message-ID: <22433.64598.185995.920118@max.nulle.part>


On 3 August 2016 at 16:00, Uwe Ligges wrote:
| On 03.08.2016 14:24, Dirk Eddelbuettel wrote:
| > Then again, users of TravisCI know that just toggling
| >
| > _R_CHECK_FORCE_SUGGESTS_=FALSE
| 
| I was travelling, hence a delayed response:
| 
| Why users of TravisCI? It is documented in the manual. Setting it to 

Because Travis breaks your check as it works in a cleanroom with only the
specified packages installed. As it (and that is the gist of my argument)
should ...

| true gives an error in the check if the suggested package is not 
| available for the check. And typically you want to have it available to 
| be able to actually check all parts of your package.
| So this is not what you are looking for.
| 
| What you suggest means that we would have to run the checks twice, as 
| Duncan explained already, once with and once without the suggetsed 
| package installed.

No, CRAN could just flip that toggle and run once.

What Duncan suggested was (as I understand it an empirically-driven
assessment of what it would take to get from here (set to FALSE, tolerate bad
Policy) to there (set to TRUE, IMHO better Policy adherence).

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From ligges at statistik.tu-dortmund.de  Wed Aug  3 16:21:05 2016
From: ligges at statistik.tu-dortmund.de (Uwe Ligges)
Date: Wed, 3 Aug 2016 16:21:05 +0200
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <22433.64598.185995.920118@max.nulle.part>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
	<b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
	<22433.114.172309.681071@max.nulle.part>
	<41d5da4d-3430-a0d7-8a56-d5343ffdee52@gmail.com>
	<22433.8161.749443.565578@max.nulle.part>
	<150d50f3-8e37-7799-3f9f-e60d5cbba952@gmail.com>
	<22433.57996.144409.881996@max.nulle.part>
	<2db7e05f-b24f-f71c-4718-d71bf1067370@statistik.tu-dortmund.de>
	<22433.64598.185995.920118@max.nulle.part>
Message-ID: <589fad90-d896-f407-c795-64b32775ba7f@statistik.tu-dortmund.de>



On 03.08.2016 16:14, Dirk Eddelbuettel wrote:
>
> On 3 August 2016 at 16:00, Uwe Ligges wrote:
> | On 03.08.2016 14:24, Dirk Eddelbuettel wrote:
> | > Then again, users of TravisCI know that just toggling
> | >
> | > _R_CHECK_FORCE_SUGGESTS_=FALSE
> |
> | I was travelling, hence a delayed response:
> |
> | Why users of TravisCI? It is documented in the manual. Setting it to
>
> Because Travis breaks your check as it works in a cleanroom with only the
> specified packages installed. As it (and that is the gist of my argument)
> should ...

No, because if I suggest a package, I want to check also the code that 
uses a suggested package. So I have to have the package installed.



> | true gives an error in the check if the suggested package is not
> | available for the check. And typically you want to have it available to
> | be able to actually check all parts of your package.
> | So this is not what you are looking for.
> |
> | What you suggest means that we would have to run the checks twice, as
> | Duncan explained already, once with and once without the suggetsed
> | package installed.
>
> No, CRAN could just flip that toggle and run once.

I do not get it: It won't make much of a difference because I have most 
packages installed. It is only a diffrence for suggested packages that 
are not available for my platform, and toggling it means checks always 
fail then.


> What Duncan suggested was (as I understand it an empirically-driven
> assessment of what it would take to get from here (set to FALSE, tolerate bad
> Policy) to there (set to TRUE, IMHO better Policy adherence).

You do not understand the environment variable, I believe.

Uwe

>
> Dirk
>


From rubak at math.aau.dk  Wed Aug  3 10:29:24 2016
From: rubak at math.aau.dk (Ege Rubak)
Date: Wed, 3 Aug 2016 10:29:24 +0200
Subject: [R-pkg-devel] openMP/reduction statement causes build crash on
 travis-ci
In-Reply-To: <CAOKDuOg7JtNUmk4q5Bm91oxdOkfDCGQBOnvx5bNEobfRv99aXg@mail.gmail.com>
References: <CAOKDuOg7JtNUmk4q5Bm91oxdOkfDCGQBOnvx5bNEobfRv99aXg@mail.gmail.com>
Message-ID: <ceda8f84-f91d-261c-f6a0-bfa712d15e2f@math.aau.dk>


>
> I am using #pragma omp statements all over the place and this is the only
> type causing crashes. I'm guessing it has something to do with travis
> building on a 12.04 ubuntu VM with a rather old  gcc (4.6.3).
>
> 2. Is there a workaround, or should I just go for another build service
> (which one)?
>
You could try using the [trusty build enviromnent][1] on Travis which 
has a slightly newer gcc installed (4.8.4). I have no idea whether it 
actually works.

Cheers,
Ege

[1]: https://docs.travis-ci.com/user/trusty-ci-environment/


From jlisic at gmail.com  Wed Aug  3 11:26:30 2016
From: jlisic at gmail.com (Jonathan Lisic)
Date: Wed, 3 Aug 2016 05:26:30 -0400
Subject: [R-pkg-devel] R_CStackLimit and OpenMP for CRAN Packages
Message-ID: <217EC0E9-BE46-4703-8B4A-202F72E7F186@gmail.com>

Hi,

I just had a CRAN rejection due to setting R_CStackLimit = (uintptr_t)-1 , e.g  Found non-API call to R: ?R_CStackLimit?.

This stack limit change is done to avoid stack overruns when I use OpenMP with C.  Are there other ways around this issue?  or should I just accept the large performance loss and disable OpenMP?  

Here is a link to my package:  https://github.com/jlisic/rasterKernelEstimates <https://github.com/jlisic/rasterKernelEstimates>

Thanks,

Jonathan Lisic
	[[alternative HTML version deleted]]


From jlisic at gmail.com  Wed Aug  3 15:24:36 2016
From: jlisic at gmail.com (Jonathan Lisic)
Date: Wed, 3 Aug 2016 09:24:36 -0400
Subject: [R-pkg-devel] R_CStackLimit and OpenMP for CRAN Packages
In-Reply-To: <217EC0E9-BE46-4703-8B4A-202F72E7F186@gmail.com>
References: <217EC0E9-BE46-4703-8B4A-202F72E7F186@gmail.com>
Message-ID: <66646AFB-AABD-4770-9DA8-236B9B00AA06@gmail.com>

After about a three hour slog through my code I was able to track down and eliminate any non-essential function calls.  The function call removal significantly decreased the stack size, removing the requirement for R_CStackLimit bound to be changed.

Thanks,

Jonathan Lisic


> On Aug 3, 2016, at 5:26 AM, Jonathan Lisic <jlisic at gmail.com> wrote:
> 
> Hi,
> 
> I just had a CRAN rejection due to setting R_CStackLimit = (uintptr_t)-1 , e.g  Found non-API call to R: ?R_CStackLimit?.
> 
> This stack limit change is done to avoid stack overruns when I use OpenMP with C.  Are there other ways around this issue?  or should I just accept the large performance loss and disable OpenMP?  
> 
> Here is a link to my package:  https://github.com/jlisic/rasterKernelEstimates
> 
> Thanks,
> 
> Jonathan Lisic


From edd at debian.org  Wed Aug  3 17:17:52 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Wed, 3 Aug 2016 10:17:52 -0500
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <589fad90-d896-f407-c795-64b32775ba7f@statistik.tu-dortmund.de>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
	<b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
	<22433.114.172309.681071@max.nulle.part>
	<41d5da4d-3430-a0d7-8a56-d5343ffdee52@gmail.com>
	<22433.8161.749443.565578@max.nulle.part>
	<150d50f3-8e37-7799-3f9f-e60d5cbba952@gmail.com>
	<22433.57996.144409.881996@max.nulle.part>
	<2db7e05f-b24f-f71c-4718-d71bf1067370@statistik.tu-dortmund.de>
	<22433.64598.185995.920118@max.nulle.part>
	<589fad90-d896-f407-c795-64b32775ba7f@statistik.tu-dortmund.de>
Message-ID: <22434.2848.510307.630246@max.nulle.part>


On 3 August 2016 at 16:21, Uwe Ligges wrote:
| 
| 
| On 03.08.2016 16:14, Dirk Eddelbuettel wrote:
| >
| > On 3 August 2016 at 16:00, Uwe Ligges wrote:
| > | On 03.08.2016 14:24, Dirk Eddelbuettel wrote:
| > | > Then again, users of TravisCI know that just toggling
| > | >
| > | > _R_CHECK_FORCE_SUGGESTS_=FALSE
| > |
| > | I was travelling, hence a delayed response:
| > |
| > | Why users of TravisCI? It is documented in the manual. Setting it to
| >
| > Because Travis breaks your check as it works in a cleanroom with only the
| > specified packages installed. As it (and that is the gist of my argument)
| > should ...
| 
| No, because if I suggest a package, I want to check also the code that 
| uses a suggested package. So I have to have the package installed.

But then you are treating Suggests as Depends and installing irregardless.

| > No, CRAN could just flip that toggle and run once.
| 
| I do not get it: It won't make much of a difference because I have most 
| packages installed. It is only a diffrence for suggested packages that 

Which is a normal shortcut to make your life easier ... but not what other
systems do. Travis CI runs start from scratch with an empty base. So does
Debian for package build (and for subsequent tests such as the
reproducibility tests). In each case only listed packages get installed.

When we let R do its business Suggests is (currently) interpreted as
Depends. I continue to claim that is not what it is for.

As Thomas pointed out, Suggests: seems to be overloaded already to two
distinct use cases.

| are not available for my platform, and toggling it means checks always 
| fail then.
| 
| 
| > What Duncan suggested was (as I understand it an empirically-driven
| > assessment of what it would take to get from here (set to FALSE, tolerate bad
| > Policy) to there (set to TRUE, IMHO better Policy adherence).
| 
| You do not understand the environment variable, I believe.

That is of course entirely possibly but it also seems that some of us in this
discussion are continuously talking past each other. I tried to make my case
but seemingly failed to explain it clearly enough.

Dirk


-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From ligges at statistik.tu-dortmund.de  Wed Aug  3 17:39:37 2016
From: ligges at statistik.tu-dortmund.de (Uwe Ligges)
Date: Wed, 3 Aug 2016 17:39:37 +0200
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <22434.2848.510307.630246@max.nulle.part>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
	<b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
	<22433.114.172309.681071@max.nulle.part>
	<41d5da4d-3430-a0d7-8a56-d5343ffdee52@gmail.com>
	<22433.8161.749443.565578@max.nulle.part>
	<150d50f3-8e37-7799-3f9f-e60d5cbba952@gmail.com>
	<22433.57996.144409.881996@max.nulle.part>
	<2db7e05f-b24f-f71c-4718-d71bf1067370@statistik.tu-dortmund.de>
	<22433.64598.185995.920118@max.nulle.part>
	<589fad90-d896-f407-c795-64b32775ba7f@statistik.tu-dortmund.de>
	<22434.2848.510307.630246@max.nulle.part>
Message-ID: <f634c62d-91bf-50ad-a492-5ddb9651620c@statistik.tu-dortmund.de>



On 03.08.2016 17:17, Dirk Eddelbuettel wrote:
>
> On 3 August 2016 at 16:21, Uwe Ligges wrote:
> |
> |
> | On 03.08.2016 16:14, Dirk Eddelbuettel wrote:
> | >
> | > On 3 August 2016 at 16:00, Uwe Ligges wrote:
> | > | On 03.08.2016 14:24, Dirk Eddelbuettel wrote:
> | > | > Then again, users of TravisCI know that just toggling
> | > | >
> | > | > _R_CHECK_FORCE_SUGGESTS_=FALSE
> | > |
> | > | I was travelling, hence a delayed response:
> | > |
> | > | Why users of TravisCI? It is documented in the manual. Setting it to
> | >
> | > Because Travis breaks your check as it works in a cleanroom with only the
> | > specified packages installed. As it (and that is the gist of my argument)
> | > should ...
> |
> | No, because if I suggest a package, I want to check also the code that
> | uses a suggested package. So I have to have the package installed.
>
> But then you are treating Suggests as Depends and installing irregardless.

Yes, because I want to check all the runtime code on CRAN and not only 
subsets.


>
> | > No, CRAN could just flip that toggle and run once.
> |
> | I do not get it: It won't make much of a difference because I have most
> | packages installed. It is only a diffrence for suggested packages that
>
> Which is a normal shortcut to make your life easier ... but not what other
> systems do. Travis CI runs start from scratch with an empty base. So does
> Debian for package build (and for subsequent tests such as the
> reproducibility tests). In each case only listed packages get installed.

Yes, I'd install install time dependencies for the installtion 
procedures and all dependencies for the check part.


> When we let R do its business Suggests is (currently) interpreted as
> Depends.

No, as we check installtion without suggetsed packages.


> I continue to claim that is not what it is for.
>
> As Thomas pointed out, Suggests: seems to be overloaded already to two
> distinct use cases.


Yes, and I know that a package should work without the suggestes 
installed, we do not disagree there.



> | are not available for my platform, and toggling it means checks always
> | fail then.
> |
> |
> | > What Duncan suggested was (as I understand it an empirically-driven
> | > assessment of what it would take to get from here (set to FALSE, tolerate bad
> | > Policy) to there (set to TRUE, IMHO better Policy adherence).
> |
> | You do not understand the environment variable, I believe.
>
> That is of course entirely possibly but it also seems that some of us in this
> discussion are continuously talking past each other. I tried to make my case
> but seemingly failed to explain it clearly enough.


So we agree that it would be nice to test with and without installed 
suggested packages? And the checks should give fine results in both 
cases, right?

Best,
Uwe


From otoomet at gmail.com  Wed Aug  3 17:48:41 2016
From: otoomet at gmail.com (Ott Toomet)
Date: Wed, 3 Aug 2016 08:48:41 -0700
Subject: [R-pkg-devel] openMP/reduction statement causes build crash on
	travis-ci
In-Reply-To: <CAOKDuOg7JtNUmk4q5Bm91oxdOkfDCGQBOnvx5bNEobfRv99aXg@mail.gmail.com>
References: <CAOKDuOg7JtNUmk4q5Bm91oxdOkfDCGQBOnvx5bNEobfRv99aXg@mail.gmail.com>
Message-ID: <CAMMJQ0YVvjLBcji9-uoGHeKLd=6FCFWy0G6gOf+PMQzX7UC3dA@mail.gmail.com>

Hi Mark,
if you consider backward compatibility (and potential compatibility with
other compilers) a worthy goal, you can easily reduce manually in a
'#pragma omp critical' block.  An example here (around the middle of the
page):

http://www.parallelr.com/r-and-openmp-boosting-compiled-code-on-multi-core-cpu-s/

Cheers,
Ott

On Wed, Aug 3, 2016 at 1:13 AM, Mark van der Loo <mark.vanderloo at gmail.com>
wrote:

> Dear pkg developers,
>
>
> I'm working on a package using C code and openMP. The package builds and
> tests fine on my own machine[1] and also on r-hub[2]. However on travis-ci
> the build crashes[3] with the following message (plus a few similar):
>
> gower.c:297:29: error: expected ?+?, ?*?, ?-?, ?&?, ?^?, ?|?, ?&&?, or ?||?
> before ?min?
>
> The line in question is an #omp pragma statement:
>
>   #pragma omp for reduction(min:imin), reduction(max:imax)
>
>
> I am using #pragma omp statements all over the place and this is the only
> type causing crashes. I'm guessing it has something to do with travis
> building on a 12.04 ubuntu VM with a rather old  gcc (4.6.3).
>
> So I have two questions:
>
> 1. Has anyone else seen this? Or am I missing something?
> 2. Is there a workaround, or should I just go for another build service
> (which one)?
>
> Cheers,
> Mark
>
>
> [1] Linux duvel 4.4.0-31-generic #50-Ubuntu SMP Wed Jul 13 00:07:12 UTC
> 2016 x86_64 x86_64 x86_64 GNU/Linux w/gcc 5.4.0, libgomp1.0.0
> [2]
>
> https://builder.r-hub.io/status/gower_0.0.1.tar.gz-8c487e92f4af364ee73f85ca8f59775c
> [3] https://travis-ci.org/markvanderloo/gower#L619
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel




-- 
Ott Toomet

Visiting Researcher
School of Information
Mary Gates Hall, Suite 310
University of Washington
Seattle, WA 98195

	[[alternative HTML version deleted]]


From edd at debian.org  Wed Aug  3 17:58:03 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Wed, 3 Aug 2016 10:58:03 -0500
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <f634c62d-91bf-50ad-a492-5ddb9651620c@statistik.tu-dortmund.de>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
	<b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
	<22433.114.172309.681071@max.nulle.part>
	<41d5da4d-3430-a0d7-8a56-d5343ffdee52@gmail.com>
	<22433.8161.749443.565578@max.nulle.part>
	<150d50f3-8e37-7799-3f9f-e60d5cbba952@gmail.com>
	<22433.57996.144409.881996@max.nulle.part>
	<2db7e05f-b24f-f71c-4718-d71bf1067370@statistik.tu-dortmund.de>
	<22433.64598.185995.920118@max.nulle.part>
	<589fad90-d896-f407-c795-64b32775ba7f@statistik.tu-dortmund.de>
	<22434.2848.510307.630246@max.nulle.part>
	<f634c62d-91bf-50ad-a492-5ddb9651620c@statistik.tu-dortmund.de>
Message-ID: <22434.5259.150579.54828@max.nulle.part>


On 3 August 2016 at 17:39, Uwe Ligges wrote:
| On 03.08.2016 17:17, Dirk Eddelbuettel wrote:
| > On 3 August 2016 at 16:21, Uwe Ligges wrote:
| >
| > But then you are treating Suggests as Depends and installing irregardless.
| 
| Yes, because I want to check all the runtime code on CRAN and not only 
| subsets.

To me, the intent of Suggests is to create such subsets.

If you prohibit its use, may as well remove it (or rename it to, say,
"VignetteDepends" or whatnot).

| > When we let R do its business Suggests is (currently) interpreted as
| > Depends.
| 
| No, as we check installtion without suggetsed packages.

I would do the same for Suggests.  Test without them.

| > As Thomas pointed out, Suggests: seems to be overloaded already to two
| > distinct use cases.
| 
| Yes, and I know that a package should work without the suggestes 
| installed, we do not disagree there.

Hooray. Agreement.

| So we agree that it would be nice to test with and without installed 
| suggested packages? And the checks should give fine results in both 
| cases, right?

I would suggest to modify the behaviour to test without suggested packages as
a default.  Should the suggested package be present on the box a test could
be conditional.

A side effect would be to make things faster as fewer packages are involved.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From murdoch.duncan at gmail.com  Wed Aug  3 19:44:17 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Wed, 3 Aug 2016 13:44:17 -0400
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <22434.2848.510307.630246@max.nulle.part>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
	<b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
	<22433.114.172309.681071@max.nulle.part>
	<41d5da4d-3430-a0d7-8a56-d5343ffdee52@gmail.com>
	<22433.8161.749443.565578@max.nulle.part>
	<150d50f3-8e37-7799-3f9f-e60d5cbba952@gmail.com>
	<22433.57996.144409.881996@max.nulle.part>
	<2db7e05f-b24f-f71c-4718-d71bf1067370@statistik.tu-dortmund.de>
	<22433.64598.185995.920118@max.nulle.part>
	<589fad90-d896-f407-c795-64b32775ba7f@statistik.tu-dortmund.de>
	<22434.2848.510307.630246@max.nulle.part>
Message-ID: <2c64a251-f2a4-7f1f-823d-da57fd011636@gmail.com>

On 03/08/2016 11:17 AM, Dirk Eddelbuettel wrote:
>
> On 3 August 2016 at 16:21, Uwe Ligges wrote:
> |
> |
> | On 03.08.2016 16:14, Dirk Eddelbuettel wrote:
> | >
> | > On 3 August 2016 at 16:00, Uwe Ligges wrote:
> | > | On 03.08.2016 14:24, Dirk Eddelbuettel wrote:
> | > | > Then again, users of TravisCI know that just toggling
> | > | >
> | > | > _R_CHECK_FORCE_SUGGESTS_=FALSE
> | > |
> | > | I was travelling, hence a delayed response:
> | > |
> | > | Why users of TravisCI? It is documented in the manual. Setting it to
> | >
> | > Because Travis breaks your check as it works in a cleanroom with only the
> | > specified packages installed. As it (and that is the gist of my argument)
> | > should ...
> |
> | No, because if I suggest a package, I want to check also the code that
> | uses a suggested package. So I have to have the package installed.
>
> But then you are treating Suggests as Depends and installing irregardless.

No, it is different from Depends.

Depends implies something will be attached to the search list.  Suggests 
doesn't.  It is more like Imports, but without importing anything.

CRAN chooses to test in an environment where all Suggested packages are 
available.  They could do more testing (and I am pretty strongly in 
favour of that), e.g. *also* test in an environment where none of them 
are available.  But lots of packages will fail those tests, hence my 
request to you (not a gambit, I'm not playing a game) to estimate how 
many, and work out how to fix those packages.

Doing more testing will make it harder to get a package accepted on 
CRAN, but hopefully will mean that if it makes it there, it will be of 
better quality.

The other thing I am trying to do is to work out ways to spread out the 
work that CRAN does to other people.  I believe the current model will 
not last another year, and I'd rather that it didn't collapse 
completely.  This is unlikely to be my only request for help from people 
on this list.

>
> | > No, CRAN could just flip that toggle and run once.
> |
> | I do not get it: It won't make much of a difference because I have most
> | packages installed. It is only a diffrence for suggested packages that
>
> Which is a normal shortcut to make your life easier ... but not what other
> systems do. Travis CI runs start from scratch with an empty base. So does
> Debian for package build (and for subsequent tests such as the
> reproducibility tests). In each case only listed packages get installed.
>
> When we let R do its business Suggests is (currently) interpreted as
> Depends. I continue to claim that is not what it is for.
>
> As Thomas pointed out, Suggests: seems to be overloaded already to two
> distinct use cases.
>
> | are not available for my platform, and toggling it means checks always
> | fail then.
> |
> |
> | > What Duncan suggested was (as I understand it an empirically-driven
> | > assessment of what it would take to get from here (set to FALSE, tolerate bad
> | > Policy) to there (set to TRUE, IMHO better Policy adherence).
> |
> | You do not understand the environment variable, I believe.
>
> That is of course entirely possibly but it also seems that some of us in this
> discussion are continuously talking past each other. I tried to make my case
> but seemingly failed to explain it clearly enough.

That's the nature of the medium.  You need to be prepared to say the 
same thing in different ways so that dense people like me understand them.

Duncan Murdoch


From edd at debian.org  Wed Aug  3 20:03:10 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Wed, 3 Aug 2016 13:03:10 -0500
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <2c64a251-f2a4-7f1f-823d-da57fd011636@gmail.com>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
	<b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
	<22433.114.172309.681071@max.nulle.part>
	<41d5da4d-3430-a0d7-8a56-d5343ffdee52@gmail.com>
	<22433.8161.749443.565578@max.nulle.part>
	<150d50f3-8e37-7799-3f9f-e60d5cbba952@gmail.com>
	<22433.57996.144409.881996@max.nulle.part>
	<2db7e05f-b24f-f71c-4718-d71bf1067370@statistik.tu-dortmund.de>
	<22433.64598.185995.920118@max.nulle.part>
	<589fad90-d896-f407-c795-64b32775ba7f@statistik.tu-dortmund.de>
	<22434.2848.510307.630246@max.nulle.part>
	<2c64a251-f2a4-7f1f-823d-da57fd011636@gmail.com>
Message-ID: <22434.12766.316014.647624@max.nulle.part>


On 3 August 2016 at 13:44, Duncan Murdoch wrote:
| On 03/08/2016 11:17 AM, Dirk Eddelbuettel wrote:
| >
| > On 3 August 2016 at 16:21, Uwe Ligges wrote:
| > |
| > |
| > | On 03.08.2016 16:14, Dirk Eddelbuettel wrote:
| > | >
| > | > On 3 August 2016 at 16:00, Uwe Ligges wrote:
| > | > | On 03.08.2016 14:24, Dirk Eddelbuettel wrote:
| > | > | > Then again, users of TravisCI know that just toggling
| > | > | >
| > | > | > _R_CHECK_FORCE_SUGGESTS_=FALSE
| > | > |
| > | > | I was travelling, hence a delayed response:
| > | > |
| > | > | Why users of TravisCI? It is documented in the manual. Setting it to
| > | >
| > | > Because Travis breaks your check as it works in a cleanroom with only the
| > | > specified packages installed. As it (and that is the gist of my argument)
| > | > should ...
| > |
| > | No, because if I suggest a package, I want to check also the code that
| > | uses a suggested package. So I have to have the package installed.
| >
| > But then you are treating Suggests as Depends and installing irregardless.
| 
| No, it is different from Depends.
| 
| Depends implies something will be attached to the search list.  Suggests 
| doesn't.  It is more like Imports, but without importing anything.

I am aware of the distinction.  I was talking, or trying to talk, about
'conditional' versus 'unconditional' "presence of packages" if you wish.

Depends/Import are the latter, Suggests is the former.

Or it would be if we chose to treat it like that. My gripe is that we don't.

| CRAN chooses to test in an environment where all Suggested packages are 
| available.  They could do more testing (and I am pretty strongly in 
| favour of that), e.g. *also* test in an environment where none of them 
| are available.  But lots of packages will fail those tests, hence my 
| request to you (not a gambit, I'm not playing a game) to estimate how 
| many, and work out how to fix those packages.

I did send a PR to one such package in the past. The package maintainers
ignored it.  So I stopped.

I think I'll do the same with this thread now. 
 
| Doing more testing will make it harder to get a package accepted on 
| CRAN, but hopefully will mean that if it makes it there, it will be of 
| better quality.
| 
| The other thing I am trying to do is to work out ways to spread out the 
| work that CRAN does to other people.  I believe the current model will 
| not last another year, and I'd rather that it didn't collapse 
| completely.  This is unlikely to be my only request for help from people 
| on this list.

I actually suggested doing the exact amount of tests, but it differently by
not forcing Suggests: in.

I have the feeling you seem to think that I want to create more work not
less. I am not.

I once thought I could influence the 'powers that be' to interpret the policy
they have written (ie Writing R Extensions) differently.  But I guess I was
wrong. 

Dirk
 
| > | > No, CRAN could just flip that toggle and run once.
| > |
| > | I do not get it: It won't make much of a difference because I have most
| > | packages installed. It is only a diffrence for suggested packages that
| >
| > Which is a normal shortcut to make your life easier ... but not what other
| > systems do. Travis CI runs start from scratch with an empty base. So does
| > Debian for package build (and for subsequent tests such as the
| > reproducibility tests). In each case only listed packages get installed.
| >
| > When we let R do its business Suggests is (currently) interpreted as
| > Depends. I continue to claim that is not what it is for.
| >
| > As Thomas pointed out, Suggests: seems to be overloaded already to two
| > distinct use cases.
| >
| > | are not available for my platform, and toggling it means checks always
| > | fail then.
| > |
| > |
| > | > What Duncan suggested was (as I understand it an empirically-driven
| > | > assessment of what it would take to get from here (set to FALSE, tolerate bad
| > | > Policy) to there (set to TRUE, IMHO better Policy adherence).
| > |
| > | You do not understand the environment variable, I believe.
| >
| > That is of course entirely possibly but it also seems that some of us in this
| > discussion are continuously talking past each other. I tried to make my case
| > but seemingly failed to explain it clearly enough.
| 
| That's the nature of the medium.  You need to be prepared to say the 
| same thing in different ways so that dense people like me understand them.
| 
| Duncan Murdoch
| 

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From murdoch.duncan at gmail.com  Wed Aug  3 23:35:13 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Wed, 3 Aug 2016 17:35:13 -0400
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <22434.12766.316014.647624@max.nulle.part>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
	<b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
	<22433.114.172309.681071@max.nulle.part>
	<41d5da4d-3430-a0d7-8a56-d5343ffdee52@gmail.com>
	<22433.8161.749443.565578@max.nulle.part>
	<150d50f3-8e37-7799-3f9f-e60d5cbba952@gmail.com>
	<22433.57996.144409.881996@max.nulle.part>
	<2db7e05f-b24f-f71c-4718-d71bf1067370@statistik.tu-dortmund.de>
	<22433.64598.185995.920118@max.nulle.part>
	<589fad90-d896-f407-c795-64b32775ba7f@statistik.tu-dortmund.de>
	<22434.2848.510307.630246@max.nulle.part>
	<2c64a251-f2a4-7f1f-823d-da57fd011636@gmail.com>
	<22434.12766.316014.647624@max.nulle.part>
Message-ID: <d72cfe51-28be-9488-5b47-73cdfcbf1fa7@gmail.com>

On 03/08/2016 2:03 PM, Dirk Eddelbuettel wrote:
>
> On 3 August 2016 at 13:44, Duncan Murdoch wrote:
> | On 03/08/2016 11:17 AM, Dirk Eddelbuettel wrote:
> | >
> | > On 3 August 2016 at 16:21, Uwe Ligges wrote:
> | > |
> | > |
> | > | On 03.08.2016 16:14, Dirk Eddelbuettel wrote:
> | > | >
> | > | > On 3 August 2016 at 16:00, Uwe Ligges wrote:
> | > | > | On 03.08.2016 14:24, Dirk Eddelbuettel wrote:
> | > | > | > Then again, users of TravisCI know that just toggling
> | > | > | >
> | > | > | > _R_CHECK_FORCE_SUGGESTS_=FALSE
> | > | > |
> | > | > | I was travelling, hence a delayed response:
> | > | > |
> | > | > | Why users of TravisCI? It is documented in the manual. Setting it to
> | > | >
> | > | > Because Travis breaks your check as it works in a cleanroom with only the
> | > | > specified packages installed. As it (and that is the gist of my argument)
> | > | > should ...
> | > |
> | > | No, because if I suggest a package, I want to check also the code that
> | > | uses a suggested package. So I have to have the package installed.
> | >
> | > But then you are treating Suggests as Depends and installing irregardless.
> |
> | No, it is different from Depends.
> |
> | Depends implies something will be attached to the search list.  Suggests
> | doesn't.  It is more like Imports, but without importing anything.
>
> I am aware of the distinction.  I was talking, or trying to talk, about
> 'conditional' versus 'unconditional' "presence of packages" if you wish.
>
> Depends/Import are the latter, Suggests is the former.
>
> Or it would be if we chose to treat it like that. My gripe is that we don't.
>
> | CRAN chooses to test in an environment where all Suggested packages are
> | available.  They could do more testing (and I am pretty strongly in
> | favour of that), e.g. *also* test in an environment where none of them
> | are available.  But lots of packages will fail those tests, hence my
> | request to you (not a gambit, I'm not playing a game) to estimate how
> | many, and work out how to fix those packages.
>
> I did send a PR to one such package in the past. The package maintainers
> ignored it.  So I stopped.
>
> I think I'll do the same with this thread now.
>
> | Doing more testing will make it harder to get a package accepted on
> | CRAN, but hopefully will mean that if it makes it there, it will be of
> | better quality.
> |
> | The other thing I am trying to do is to work out ways to spread out the
> | work that CRAN does to other people.  I believe the current model will
> | not last another year, and I'd rather that it didn't collapse
> | completely.  This is unlikely to be my only request for help from people
> | on this list.
>
> I actually suggested doing the exact amount of tests, but it differently by
> not forcing Suggests: in.
>
> I have the feeling you seem to think that I want to create more work not
> less. I am not.

No, you are reading something into my messages that isn't there.  I 
think I understand your suggestion now (CRAN should test with no 
Suggested packages present, not with all of them present).  That is less 
work than they currently do.

I disagree with your suggestion for two reasons.

1. I think it would lead to less effective testing.

As Uwe said, tests would skip code that only runs when Suggested 
packages are present.  I think it would almost certainly lead to less 
code coverage in the tests.

2. It would be disruptive during the transition.

We could work around this by putting together a standard way for a 
package to indicate that some functionality is not available, without 
triggering an error, and the check code could ignore those messages when 
testing with missing Suggested packages.

Actually, I think I am the one who is suggesting the creation of more 
work.  In particular, I suggested you should do some work to address 
point 2 above.  I have also suggested that CRAN should test both with 
and without Suggested packages, which is obviously more work for the 
test machines, but also more work for whoever sets up the new testing code.

My hope is to spread the work out to package submitters, or people on 
this list, rather than on two or three people at CRAN.

> I once thought I could influence the 'powers that be' to interpret the policy
> they have written (ie Writing R Extensions) differently.  But I guess I was
> wrong.

There are no powers, there are only overworked volunteers.

Duncan Murdoch


>
> Dirk
>
> | > | > No, CRAN could just flip that toggle and run once.
> | > |
> | > | I do not get it: It won't make much of a difference because I have most
> | > | packages installed. It is only a diffrence for suggested packages that
> | >
> | > Which is a normal shortcut to make your life easier ... but not what other
> | > systems do. Travis CI runs start from scratch with an empty base. So does
> | > Debian for package build (and for subsequent tests such as the
> | > reproducibility tests). In each case only listed packages get installed.
> | >
> | > When we let R do its business Suggests is (currently) interpreted as
> | > Depends. I continue to claim that is not what it is for.
> | >
> | > As Thomas pointed out, Suggests: seems to be overloaded already to two
> | > distinct use cases.
> | >
> | > | are not available for my platform, and toggling it means checks always
> | > | fail then.
> | > |
> | > |
> | > | > What Duncan suggested was (as I understand it an empirically-driven
> | > | > assessment of what it would take to get from here (set to FALSE, tolerate bad
> | > | > Policy) to there (set to TRUE, IMHO better Policy adherence).
> | > |
> | > | You do not understand the environment variable, I believe.
> | >
> | > That is of course entirely possibly but it also seems that some of us in this
> | > discussion are continuously talking past each other. I tried to make my case
> | > but seemingly failed to explain it clearly enough.
> |
> | That's the nature of the medium.  You need to be prepared to say the
> | same thing in different ways so that dense people like me understand them.
> |
> | Duncan Murdoch
> |
>


From rubak at math.aau.dk  Wed Aug  3 23:36:53 2016
From: rubak at math.aau.dk (Ege Rubak)
Date: Wed, 3 Aug 2016 23:36:53 +0200
Subject: [R-pkg-devel] R package with external C++ library
Message-ID: <abd8d672-c509-db75-b269-9cf79d73e955@math.aau.dk>

Hi,

I would like to port Google's s2-library for spherical geometry (see 
e.g. https://github.com/micolous/s2-geometry-library for a fork on 
GitHub). It is not a standard library that can easily be installed on 
various systems, so I would like to include the source code in the R 
package. The catch is that I would like to modify the source code as 
little as possible :-)

I have package everything and added configure scripts and a tiny 
R-function that calls one of the C++-functions (using the antiquated .C 
interface for now -- that will of course be changed) in this repo:
https://github.com/spatstat/s2

It compiles into a working package on Ubuntu (travis-ci + my laptop), 
OSX (travis-ci), and Windows (appveyor + my surface pro), but R CMD 
check produces some warnings (and a note about the size of the shared 
object, but I assume that is less important).

The main things seem to be related to (travis log is at 
https://travis-ci.org/spatstat/s2/jobs/149578339):

1. Deprecated C++ headers <ext/hash_set> and <ext/hash_map>.

2. Compiled code that calls entry points which might terminate R or 
write to stdout/stderr.

Is it hopeless to get on CRAN with warnings like these?
I'm not very used to writing C/C++ code, but I guess 1. can be fixed by 
a few sed commands with the replacement headers and corresponding new 
function names. Point 2. can probably also be fixed with a reasonable 
effort, but I haven't investigated yet, and I would like an opinion from 
the list before spending more time on this. In more generality the 
question could be phrased something like:

"When including C++ code from an upstream library which you do not 
control should R CMD check be completely spotless or is some flexibility 
to be expected in these circumstances?"

Cheers,
Ege

PS: Extra question (prehaps particularly aimed at Dirk): When I will 
actually start to use the C++ library I expect it could be beneficial to 
use Rcpp. I have seen RcppModules mentioned somewhere, and I wonder if 
such an external C++ library would make sense to interface via 
RcppModules (again aiming at changing upstream sources as little as 
possible)?

-- 
Ege Rubak, Associate Professor,
Department of Mathematical Sciences, Aalborg University
Fredrik Bajers Vej 7G, 9220 Aalborg East, Denmark
Phone: (+45)99408861
Mobile: (+45)30230252
Email: rubak at math.aau.dk


From murdoch.duncan at gmail.com  Wed Aug  3 23:47:10 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Wed, 3 Aug 2016 17:47:10 -0400
Subject: [R-pkg-devel] R package with external C++ library
In-Reply-To: <abd8d672-c509-db75-b269-9cf79d73e955@math.aau.dk>
References: <abd8d672-c509-db75-b269-9cf79d73e955@math.aau.dk>
Message-ID: <8467fdeb-2601-c6e4-95c0-ced9a1ab09d0@gmail.com>

On 03/08/2016 5:36 PM, Ege Rubak wrote:
> Hi,
>
> I would like to port Google's s2-library for spherical geometry (see
> e.g. https://github.com/micolous/s2-geometry-library for a fork on
> GitHub). It is not a standard library that can easily be installed on
> various systems, so I would like to include the source code in the R
> package. The catch is that I would like to modify the source code as
> little as possible :-)
>
> I have package everything and added configure scripts and a tiny
> R-function that calls one of the C++-functions (using the antiquated .C
> interface for now -- that will of course be changed) in this repo:
> https://github.com/spatstat/s2
>
> It compiles into a working package on Ubuntu (travis-ci + my laptop),
> OSX (travis-ci), and Windows (appveyor + my surface pro), but R CMD
> check produces some warnings (and a note about the size of the shared
> object, but I assume that is less important).
>
> The main things seem to be related to (travis log is at
> https://travis-ci.org/spatstat/s2/jobs/149578339):
>
> 1. Deprecated C++ headers <ext/hash_set> and <ext/hash_map>.
>
> 2. Compiled code that calls entry points which might terminate R or
> write to stdout/stderr.
>
> Is it hopeless to get on CRAN with warnings like these?

I don't set CRAN policy, but I would say yes.  Problem 1 limits your 
package to systems using compilers that support those antiquated 
headers; R tries very hard to be portable across many systems.  Problem 
2 makes R potentially unstable.

Duncan Murdoch

> I'm not very used to writing C/C++ code, but I guess 1. can be fixed by
> a few sed commands with the replacement headers and corresponding new
> function names. Point 2. can probably also be fixed with a reasonable
> effort, but I haven't investigated yet, and I would like an opinion from
> the list before spending more time on this. In more generality the
> question could be phrased something like:
>
> "When including C++ code from an upstream library which you do not
> control should R CMD check be completely spotless or is some flexibility
> to be expected in these circumstances?"
>
> Cheers,
> Ege
>
> PS: Extra question (prehaps particularly aimed at Dirk): When I will
> actually start to use the C++ library I expect it could be beneficial to
> use Rcpp. I have seen RcppModules mentioned somewhere, and I wonder if
> such an external C++ library would make sense to interface via
> RcppModules (again aiming at changing upstream sources as little as
> possible)?
>


From rubak at math.aau.dk  Wed Aug  3 23:59:00 2016
From: rubak at math.aau.dk (Ege Rubak)
Date: Wed, 3 Aug 2016 23:59:00 +0200
Subject: [R-pkg-devel] R package with external C++ library
In-Reply-To: <8467fdeb-2601-c6e4-95c0-ced9a1ab09d0@gmail.com>
References: <abd8d672-c509-db75-b269-9cf79d73e955@math.aau.dk>
	<8467fdeb-2601-c6e4-95c0-ced9a1ab09d0@gmail.com>
Message-ID: <e8f27c2d-3870-cf27-8bf0-e785213031de@math.aau.dk>


>> The main things seem to be related to (travis log is at
>> https://travis-ci.org/spatstat/s2/jobs/149578339):
>>
>> 1. Deprecated C++ headers <ext/hash_set> and <ext/hash_map>.
>>
>> 2. Compiled code that calls entry points which might terminate R or
>> write to stdout/stderr.
>>
>> Is it hopeless to get on CRAN with warnings like these?
>
> I don't set CRAN policy, but I would say yes.  Problem 1 limits your
> package to systems using compilers that support those antiquated
> headers; R tries very hard to be portable across many systems.  Problem
> 2 makes R potentially unstable.
>
Thanks for the quick reply. The non-portability issue you mention has 
not shown up so far but I was actually fearing it would show up once I 
(or more likely CRAN) try to compile on solaris -- is there a way to 
test code on solaris without bothering the brave CRAN souls? Anyway, I 
should probably start executing some sed commands and see if I can get 
rid of the problem in a fairly reproducible way.
Regarding problem 2 even if I never use the part of the C++ code that 
writes to stdout etc. I guess it is impossible for CRAN to know this, so 
it makes sense for them to be safe rather than sorry?

/Ege


From murdoch.duncan at gmail.com  Thu Aug  4 00:08:28 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Wed, 3 Aug 2016 18:08:28 -0400
Subject: [R-pkg-devel] R package with external C++ library
In-Reply-To: <e8f27c2d-3870-cf27-8bf0-e785213031de@math.aau.dk>
References: <abd8d672-c509-db75-b269-9cf79d73e955@math.aau.dk>
	<8467fdeb-2601-c6e4-95c0-ced9a1ab09d0@gmail.com>
	<e8f27c2d-3870-cf27-8bf0-e785213031de@math.aau.dk>
Message-ID: <edc963a1-18d4-893c-9399-b95346bd28f1@gmail.com>

On 03/08/2016 5:59 PM, Ege Rubak wrote:
>
>>> The main things seem to be related to (travis log is at
>>> https://travis-ci.org/spatstat/s2/jobs/149578339):
>>>
>>> 1. Deprecated C++ headers <ext/hash_set> and <ext/hash_map>.
>>>
>>> 2. Compiled code that calls entry points which might terminate R or
>>> write to stdout/stderr.
>>>
>>> Is it hopeless to get on CRAN with warnings like these?
>>
>> I don't set CRAN policy, but I would say yes.  Problem 1 limits your
>> package to systems using compilers that support those antiquated
>> headers; R tries very hard to be portable across many systems.  Problem
>> 2 makes R potentially unstable.
>>
> Thanks for the quick reply. The non-portability issue you mention has
> not shown up so far but I was actually fearing it would show up once I
> (or more likely CRAN) try to compile on solaris -- is there a way to
> test code on solaris without bothering the brave CRAN souls?

I don't know.


Anyway, I
> should probably start executing some sed commands and see if I can get
> rid of the problem in a fairly reproducible way.
> Regarding problem 2 even if I never use the part of the C++ code that
> writes to stdout etc. I guess it is impossible for CRAN to know this, so
> it makes sense for them to be safe rather than sorry?

Yes.

Duncan Murdoch


From maxime.turgeon at mail.mcgill.ca  Thu Aug  4 00:09:57 2016
From: maxime.turgeon at mail.mcgill.ca (MTurgeon)
Date: Wed, 3 Aug 2016 16:09:57 -0600
Subject: [R-pkg-devel] R package with external C++ library
In-Reply-To: <abd8d672-c509-db75-b269-9cf79d73e955@math.aau.dk>
References: <abd8d672-c509-db75-b269-9cf79d73e955@math.aau.dk>
Message-ID: <8249cbe4-f73a-99f3-3564-ff37bf6e7c72@mail.mcgill.ca>

Hi Ege,

For writing to standard output/error, you can use Rcout or Rcerr 
(defined by Rcpp; they even have a vignette showing how to use it in the 
Rcpp gallery). Alternatively, if you're using C code, you can replace 
printf by Rprintf (this is explained in Writing R extensions, section 6.5).

For abort, you can use error() instead (this is documented in WRE, 
section 6.2).

Hope this helps,

Max

On 2016-08-03 03:36 PM, Ege Rubak wrote:
> Hi,
>
> I would like to port Google's s2-library for spherical geometry (see 
> e.g. https://github.com/micolous/s2-geometry-library for a fork on 
> GitHub). It is not a standard library that can easily be installed on 
> various systems, so I would like to include the source code in the R 
> package. The catch is that I would like to modify the source code as 
> little as possible :-)
>
> I have package everything and added configure scripts and a tiny 
> R-function that calls one of the C++-functions (using the antiquated 
> .C interface for now -- that will of course be changed) in this repo:
> https://github.com/spatstat/s2
>
> It compiles into a working package on Ubuntu (travis-ci + my laptop), 
> OSX (travis-ci), and Windows (appveyor + my surface pro), but R CMD 
> check produces some warnings (and a note about the size of the shared 
> object, but I assume that is less important).
>
> The main things seem to be related to (travis log is at 
> https://travis-ci.org/spatstat/s2/jobs/149578339):
>
> 1. Deprecated C++ headers <ext/hash_set> and <ext/hash_map>.
>
> 2. Compiled code that calls entry points which might terminate R or 
> write to stdout/stderr.
>
> Is it hopeless to get on CRAN with warnings like these?
> I'm not very used to writing C/C++ code, but I guess 1. can be fixed 
> by a few sed commands with the replacement headers and corresponding 
> new function names. Point 2. can probably also be fixed with a 
> reasonable effort, but I haven't investigated yet, and I would like an 
> opinion from the list before spending more time on this. In more 
> generality the question could be phrased something like:
>
> "When including C++ code from an upstream library which you do not 
> control should R CMD check be completely spotless or is some 
> flexibility to be expected in these circumstances?"
>
> Cheers,
> Ege
>
> PS: Extra question (prehaps particularly aimed at Dirk): When I will 
> actually start to use the C++ library I expect it could be beneficial 
> to use Rcpp. I have seen RcppModules mentioned somewhere, and I wonder 
> if such an external C++ library would make sense to interface via 
> RcppModules (again aiming at changing upstream sources as little as 
> possible)?
>

-- 
-----------------------------------------------------------------

Maxime Turgeon, PhD candidate

Department of Epidemiology, Biostatistics and Occupational Health
McGill University


From kevinushey at gmail.com  Thu Aug  4 00:10:45 2016
From: kevinushey at gmail.com (Kevin Ushey)
Date: Wed, 3 Aug 2016 15:10:45 -0700
Subject: [R-pkg-devel] R package with external C++ library
In-Reply-To: <e8f27c2d-3870-cf27-8bf0-e785213031de@math.aau.dk>
References: <abd8d672-c509-db75-b269-9cf79d73e955@math.aau.dk>
	<8467fdeb-2601-c6e4-95c0-ced9a1ab09d0@gmail.com>
	<e8f27c2d-3870-cf27-8bf0-e785213031de@math.aau.dk>
Message-ID: <CAJXgQP3jM-kUp-d5sHthDDbp8DBs98y=SfDR46KkF1NMbpTw2g@mail.gmail.com>

It looks like most of these usages of std::cout, std::cerr and abort
are coming from the logging infrastructure:

https://github.com/micolous/s2-geometry-library/blob/master/geometry/base/logging.h

If you wanted to make this work on CRAN, you could patch these files
in a number of ways:

You could replace calls to 'std::cout' with a helper function
'cout()', and 'std::cerr' with a helper function 'cerr()', to instead
point to an output stream object that delegates to Rprintf and
REprintf for logging. You can see a sample implementation of something
like this in the infamous test obfuscation suite, testthat:

https://github.com/hadley/testthat/blob/46d15dad93fc2bfca339963cb66ffb1a309fa8a0/inst/include/testthat/testthat.h#L58-L96

https://github.com/hadley/testthat/blob/46d15dad93fc2bfca339963cb66ffb1a309fa8a0/inst/include/testthat/testthat.h#L119-L129

Similarly, calls to 'abort()' could instead throw a C++ exception,
which you would then catch at the top level with your R wrapper
entrypoints, and forwarded to the user appropriately (e.g. with
Rf_error called with no C++ objects on the stack).

As for the use of deprecated C++ headers, you could patch those to
instead use C++11's 'unordered_set' and 'unordered_map', or try
getting similar classes from e.g. Boost.

All in all, it would likely be a lot of work to get the package ready
for a CRAN submission, but it's definitely doable.

Finally, the CRAN policies state:

Package authors should make all reasonable efforts to provide
cross-platform portable code. Packages will not normally be accepted
that do not run on at least two of the major R platforms. Cases for
Windows-only packages will be considered, but CRAN may not be the most
appropriate place to host them.

So if compilation on Solaris really is a non-starter for some reason,
I think you can indicate that you do not intend for your package to be
used / distributed on Solaris (but you would probably have to provide
sufficient justification during the submission).

Cheers,
Kevin

On Wed, Aug 3, 2016 at 2:59 PM, Ege Rubak <rubak at math.aau.dk> wrote:
>
>>> The main things seem to be related to (travis log is at
>>> https://travis-ci.org/spatstat/s2/jobs/149578339):
>>>
>>> 1. Deprecated C++ headers <ext/hash_set> and <ext/hash_map>.
>>>
>>> 2. Compiled code that calls entry points which might terminate R or
>>> write to stdout/stderr.
>>>
>>> Is it hopeless to get on CRAN with warnings like these?
>>
>>
>> I don't set CRAN policy, but I would say yes.  Problem 1 limits your
>> package to systems using compilers that support those antiquated
>> headers; R tries very hard to be portable across many systems.  Problem
>> 2 makes R potentially unstable.
>>
> Thanks for the quick reply. The non-portability issue you mention has not
> shown up so far but I was actually fearing it would show up once I (or more
> likely CRAN) try to compile on solaris -- is there a way to test code on
> solaris without bothering the brave CRAN souls? Anyway, I should probably
> start executing some sed commands and see if I can get rid of the problem in
> a fairly reproducible way.
> Regarding problem 2 even if I never use the part of the C++ code that writes
> to stdout etc. I guess it is impossible for CRAN to know this, so it makes
> sense for them to be safe rather than sorry?
>
> /Ege
>
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From kevinushey at gmail.com  Thu Aug  4 00:13:08 2016
From: kevinushey at gmail.com (Kevin Ushey)
Date: Wed, 3 Aug 2016 15:13:08 -0700
Subject: [R-pkg-devel] R package with external C++ library
In-Reply-To: <8249cbe4-f73a-99f3-3564-ff37bf6e7c72@mail.mcgill.ca>
References: <abd8d672-c509-db75-b269-9cf79d73e955@math.aau.dk>
	<8249cbe4-f73a-99f3-3564-ff37bf6e7c72@mail.mcgill.ca>
Message-ID: <CAJXgQP2nW7xFD2MQbXZuN7qKqO91HPGRZQL_rCaHDsUjosMG3Q@mail.gmail.com>

On Wed, Aug 3, 2016 at 3:09 PM, MTurgeon <maxime.turgeon at mail.mcgill.ca> wrote:
> Hi Ege,
>
> For writing to standard output/error, you can use Rcout or Rcerr (defined by
> Rcpp; they even have a vignette showing how to use it in the Rcpp gallery).
> Alternatively, if you're using C code, you can replace printf by Rprintf
> (this is explained in Writing R extensions, section 6.5).
>
> For abort, you can use error() instead (this is documented in WRE, section
> 6.2).

Although, please note that calling Rf_error from a C++ context is not
safe as it will skip the execution of any destructors for C++ objects
on the stack, and lead to undefined behavior in general. It's much
better to use Rcpp, Rcpp attributes, and call Rcpp::stop (which
handles this for you), or else implement this 'by hand' and throw a
C++ exception that is caught by your wrapper functions at the top
level.

> Hope this helps,
>
> Max
>
> On 2016-08-03 03:36 PM, Ege Rubak wrote:
>>
>> Hi,
>>
>> I would like to port Google's s2-library for spherical geometry (see e.g.
>> https://github.com/micolous/s2-geometry-library for a fork on GitHub). It is
>> not a standard library that can easily be installed on various systems, so I
>> would like to include the source code in the R package. The catch is that I
>> would like to modify the source code as little as possible :-)
>>
>> I have package everything and added configure scripts and a tiny
>> R-function that calls one of the C++-functions (using the antiquated .C
>> interface for now -- that will of course be changed) in this repo:
>> https://github.com/spatstat/s2
>>
>> It compiles into a working package on Ubuntu (travis-ci + my laptop), OSX
>> (travis-ci), and Windows (appveyor + my surface pro), but R CMD check
>> produces some warnings (and a note about the size of the shared object, but
>> I assume that is less important).
>>
>> The main things seem to be related to (travis log is at
>> https://travis-ci.org/spatstat/s2/jobs/149578339):
>>
>> 1. Deprecated C++ headers <ext/hash_set> and <ext/hash_map>.
>>
>> 2. Compiled code that calls entry points which might terminate R or write
>> to stdout/stderr.
>>
>> Is it hopeless to get on CRAN with warnings like these?
>> I'm not very used to writing C/C++ code, but I guess 1. can be fixed by a
>> few sed commands with the replacement headers and corresponding new function
>> names. Point 2. can probably also be fixed with a reasonable effort, but I
>> haven't investigated yet, and I would like an opinion from the list before
>> spending more time on this. In more generality the question could be phrased
>> something like:
>>
>> "When including C++ code from an upstream library which you do not control
>> should R CMD check be completely spotless or is some flexibility to be
>> expected in these circumstances?"
>>
>> Cheers,
>> Ege
>>
>> PS: Extra question (prehaps particularly aimed at Dirk): When I will
>> actually start to use the C++ library I expect it could be beneficial to use
>> Rcpp. I have seen RcppModules mentioned somewhere, and I wonder if such an
>> external C++ library would make sense to interface via RcppModules (again
>> aiming at changing upstream sources as little as possible)?
>>
>
> --
> -----------------------------------------------------------------
>
> Maxime Turgeon, PhD candidate
>
> Department of Epidemiology, Biostatistics and Occupational Health
> McGill University
>
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From rubak at math.aau.dk  Thu Aug  4 00:26:32 2016
From: rubak at math.aau.dk (Ege Rubak)
Date: Thu, 4 Aug 2016 00:26:32 +0200
Subject: [R-pkg-devel] R package with external C++ library
In-Reply-To: <CAJXgQP2nW7xFD2MQbXZuN7qKqO91HPGRZQL_rCaHDsUjosMG3Q@mail.gmail.com>
References: <abd8d672-c509-db75-b269-9cf79d73e955@math.aau.dk>
	<8249cbe4-f73a-99f3-3564-ff37bf6e7c72@mail.mcgill.ca>
	<CAJXgQP2nW7xFD2MQbXZuN7qKqO91HPGRZQL_rCaHDsUjosMG3Q@mail.gmail.com>
Message-ID: <87d3d223-b90d-545c-4b0c-d915212a0d42@math.aau.dk>

Thanks for the good specific suggestions Kevin and Max. It is amazing 
that great help is available from the R community in such a short time.

Clearly everybody thinks that these issues should be fixed before I even 
try to submit to CRAN (and I fully agree that they shouldn't lower their 
standards, but I just wanted to be sure before throwing myself into the 
unknown land of seriously editing other people C++ code). I will give it 
a go sometime soon and keep your pointers in mind.

Cheers,
Ege


From edd at debian.org  Thu Aug  4 03:15:38 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Wed, 3 Aug 2016 20:15:38 -0500
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <d72cfe51-28be-9488-5b47-73cdfcbf1fa7@gmail.com>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
	<b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
	<22433.114.172309.681071@max.nulle.part>
	<41d5da4d-3430-a0d7-8a56-d5343ffdee52@gmail.com>
	<22433.8161.749443.565578@max.nulle.part>
	<150d50f3-8e37-7799-3f9f-e60d5cbba952@gmail.com>
	<22433.57996.144409.881996@max.nulle.part>
	<2db7e05f-b24f-f71c-4718-d71bf1067370@statistik.tu-dortmund.de>
	<22433.64598.185995.920118@max.nulle.part>
	<589fad90-d896-f407-c795-64b32775ba7f@statistik.tu-dortmund.de>
	<22434.2848.510307.630246@max.nulle.part>
	<2c64a251-f2a4-7f1f-823d-da57fd011636@gmail.com>
	<22434.12766.316014.647624@max.nulle.part>
	<d72cfe51-28be-9488-5b47-73cdfcbf1fa7@gmail.com>
Message-ID: <22434.38714.302662.351680@max.nulle.part>


On 3 August 2016 at 17:35, Duncan Murdoch wrote:
| No, you are reading something into my messages that isn't there.  I 
| think I understand your suggestion now (CRAN should test with no 
| Suggested packages present, not with all of them present).  That is less 
| work than they currently do.

And have Suggests:'ed package tested conditionally.  Whether their tests
execute will be in the control of the one running the tests because he can
make use the optionality provided by Suggests: Either install, or don't.

So it can be the same tests as now.  But better. Because "choice".
 
| I disagree with your suggestion for two reasons.
| 
| 1. I think it would lead to less effective testing.

Nope. See above.
 
| 2. It would be disruptive during the transition.

How to get from here to there is left as an exercise to the reader.

The mostly-wasteful discussion has left me less than motivated to work on
this as there is just so much misunderstanding and blockage.  We could work
all this out during a hackathon day.  Over email, alas, things don't seem to
work too well.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From bob at rud.is  Thu Aug  4 04:26:32 2016
From: bob at rud.is (Bob Rudis)
Date: Wed, 3 Aug 2016 22:26:32 -0400
Subject: [R-pkg-devel] Pkgs with ToS violations
Message-ID: <CAA-FpKXv-j-go-7H6uE1SzqdVX-VZkF2grcXgX56yYm_Ci62Zg@mail.gmail.com>

I came across https://cran.rstudio.com/web/packages/boxoffice/index.html
in CRAN today and while I don't expect CRAN to be a legal authority,
should there not be some kind of policy for excluding R packages that
deliberately violate (data) site ToS? (I'm asking this here vs sending
a note to CRAN folks since I tend to be a bit sensitive to this
particular issue).

Box Office Mojo - which is really just Amazon - clearly states that
the activities this package facilitates are in violation of their ToS.
Unlike examples on blogs that also violate BOM ToS, this pkg in CRAN
is almost legitimizing the violations.

Amazon only goes after a few folks a year and it's unlikely R folks
will be their target (for now) but that doesn't make it OK IMO.

Is this worth bringing up to CRAN?


From edd at debian.org  Thu Aug  4 05:21:10 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Wed, 3 Aug 2016 22:21:10 -0500
Subject: [R-pkg-devel] Pkgs with ToS violations
In-Reply-To: <CAA-FpKXv-j-go-7H6uE1SzqdVX-VZkF2grcXgX56yYm_Ci62Zg@mail.gmail.com>
References: <CAA-FpKXv-j-go-7H6uE1SzqdVX-VZkF2grcXgX56yYm_Ci62Zg@mail.gmail.com>
Message-ID: <22434.46246.705364.716159@max.nulle.part>


On 3 August 2016 at 22:26, Bob Rudis wrote:
| I came across https://cran.rstudio.com/web/packages/boxoffice/index.html
| in CRAN today and while I don't expect CRAN to be a legal authority,
| should there not be some kind of policy for excluding R packages that
| deliberately violate (data) site ToS? (I'm asking this here vs sending
| a note to CRAN folks since I tend to be a bit sensitive to this
| particular issue).
| 
| Box Office Mojo - which is really just Amazon - clearly states that
| the activities this package facilitates are in violation of their ToS.
| Unlike examples on blogs that also violate BOM ToS, this pkg in CRAN
| is almost legitimizing the violations.
| 
| Amazon only goes after a few folks a year and it's unlikely R folks
| will be their target (for now) but that doesn't make it OK IMO.
| 
| Is this worth bringing up to CRAN?

I think so.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From pdalgd at gmail.com  Thu Aug  4 10:50:21 2016
From: pdalgd at gmail.com (peter dalgaard)
Date: Thu, 4 Aug 2016 10:50:21 +0200
Subject: [R-pkg-devel] Pkgs with ToS violations
In-Reply-To: <22434.46246.705364.716159@max.nulle.part>
References: <CAA-FpKXv-j-go-7H6uE1SzqdVX-VZkF2grcXgX56yYm_Ci62Zg@mail.gmail.com>
	<22434.46246.705364.716159@max.nulle.part>
Message-ID: <B8CC51F2-0562-4B9F-8191-732826A081B4@gmail.com>


On 04 Aug 2016, at 05:21 , Dirk Eddelbuettel <edd at debian.org> wrote:

> 
> On 3 August 2016 at 22:26, Bob Rudis wrote:
> | I came across https://cran.rstudio.com/web/packages/boxoffice/index.html
> | in CRAN today and while I don't expect CRAN to be a legal authority,
> | should there not be some kind of policy for excluding R packages that
> | deliberately violate (data) site ToS? (I'm asking this here vs sending
> | a note to CRAN folks since I tend to be a bit sensitive to this
> | particular issue).
> | 
> | Box Office Mojo - which is really just Amazon - clearly states that
> | the activities this package facilitates are in violation of their ToS.
> | Unlike examples on blogs that also violate BOM ToS, this pkg in CRAN
> | is almost legitimizing the violations.
> | 
> | Amazon only goes after a few folks a year and it's unlikely R folks
> | will be their target (for now) but that doesn't make it OK IMO.
> | 
> | Is this worth bringing up to CRAN?
> 
> I think so.
> 


By all means bring it up. But there's the usual tools-vs-action discussion, and I do notice that the ToS has

? Licensing IMDb's Content; Consent to Use Robots and Crawlers: If you are interested in receiving our express written permission to use our content for your non-personal (including commercial) use, please contact our Licensing Department. We do allow the limited use of robots and crawlers, such as those from certain search engines, with our express written consent. 

I.e., it could be a matter of suitable flagging of the software as requiring permission. You likely don't wnat CRAN to run automated tests that run scrapers, though.

-pd 


> Dirk
> 
> -- 
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
> 
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From murdoch.duncan at gmail.com  Thu Aug  4 12:23:24 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Thu, 4 Aug 2016 06:23:24 -0400
Subject: [R-pkg-devel] Pkgs with ToS violations
In-Reply-To: <CAA-FpKXv-j-go-7H6uE1SzqdVX-VZkF2grcXgX56yYm_Ci62Zg@mail.gmail.com>
References: <CAA-FpKXv-j-go-7H6uE1SzqdVX-VZkF2grcXgX56yYm_Ci62Zg@mail.gmail.com>
Message-ID: <d2be7484-d0b9-8077-a4f7-093a97e6383e@gmail.com>

On 03/08/2016 10:26 PM, Bob Rudis wrote:
> I came across https://cran.rstudio.com/web/packages/boxoffice/index.html
> in CRAN today and while I don't expect CRAN to be a legal authority,
> should there not be some kind of policy for excluding R packages that
> deliberately violate (data) site ToS? (I'm asking this here vs sending
> a note to CRAN folks since I tend to be a bit sensitive to this
> particular issue).
>
> Box Office Mojo - which is really just Amazon - clearly states that
> the activities this package facilitates are in violation of their ToS.
> Unlike examples on blogs that also violate BOM ToS, this pkg in CRAN
> is almost legitimizing the violations.
>
> Amazon only goes after a few folks a year and it's unlikely R folks
> will be their target (for now) but that doesn't make it OK IMO.
>
> Is this worth bringing up to CRAN?

I'd say the place to start is the package maintainer.  The maintainer 
has certified that the package satisfies the policy "The code and 
examples provided in a package should never do anything which might be 
regarded as malicious or anti-social.".

Duncan Murdoch


From ligges at statistik.tu-dortmund.de  Thu Aug  4 12:36:33 2016
From: ligges at statistik.tu-dortmund.de (Uwe Ligges)
Date: Thu, 4 Aug 2016 12:36:33 +0200
Subject: [R-pkg-devel] Pkgs with ToS violations
In-Reply-To: <B8CC51F2-0562-4B9F-8191-732826A081B4@gmail.com>
References: <CAA-FpKXv-j-go-7H6uE1SzqdVX-VZkF2grcXgX56yYm_Ci62Zg@mail.gmail.com>
	<22434.46246.705364.716159@max.nulle.part>
	<B8CC51F2-0562-4B9F-8191-732826A081B4@gmail.com>
Message-ID: <6ef1f665-43e6-4c3b-2595-1c9557f88420@statistik.tu-dortmund.de>

CRAN will follow up with the package maintainer.

Best,
Uwe Ligges


On 04.08.2016 10:50, peter dalgaard wrote:
>
> On 04 Aug 2016, at 05:21 , Dirk Eddelbuettel <edd at debian.org> wrote:
>
>>
>> On 3 August 2016 at 22:26, Bob Rudis wrote:
>> | I came across https://cran.rstudio.com/web/packages/boxoffice/index.html
>> | in CRAN today and while I don't expect CRAN to be a legal authority,
>> | should there not be some kind of policy for excluding R packages that
>> | deliberately violate (data) site ToS? (I'm asking this here vs sending
>> | a note to CRAN folks since I tend to be a bit sensitive to this
>> | particular issue).
>> |
>> | Box Office Mojo - which is really just Amazon - clearly states that
>> | the activities this package facilitates are in violation of their ToS.
>> | Unlike examples on blogs that also violate BOM ToS, this pkg in CRAN
>> | is almost legitimizing the violations.
>> |
>> | Amazon only goes after a few folks a year and it's unlikely R folks
>> | will be their target (for now) but that doesn't make it OK IMO.
>> |
>> | Is this worth bringing up to CRAN?
>>
>> I think so.
>>
>
>
> By all means bring it up. But there's the usual tools-vs-action discussion, and I do notice that the ToS has
>
> ? Licensing IMDb's Content; Consent to Use Robots and Crawlers: If you are interested in receiving our express written permission to use our content for your non-personal (including commercial) use, please contact our Licensing Department. We do allow the limited use of robots and crawlers, such as those from certain search engines, with our express written consent.
>
> I.e., it could be a matter of suitable flagging of the software as requiring permission. You likely don't wnat CRAN to run automated tests that run scrapers, though.
>
> -pd
>
>
>> Dirk
>>
>> --
>> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>>
>> ______________________________________________
>> R-package-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>


From murdoch.duncan at gmail.com  Thu Aug  4 12:47:19 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Thu, 4 Aug 2016 06:47:19 -0400
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies?
In-Reply-To: <22434.38714.302662.351680@max.nulle.part>
References: <CAOC91MT70-1cwv=bKNBuU85bcGvZS3jjEJTf55YBB=O66xPPYg@mail.gmail.com>
	<CAPPM_gSFwvrF9XZ+7q0YPSmZnh12p2yzkfJUccpugPS9zXt37g@mail.gmail.com>
	<22432.53720.657653.204852@max.nulle.part>
	<79d975aa-d69c-f919-c9b6-0a4a77f18ad0@gmail.com>
	<22432.56166.592987.654553@max.nulle.part>
	<b585d232-1fcf-de3b-a00c-cb19f3ae2ad8@gmail.com>
	<22433.114.172309.681071@max.nulle.part>
	<41d5da4d-3430-a0d7-8a56-d5343ffdee52@gmail.com>
	<22433.8161.749443.565578@max.nulle.part>
	<150d50f3-8e37-7799-3f9f-e60d5cbba952@gmail.com>
	<22433.57996.144409.881996@max.nulle.part>
	<2db7e05f-b24f-f71c-4718-d71bf1067370@statistik.tu-dortmund.de>
	<22433.64598.185995.920118@max.nulle.part>
	<589fad90-d896-f407-c795-64b32775ba7f@statistik.tu-dortmund.de>
	<22434.2848.510307.630246@max.nulle.part>
	<2c64a251-f2a4-7f1f-823d-da57fd011636@gmail.com>
	<22434.12766.316014.647624@max.nulle.part>
	<d72cfe51-28be-9488-5b47-73cdfcbf1fa7@gmail.com>
	<22434.38714.302662.351680@max.nulle.part>
Message-ID: <6f2e3a44-703b-5bf8-cfe3-211e5c26d9c5@gmail.com>

On 03/08/2016 9:15 PM, Dirk Eddelbuettel wrote:
>
> On 3 August 2016 at 17:35, Duncan Murdoch wrote:
> | No, you are reading something into my messages that isn't there.  I
> | think I understand your suggestion now (CRAN should test with no
> | Suggested packages present, not with all of them present).  That is less
> | work than they currently do.
>
> And have Suggests:'ed package tested conditionally.  Whether their tests
> execute will be in the control of the one running the tests because he can
> make use the optionality provided by Suggests: Either install, or don't.
>
> So it can be the same tests as now.  But better. Because "choice".
>
> | I disagree with your suggestion for two reasons.
> |
> | 1. I think it would lead to less effective testing.
>
> Nope. See above.
>
> | 2. It would be disruptive during the transition.
>
> How to get from here to there is left as an exercise to the reader.
>
> The mostly-wasteful discussion has left me less than motivated to work on
> this as there is just so much misunderstanding and blockage.  We could work
> all this out during a hackathon day.  Over email, alas, things don't seem to
> work too well.
>

Okay, I'll drop out now too.

Duncan Murdoch


From b.rowlingson at lancaster.ac.uk  Thu Aug  4 13:38:48 2016
From: b.rowlingson at lancaster.ac.uk (Barry Rowlingson)
Date: Thu, 4 Aug 2016 12:38:48 +0100
Subject: [R-pkg-devel] Pkgs with ToS violations
In-Reply-To: <d2be7484-d0b9-8077-a4f7-093a97e6383e@gmail.com>
References: <CAA-FpKXv-j-go-7H6uE1SzqdVX-VZkF2grcXgX56yYm_Ci62Zg@mail.gmail.com>
	<d2be7484-d0b9-8077-a4f7-093a97e6383e@gmail.com>
Message-ID: <CANVKczNF-OJq1W_nj0cUp3bL+VfqGh8zHxWtzQKGpZwRo=xOAw@mail.gmail.com>

ROpenSci's onboarding process has a checkbox for confirming that the
package "does not violate the Terms of Service of any service it
interacts with.":

https://github.com/ropensci/onboarding/blob/master/issue_template.md

I also have a vague memory of this discussion a few years ago on
R-help/-dev where TPTB on CRAN decided that they were just providing
hammers, and if people wanted to break into houses with them then that
wasn't their problem (I'm paraphrasing and vague on the details...).
Can't find that thread right now.




On Thu, Aug 4, 2016 at 11:23 AM, Duncan Murdoch
<murdoch.duncan at gmail.com> wrote:
> On 03/08/2016 10:26 PM, Bob Rudis wrote:
>>
>> I came across https://cran.rstudio.com/web/packages/boxoffice/index.html
>> in CRAN today and while I don't expect CRAN to be a legal authority,
>> should there not be some kind of policy for excluding R packages that
>> deliberately violate (data) site ToS? (I'm asking this here vs sending
>> a note to CRAN folks since I tend to be a bit sensitive to this
>> particular issue).
>>
>> Box Office Mojo - which is really just Amazon - clearly states that
>> the activities this package facilitates are in violation of their ToS.
>> Unlike examples on blogs that also violate BOM ToS, this pkg in CRAN
>> is almost legitimizing the violations.
>>
>> Amazon only goes after a few folks a year and it's unlikely R folks
>> will be their target (for now) but that doesn't make it OK IMO.
>>
>> Is this worth bringing up to CRAN?
>
>
> I'd say the place to start is the package maintainer.  The maintainer has
> certified that the package satisfies the policy "The code and examples
> provided in a package should never do anything which might be regarded as
> malicious or anti-social.".
>
> Duncan Murdoch
>
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From bob at rud.is  Thu Aug  4 14:28:24 2016
From: bob at rud.is (Bob Rudis)
Date: Thu, 4 Aug 2016 08:28:24 -0400
Subject: [R-pkg-devel] Pkgs with ToS violations
In-Reply-To: <6ef1f665-43e6-4c3b-2595-1c9557f88420@statistik.tu-dortmund.de>
References: <CAA-FpKXv-j-go-7H6uE1SzqdVX-VZkF2grcXgX56yYm_Ci62Zg@mail.gmail.com>
	<22434.46246.705364.716159@max.nulle.part>
	<B8CC51F2-0562-4B9F-8191-732826A081B4@gmail.com>
	<6ef1f665-43e6-4c3b-2595-1c9557f88420@statistik.tu-dortmund.de>
Message-ID: <CAA-FpKWe0byb6A7A0ZS2ACrRzCGR9XaoaAis09HGA-z3JFXNLA@mail.gmail.com>

Thx folks. I didn't mean to cause a stir :-)

I've had colleagues receive cease & desists (and worse) before and
it's been my experience that a large # of folks have no idea these
type of cite restrictions exist.

-Bob

On Thu, Aug 4, 2016 at 6:36 AM, Uwe Ligges
<ligges at statistik.tu-dortmund.de> wrote:
> CRAN will follow up with the package maintainer.
>
> Best,
> Uwe Ligges
>
>
>
> On 04.08.2016 10:50, peter dalgaard wrote:
>>
>>
>> On 04 Aug 2016, at 05:21 , Dirk Eddelbuettel <edd at debian.org> wrote:
>>
>>>
>>> On 3 August 2016 at 22:26, Bob Rudis wrote:
>>> | I came across
>>> https://cran.rstudio.com/web/packages/boxoffice/index.html
>>> | in CRAN today and while I don't expect CRAN to be a legal authority,
>>> | should there not be some kind of policy for excluding R packages that
>>> | deliberately violate (data) site ToS? (I'm asking this here vs sending
>>> | a note to CRAN folks since I tend to be a bit sensitive to this
>>> | particular issue).
>>> |
>>> | Box Office Mojo - which is really just Amazon - clearly states that
>>> | the activities this package facilitates are in violation of their ToS.
>>> | Unlike examples on blogs that also violate BOM ToS, this pkg in CRAN
>>> | is almost legitimizing the violations.
>>> |
>>> | Amazon only goes after a few folks a year and it's unlikely R folks
>>> | will be their target (for now) but that doesn't make it OK IMO.
>>> |
>>> | Is this worth bringing up to CRAN?
>>>
>>> I think so.
>>>
>>
>>
>> By all means bring it up. But there's the usual tools-vs-action
>> discussion, and I do notice that the ToS has
>>
>> ? Licensing IMDb's Content; Consent to Use Robots and Crawlers: If you are
>> interested in receiving our express written permission to use our content
>> for your non-personal (including commercial) use, please contact our
>> Licensing Department. We do allow the limited use of robots and crawlers,
>> such as those from certain search engines, with our express written consent.
>>
>> I.e., it could be a matter of suitable flagging of the software as
>> requiring permission. You likely don't wnat CRAN to run automated tests that
>> run scrapers, though.
>>
>> -pd
>>
>>
>>> Dirk
>>>
>>> --
>>> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>>>
>>> ______________________________________________
>>> R-package-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>>
>>
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From pgilbert902 at gmail.com  Thu Aug  4 17:46:44 2016
From: pgilbert902 at gmail.com (Paul Gilbert)
Date: Thu, 4 Aug 2016 11:46:44 -0400
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies? - Part 2
Message-ID: <7b4d6a50-7df0-8d1a-75f2-c2be8222de68@gmail.com>

(One question from the thread Handling Not-Always-Needed Dependencies?)

I hope not to start another long tangled thread, but I have a basic 
confusion which I think has a yes/no answer and I would like to know if 
there is agreement on this point (or is it only me that is confused as 
usual).

If my package has a test that needs another package, but that package is 
not needed in the /R code of my package, then I indicate it as 
"Suggests", not as "Depends" nor as "Imports".  If that package is not 
available when I run R CMD check, should the test pass?

Yes or no:  ?

(I realize my own answer might be different if the package was used in 
an example or demo in place of a test, but that is just the confusion 
caused by too many uses for Suggests. In the case of a test, my own 
thought is that the test must fail, so my own answer is no. If the test 
does not fail then there is no real testing being done, thus missing 
code coverage in the testing. If the answer is no, then the tests do not 
need to be run if the package is not available, because it is known that 
they must fail. I think that not bothering to run the tests because the 
result is known is even more efficient than other suggestions. I also 
think it is the status quo.)

Hoping my confusion is cleared up, and this does not become another long 
tangled thread,
Paul


From edd at debian.org  Thu Aug  4 17:51:35 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Thu, 4 Aug 2016 10:51:35 -0500
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies? - Part 2
In-Reply-To: <7b4d6a50-7df0-8d1a-75f2-c2be8222de68@gmail.com>
References: <7b4d6a50-7df0-8d1a-75f2-c2be8222de68@gmail.com>
Message-ID: <22435.25735.881096.176575@max.nulle.part>


On 4 August 2016 at 11:46, Paul Gilbert wrote:
| If my package has a test that needs another package, but that package is 
| not needed in the /R code of my package, then I indicate it as 
| "Suggests", not as "Depends" nor as "Imports".  If that package is not 
| available when I run R CMD check, should the test pass?

Wrong question.

Better question:  Should the test be running?  My preference is for only
inside of a requireNamespace() (or equivalent) block as the package is not
guaranteed to be present.  In theory.

In practice people seem to unconditionally install it anyway, and think that
is a good idea.  I disagree on both counts but remain in the vocal minority.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From ligges at statistik.tu-dortmund.de  Thu Aug  4 17:55:31 2016
From: ligges at statistik.tu-dortmund.de (Uwe Ligges)
Date: Thu, 4 Aug 2016 17:55:31 +0200
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies? - Part 2
In-Reply-To: <7b4d6a50-7df0-8d1a-75f2-c2be8222de68@gmail.com>
References: <7b4d6a50-7df0-8d1a-75f2-c2be8222de68@gmail.com>
Message-ID: <4d817f2c-bccb-57f4-b980-d830c39394d5@statistik.tu-dortmund.de>



On 04.08.2016 17:46, Paul Gilbert wrote:
> (One question from the thread Handling Not-Always-Needed Dependencies?)
>
> I hope not to start another long tangled thread, but I have a basic
> confusion which I think has a yes/no answer and I would like to know if
> there is agreement on this point (or is it only me that is confused as
> usual).
>
> If my package has a test that needs another package, but that package is
> not needed in the /R code of my package, then I indicate it as
> "Suggests", not as "Depends" nor as "Imports".  If that package is not
> available when I run R CMD check, should the test pass?
>
> Yes or no:  ?

Yes, as the package should pass the checks if suggested packages are 
unavailable.
BUT if these are available and the code is wrong, then it should 
generate an error.

Best,
Uwe



>
> (I realize my own answer might be different if the package was used in
> an example or demo in place of a test, but that is just the confusion
> caused by too many uses for Suggests. In the case of a test, my own
> thought is that the test must fail, so my own answer is no. If the test
> does not fail then there is no real testing being done, thus missing
> code coverage in the testing. If the answer is no, then the tests do not
> need to be run if the package is not available, because it is known that
> they must fail. I think that not bothering to run the tests because the
> result is known is even more efficient than other suggestions. I also
> think it is the status quo.)
>
> Hoping my confusion is cleared up, and this does not become another long
> tangled thread,
> Paul
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From murdoch.duncan at gmail.com  Thu Aug  4 18:48:17 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Thu, 4 Aug 2016 12:48:17 -0400
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies? - Part 2
In-Reply-To: <7b4d6a50-7df0-8d1a-75f2-c2be8222de68@gmail.com>
References: <7b4d6a50-7df0-8d1a-75f2-c2be8222de68@gmail.com>
Message-ID: <5e698b95-744b-dfd7-217e-35fa558c7b2d@gmail.com>

On 04/08/2016 11:46 AM, Paul Gilbert wrote:
> (One question from the thread Handling Not-Always-Needed Dependencies?)
>
> I hope not to start another long tangled thread, but I have a basic
> confusion which I think has a yes/no answer and I would like to know if
> there is agreement on this point (or is it only me that is confused as
> usual).
>
> If my package has a test that needs another package, but that package is
> not needed in the /R code of my package, then I indicate it as
> "Suggests", not as "Depends" nor as "Imports".  If that package is not
> available when I run R CMD check, should the test pass?
>
> Yes or no:  ?
>
> (I realize my own answer might be different if the package was used in
> an example or demo in place of a test, but that is just the confusion
> caused by too many uses for Suggests. In the case of a test, my own
> thought is that the test must fail, so my own answer is no. If the test
> does not fail then there is no real testing being done, thus missing
> code coverage in the testing. If the answer is no, then the tests do not
> need to be run if the package is not available, because it is known that
> they must fail. I think that not bothering to run the tests because the
> result is known is even more efficient than other suggestions. I also
> think it is the status quo.)
>
> Hoping my confusion is cleared up, and this does not become another long
> tangled thread,

I'd say it's up to you as the author of the test.  Would skipping that 
test mean that your package was not adequately tested?  If so, then you 
should get an error if it isn't available, because otherwise people will 
think they've done adequate testing when they haven't.  One way this 
could happen if a major function of your package is being tested on a 
sample  dataset from a Suggested package.  Users of your package don't 
need the other one, but testers do.

Duncan Murdoch


From bill at denney.ws  Thu Aug  4 18:55:16 2016
From: bill at denney.ws (Bill Denney)
Date: Thu, 4 Aug 2016 12:55:16 -0400
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies? - Part 2
In-Reply-To: <22435.25735.881096.176575@max.nulle.part>
References: <7b4d6a50-7df0-8d1a-75f2-c2be8222de68@gmail.com>
	<22435.25735.881096.176575@max.nulle.part>
Message-ID: <4d2c3629-1906-e504-e29b-a6beca5c5e13@denney.ws>

On 8/4/2016 11:51 AM, Dirk Eddelbuettel wrote:
> On 4 August 2016 at 11:46, Paul Gilbert wrote:
> | If my package has a test that needs another package, but that package is
> | not needed in the /R code of my package, then I indicate it as
> | "Suggests", not as "Depends" nor as "Imports".  If that package is not
> | available when I run R CMD check, should the test pass?
>
> Wrong question.
>
> Better question:  Should the test be running?  My preference is for only
> inside of a requireNamespace() (or equivalent) block as the package is not
> guaranteed to be present.  In theory.
>
> In practice people seem to unconditionally install it anyway, and think that
> is a good idea.  I disagree on both counts but remain in the vocal minority.
As another package maintainer, I had almost the identical question 
reading the previous (long) thread, but the three answers here don't 
give the same answer.  My question I can make even more concrete:

I use the testthat package for my testing.  I never use it in the R code 
itself, and it is explicitly only used for testing.  Should that be 
included as "Depends" because every test requires it or "Suggests" 
because no end user ever needs it?

If "Depends", then it leads to over-installation of the package by end 
users who don't care about running tests locally.  If "Suggests", then 
all of the tests would fail (assuming that Dirk's suggestion is 
implemented).

At a loss,

Bill


From csardi.gabor at gmail.com  Thu Aug  4 18:56:22 2016
From: csardi.gabor at gmail.com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Thu, 4 Aug 2016 17:56:22 +0100
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies? - Part 2
In-Reply-To: <5e698b95-744b-dfd7-217e-35fa558c7b2d@gmail.com>
References: <7b4d6a50-7df0-8d1a-75f2-c2be8222de68@gmail.com>
	<5e698b95-744b-dfd7-217e-35fa558c7b2d@gmail.com>
Message-ID: <CABtg=Kn2S344dW2gzeLmxbsbi0vjJ+r7z1qmcKkVryN7WYQXtQ@mail.gmail.com>

On Thu, Aug 4, 2016 at 5:48 PM, Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
[...]
> I'd say it's up to you as the author of the test.  Would skipping that test
> mean that your package was not adequately tested?  If so, then you should
> get an error if it isn't available, because otherwise people will think
> they've done adequate testing when they haven't.  One way this could happen
> if a major function of your package is being tested on a sample  dataset
> from a Suggested package.  Users of your package don't need the other one,
> but testers do.

Indeed. IMO this was anything but a yes/no question. :)

Personally I would love to be able to have BuildImports and
TestImports. The former for build time dependencies, the latter for
dependencies when running the tests.

But I understand that the current system is complicated enough.

Gabor

> Duncan Murdoch
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From ligges at statistik.tu-dortmund.de  Thu Aug  4 19:10:08 2016
From: ligges at statistik.tu-dortmund.de (Uwe Ligges)
Date: Thu, 4 Aug 2016 19:10:08 +0200
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies? - Part 2
In-Reply-To: <4d2c3629-1906-e504-e29b-a6beca5c5e13@denney.ws>
References: <7b4d6a50-7df0-8d1a-75f2-c2be8222de68@gmail.com>
	<22435.25735.881096.176575@max.nulle.part>
	<4d2c3629-1906-e504-e29b-a6beca5c5e13@denney.ws>
Message-ID: <b56ee043-0568-cd31-e665-b42271d762c2@statistik.tu-dortmund.de>



On 04.08.2016 18:55, Bill Denney wrote:
> On 8/4/2016 11:51 AM, Dirk Eddelbuettel wrote:
>> On 4 August 2016 at 11:46, Paul Gilbert wrote:
>> | If my package has a test that needs another package, but that
>> package is
>> | not needed in the /R code of my package, then I indicate it as
>> | "Suggests", not as "Depends" nor as "Imports".  If that package is not
>> | available when I run R CMD check, should the test pass?
>>
>> Wrong question.
>>
>> Better question:  Should the test be running?  My preference is for only
>> inside of a requireNamespace() (or equivalent) block as the package is
>> not
>> guaranteed to be present.  In theory.
>>
>> In practice people seem to unconditionally install it anyway, and
>> think that
>> is a good idea.  I disagree on both counts but remain in the vocal
>> minority.
> As another package maintainer, I had almost the identical question
> reading the previous (long) thread, but the three answers here don't
> give the same answer.  My question I can make even more concrete:
>
> I use the testthat package for my testing.  I never use it in the R code
> itself, and it is explicitly only used for testing.  Should that be
> included as "Depends" because every test requires it or "Suggests"
> because no end user ever needs it?
>
> If "Depends", then it leads to over-installation of the package by end
> users who don't care about running tests locally.  If "Suggests", then
> all of the tests would fail (assuming that Dirk's suggestion is
> implemented).

Suggests.

Best,
Uwe Ligges


>
> At a loss,
>
> Bill
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From murdoch.duncan at gmail.com  Thu Aug  4 19:18:53 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Thu, 4 Aug 2016 13:18:53 -0400
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies? - Part 2
In-Reply-To: <4d2c3629-1906-e504-e29b-a6beca5c5e13@denney.ws>
References: <7b4d6a50-7df0-8d1a-75f2-c2be8222de68@gmail.com>
	<22435.25735.881096.176575@max.nulle.part>
	<4d2c3629-1906-e504-e29b-a6beca5c5e13@denney.ws>
Message-ID: <59ec85f5-6ec1-54f0-4f79-8b14eefb5330@gmail.com>

On 04/08/2016 12:55 PM, Bill Denney wrote:
> On 8/4/2016 11:51 AM, Dirk Eddelbuettel wrote:
>> On 4 August 2016 at 11:46, Paul Gilbert wrote:
>> | If my package has a test that needs another package, but that package is
>> | not needed in the /R code of my package, then I indicate it as
>> | "Suggests", not as "Depends" nor as "Imports".  If that package is not
>> | available when I run R CMD check, should the test pass?
>>
>> Wrong question.
>>
>> Better question:  Should the test be running?  My preference is for only
>> inside of a requireNamespace() (or equivalent) block as the package is not
>> guaranteed to be present.  In theory.
>>
>> In practice people seem to unconditionally install it anyway, and think that
>> is a good idea.  I disagree on both counts but remain in the vocal minority.
> As another package maintainer, I had almost the identical question
> reading the previous (long) thread, but the three answers here don't
> give the same answer.  My question I can make even more concrete:
>
> I use the testthat package for my testing.  I never use it in the R code
> itself, and it is explicitly only used for testing.  Should that be
> included as "Depends" because every test requires it or "Suggests"
> because no end user ever needs it?
>
> If "Depends", then it leads to over-installation of the package by end
> users who don't care about running tests locally.  If "Suggests", then
> all of the tests would fail (assuming that Dirk's suggestion is
> implemented).

I'd say you should use Suggests, and test for its presence at the start 
of your test scripts, e.g.

if (!require("testthat"))
     stop("These tests need testthat")

or

if (!requireNamespace("testthat"))
     stop("these tests need testthat")

(The latter means you'd need to prefix all testthat functions with 
"testthat::", but it has the advantage that their names don't conflict 
with yours.)

Or perhaps you don't want to give an error, you just want to skip some 
of your tests.  It's your decision.

Duncan Murdoch


From pgilbert902 at gmail.com  Thu Aug  4 19:57:26 2016
From: pgilbert902 at gmail.com (Paul Gilbert)
Date: Thu, 4 Aug 2016 13:57:26 -0400
Subject: [R-pkg-devel] Handling Not-Always-Needed Dependencies? - Part 2
In-Reply-To: <22435.25735.881096.176575@max.nulle.part>
References: <7b4d6a50-7df0-8d1a-75f2-c2be8222de68@gmail.com>
	<22435.25735.881096.176575@max.nulle.part>
Message-ID: <87a4db5a-8d45-c652-ef7f-1c0b53294374@gmail.com>



On 08/04/2016 11:51 AM, Dirk Eddelbuettel wrote:
>
> On 4 August 2016 at 11:46, Paul Gilbert wrote:
> | If my package has a test that needs another package, but that package is
> | not needed in the /R code of my package, then I indicate it as
> | "Suggests", not as "Depends" nor as "Imports".  If that package is not
> | available when I run R CMD check, should the test pass?
>
> Wrong question.
>
> Better question:  Should the test be running?  My preference is for only
> inside of a requireNamespace() (or equivalent) block as the package is not
> guaranteed to be present.  In theory.

At the level of R CMD check throwing an error or not, I think this is 
arguing that it should be possible to pass the tests (not throw an 
error) even though they are not run, isn't it? (So your answer to my 
question is yes, at least the way I was thinking of the question.) Or do 
you mean you would just like the tests to fail with a more appropriate 
error message? Or do you mean, as Duncan suggests, that the person 
writing the test should be allowed to code in something to decide if the 
test is really important or not?

>
> In practice people seem to unconditionally install it anyway, and think that
> is a good idea.  I disagree on both counts but remain in the vocal minority.

Actually, I think you are in agreement with Uwe and Duncan on this 
point, Duncan having added the refinement that the test writer gets to 
decide. No one so far seems to be advocating for my position that the 
tests should necessarily fail if they cannot be run. So I guess I am the 
one in the minority.

Paul
>
> Dirk
>


From cdetermanjr at gmail.com  Wed Aug 10 15:39:50 2016
From: cdetermanjr at gmail.com (Charles Determan)
Date: Wed, 10 Aug 2016 08:39:50 -0500
Subject: [R-pkg-devel] Would CRAN accept a package that requires cmake?
Message-ID: <CAKxd1KMg454Ly6bW1MBXy9pyrDXD-cJQMNbxJqm7u+pTscNNAA@mail.gmail.com>

Greetings,

I have seen this previous discussion (
https://stat.ethz.ch/pipermail/r-package-devel/2015q2/000115.html) on this
question but I didn't find a clear answer.  I am looking at integrating
some more existing open-source C++ libraries to R packages.  However, a
handful use/require cmake for compilation.  I believe this is possible to
do using the configure(.win) files but I want to make sure this would be
acceptable to CRAN.

Thanks,
Charles

	[[alternative HTML version deleted]]


From edd at debian.org  Wed Aug 10 16:05:40 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Wed, 10 Aug 2016 09:05:40 -0500
Subject: [R-pkg-devel] Would CRAN accept a package that requires cmake?
In-Reply-To: <CAKxd1KMg454Ly6bW1MBXy9pyrDXD-cJQMNbxJqm7u+pTscNNAA@mail.gmail.com>
References: <CAKxd1KMg454Ly6bW1MBXy9pyrDXD-cJQMNbxJqm7u+pTscNNAA@mail.gmail.com>
Message-ID: <22443.13492.136062.701810@max.nulle.part>


On 10 August 2016 at 08:39, Charles Determan wrote:
| I have seen this previous discussion (
| https://stat.ethz.ch/pipermail/r-package-devel/2015q2/000115.html) on this
| question but I didn't find a clear answer.  I am looking at integrating
| some more existing open-source C++ libraries to R packages.  However, a
| handful use/require cmake for compilation.  I believe this is possible to
| do using the configure(.win) files but I want to make sure this would be
| acceptable to CRAN.

<chorus singing>
  Only CRAN can answer CRAN questions.
</chorus singing>

With the above caveat, I'd say yes -- but do mark it clearly in
SystemRequirements: which is the field for this very purpose.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From rubak at math.aau.dk  Wed Aug 10 16:20:09 2016
From: rubak at math.aau.dk (Ege Rubak)
Date: Wed, 10 Aug 2016 16:20:09 +0200
Subject: [R-pkg-devel] Would CRAN accept a package that requires cmake?
In-Reply-To: <22443.13492.136062.701810@max.nulle.part>
References: <CAKxd1KMg454Ly6bW1MBXy9pyrDXD-cJQMNbxJqm7u+pTscNNAA@mail.gmail.com>
	<22443.13492.136062.701810@max.nulle.part>
Message-ID: <0a171e4f-f621-6af6-b469-52237483a3a0@math.aau.dk>



On 08/10/2016 04:05 PM, Dirk Eddelbuettel wrote:
>
> On 10 August 2016 at 08:39, Charles Determan wrote:
> | I have seen this previous discussion (
> | https://stat.ethz.ch/pipermail/r-package-devel/2015q2/000115.html) on this
> | question but I didn't find a clear answer.  I am looking at integrating
> | some more existing open-source C++ libraries to R packages.  However, a
> | handful use/require cmake for compilation.  I believe this is possible to
> | do using the configure(.win) files but I want to make sure this would be
> | acceptable to CRAN.
>
> <chorus singing>
>   Only CRAN can answer CRAN questions.
> </chorus singing>
>
> With the above caveat, I'd say yes -- but do mark it clearly in
> SystemRequirements: which is the field for this very purpose.
>
> Dirk
>

Judging from this email from Uwe Ligges, CRAN is indeed open to using 
cmake to compile a package:
https://stat.ethz.ch/pipermail/r-package-devel/2016q2/000903.html
Appears you have to ask him to install the relevant version though.
Good luck!
Ege


From bob at rud.is  Wed Aug 10 15:51:51 2016
From: bob at rud.is (Bob Rudis)
Date: Wed, 10 Aug 2016 08:51:51 -0500
Subject: [R-pkg-devel] Would CRAN accept a package that requires cmake?
In-Reply-To: <CAKxd1KMg454Ly6bW1MBXy9pyrDXD-cJQMNbxJqm7u+pTscNNAA@mail.gmail.com>
References: <CAKxd1KMg454Ly6bW1MBXy9pyrDXD-cJQMNbxJqm7u+pTscNNAA@mail.gmail.com>
Message-ID: <CAA-FpKV3DQQ-Wpm53vMN2DKYSA3upibjFh-+FuPPCFDM8AN3JQ@mail.gmail.com>

qtbase - https://cran.rstudio.com/web/packages/qtbase/index.html - is
just one (quickly found) example of pkgs using cmake.

the installr pkg will enable folks to install cmake on windows pretty
easily, as well.

On Wed, Aug 10, 2016 at 8:39 AM, Charles Determan <cdetermanjr at gmail.com> wrote:
> Greetings,
>
> I have seen this previous discussion (
> https://stat.ethz.ch/pipermail/r-package-devel/2015q2/000115.html) on this
> question but I didn't find a clear answer.  I am looking at integrating
> some more existing open-source C++ libraries to R packages.  However, a
> handful use/require cmake for compilation.  I believe this is possible to
> do using the configure(.win) files but I want to make sure this would be
> acceptable to CRAN.
>
> Thanks,
> Charles
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From alexandre.courtiol at gmail.com  Wed Aug 10 16:34:13 2016
From: alexandre.courtiol at gmail.com (Alexandre Courtiol)
Date: Wed, 10 Aug 2016 16:34:13 +0200
Subject: [R-pkg-devel] Selective/Partial LazyData?
Message-ID: <CAERMt4djVdBimujmuXL4iBXxtaS6_Kz7-Ak5F3VZAoZZffHn=g@mail.gmail.com>

Dear all,
I am preparing a package and using "LazyData: true" in DESCRIPTION makes
things a little more smooth as I have function calling my own data. My
problem is that doing so seem to uncompress the data at installation and
convert them into a Rdata.rdb that is > 1MB, which makes R CMD check, which
them threw a note. Adding "LazyDataCompression: xz" did help a bit, but I
am still far off the 1MB limit (9MB). Since I would rather keep both the
data and the LazyData, I wonder:
- if CRAN would only care about the size of the data within the tarball
(there, all is fine).
- if there is a way not to lazyload _all_ data objects, but only some of
them as I do not need the biggest file to be lazyloaded, just some small
ones.
Sorry if I failed to spot the relevant section in the R manuals... I did
look for it.
Alex

-- 
Alexandre Courtiol

http://sites.google.com/site/alexandrecourtiol/home

*"Science is the belief in the ignorance of experts"*, R. Feynman

	[[alternative HTML version deleted]]


From cbogart at andrew.cmu.edu  Wed Aug 10 23:33:47 2016
From: cbogart at andrew.cmu.edu (Chris Bogart)
Date: Wed, 10 Aug 2016 17:33:47 -0400
Subject: [R-pkg-devel] Looking for info on how CRAN package developers
 handle breaking changes with other packages
Message-ID: <CAEdDQKvOPi0Ni7oVgpL7vQNsWqncOXb66m9WFeyi0qyHX0hkpA@mail.gmail.com>

Hi, I'm looking for some help from developers who write R packages. My
research group is interested in the choices package managers and
repositories are make when designing their ecosystems. Newer packaging
and modules systems like Node.js/NPM, Google's go language, Python's
PyPI, are making very different design choices from each other, and
they are very different (and probably informed by) older packaging
systems like R's CRAN and Perl's CPAN. We'd like to know what the
impact of those design choices are on how you negotiate breaking
changes among R package developers when the packages depend on each
other. We're also interested in what values you think CRAN's design is
trying to optimize.

Could I ask people to take ~20 minutes of your time and fill out our
survey at http://breakingapis.org/survey? We'll report back to the R
community the results (or there's a sign up link to be notified when
results are out at http://breakingapis.org).

(If you distribute R packages in other ways, like Bioconductor or
devtools/Github; or if you use other ecosystems altogether such as
Node.js/NPM, Python/PyPI, Hackage, or something else, we're still
interested -- just make a different "software ecosystem" choice on the
first page. The study is a comparison among ecosystems; CRAN is one
point of comparison).

Thank you,
Chris Bogart
Institute for Software Research
Carnegie Mellon University
cbogart at cs.cmu.edu


From ironholds at gmail.com  Thu Aug 11 00:15:21 2016
From: ironholds at gmail.com (Oliver Keyes)
Date: Wed, 10 Aug 2016 18:15:21 -0400
Subject: [R-pkg-devel] Accessing R's linked PCRE library from inside a
	package
Message-ID: <CADRwj98rHW_K2R71o0AUeYshowf-v4SGWnFvm19OeXdzMfF=uw@mail.gmail.com>

Hey all,

I'm trying to incorporate PCRE-compliant regular expressions into C
code in an R package.

>From digging around in R's source code, it appears that R (pretty
much?) guarantees the presence of either a system-level PCRE library,
or an R-internal one.[0] Is this exposed (or grabbable) via the R C
API in any way?

Thanks!

Best,
Oliver

https://github.com/wch/r-source/blob/e5b21d0397c607883ff25cca379687b86933d730/src/main/grep.c#L75-L79


From edd at debian.org  Thu Aug 11 01:28:08 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Wed, 10 Aug 2016 18:28:08 -0500
Subject: [R-pkg-devel] Accessing R's linked PCRE library from inside
	a	package
In-Reply-To: <CADRwj98rHW_K2R71o0AUeYshowf-v4SGWnFvm19OeXdzMfF=uw@mail.gmail.com>
References: <CADRwj98rHW_K2R71o0AUeYshowf-v4SGWnFvm19OeXdzMfF=uw@mail.gmail.com>
Message-ID: <22443.47240.693510.337607@max.nulle.part>


On 10 August 2016 at 18:15, Oliver Keyes wrote:
| I'm trying to incorporate PCRE-compliant regular expressions into C
| code in an R package.
| 
| >From digging around in R's source code, it appears that R (pretty
| much?) guarantees the presence of either a system-level PCRE library,
| or an R-internal one.[0] Is this exposed (or grabbable) via the R C
| API in any way?

The key to realize here is that R does indeed provide an environment.  And at
least where I like to work, in get this right off the bat:

    edd at max:/tmp$ grep lpcre /etc/R/*
    /etc/R/Makeconf:LIBS =  -lpcre -llzma -lbz2 -lz -lrt -ldl -lm
    edd at max:/tmp$ 

So pcre plus a bunch of compression libraries (lzma, bz2, z) and more are
essentially "there for the taking". If built as a shared library.

An existence proof is below; it is based on the 2nd Google hit I got for
'libpcre example' and has the advantge of being shorter than the first hit.

I first created baseline. The example, as given and then repaired, gets us:

    edd at max:/tmp$ ./ex_pcre 
     0: From:regular.expressions at example.com
     1: regular.expressions
     2: example.com
     0: From:exddd at 43434.com
     1: exddd
     2: 43434.com
     0: From:7853456 at exgem.com
     1: 7853456
     2: exgem.com
    edd at max:/tmp$ 

Turning that into something callable from R took about another minute. It
looks like this:

-----------------------------------------------------------------------------
// modified (and repaired) example from http://stackoverflow.com/a/1421923/143305
#include "pcre.h"
#include <Rcpp.h>

// [[Rcpp::export()]]
void foo() {
    const char *error;
    int   erroffset;
    pcre *re;
    int   rc;
    int   i;
    int   ovector[100];

    const char *regex = "From:([^@]+)@([^\r]+)";
    char str[]  = "From:regular.expressions at example.com\r\n"\
                  "From:exddd at 43434.com\r\n"\
                  "From:7853456 at exgem.com\r\n";

    re = pcre_compile (regex,          /* the pattern */
                       PCRE_MULTILINE,
                       &error,         /* for error message */
                       &erroffset,     /* for error offset */
                       0);             /* use default character tables */
    if (!re) Rcpp::stop("pcre_compile failed (offset: %d), %s\n", erroffset, error);

    unsigned int offset = 0;
    unsigned int len    = strlen(str);
    while (offset < len && (rc = pcre_exec(re, 0, str, len, offset, 0, ovector, sizeof(ovector))) >= 0) {
        for(int i = 0; i < rc; ++i) {
            Rprintf("%2d: %.*s\n", i, ovector[2*i+1] - ovector[2*i], str + ovector[2*i]);
        }
        offset = ovector[1];
    }
}

/*** R
foo()
*/
-----------------------------------------------------------------------------

and, lo and behold, produces the same output demonstrating that, yes,
Veronica, we do get pcre for free:

    R> library(Rcpp)
    R> sourceCpp("/tmp/oliver.cpp")
    
    R> foo()
     0: From:regular.expressions at example.com
     1: regular.expressions
     2: example.com
     0: From:exddd at 43434.com
     1: exddd
     2: 43434.com
     0: From:7853456 at exgem.com
     1: 7853456
     2: exgem.com
    R> 

Your package will probably want to a litmus test in configure to see if this
really holds on the platform it is currently being built on.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From ironholds at gmail.com  Thu Aug 11 01:35:43 2016
From: ironholds at gmail.com (Oliver Keyes)
Date: Wed, 10 Aug 2016 19:35:43 -0400
Subject: [R-pkg-devel] Accessing R's linked PCRE library from inside a
	package
In-Reply-To: <22443.47240.693510.337607@max.nulle.part>
References: <CADRwj98rHW_K2R71o0AUeYshowf-v4SGWnFvm19OeXdzMfF=uw@mail.gmail.com>
	<22443.47240.693510.337607@max.nulle.part>
Message-ID: <CADRwj9_LSrxckKxRhbsoNZEfsWvCd7Gu5UmtA9udzXYPD=TGsA@mail.gmail.com>

Neat; thanks Dirk! Will be interesting to see if I can get that finnagled
on Windows when I get back to Boston.

Best,
Oliver

On Wednesday, 10 August 2016, Dirk Eddelbuettel <edd at debian.org> wrote:

>
> On 10 August 2016 at 18:15, Oliver Keyes wrote:
> | I'm trying to incorporate PCRE-compliant regular expressions into C
> | code in an R package.
> |
> | >From digging around in R's source code, it appears that R (pretty
> | much?) guarantees the presence of either a system-level PCRE library,
> | or an R-internal one.[0] Is this exposed (or grabbable) via the R C
> | API in any way?
>
> The key to realize here is that R does indeed provide an environment.  And
> at
> least where I like to work, in get this right off the bat:
>
>     edd at max:/tmp$ grep lpcre /etc/R/*
>     /etc/R/Makeconf:LIBS =  -lpcre -llzma -lbz2 -lz -lrt -ldl -lm
>     edd at max:/tmp$
>
> So pcre plus a bunch of compression libraries (lzma, bz2, z) and more are
> essentially "there for the taking". If built as a shared library.
>
> An existence proof is below; it is based on the 2nd Google hit I got for
> 'libpcre example' and has the advantge of being shorter than the first hit.
>
> I first created baseline. The example, as given and then repaired, gets us:
>
>     edd at max:/tmp$ ./ex_pcre
>      0: From:regular.expressions at example.com <javascript:;>
>      1: regular.expressions
>      2: example.com
>      0: From:exddd at 43434.com <javascript:;>
>      1: exddd
>      2: 43434.com
>      0: From:7853456 at exgem.com <javascript:;>
>      1: 7853456
>      2: exgem.com
>     edd at max:/tmp$
>
> Turning that into something callable from R took about another minute. It
> looks like this:
>
> ------------------------------------------------------------
> -----------------
> // modified (and repaired) example from http://stackoverflow.com/a/
> 1421923/143305
> #include "pcre.h"
> #include <Rcpp.h>
>
> // [[Rcpp::export()]]
> void foo() {
>     const char *error;
>     int   erroffset;
>     pcre *re;
>     int   rc;
>     int   i;
>     int   ovector[100];
>
>     const char *regex = "From:([^@]+)@([^\r]+)";
>     char str[]  = "From:regular.expressions at example.com <javascript:;>
> \r\n"\
>                   "From:exddd at 43434.com <javascript:;>\r\n"\
>                   "From:7853456 at exgem.com <javascript:;>\r\n";
>
>     re = pcre_compile (regex,          /* the pattern */
>                        PCRE_MULTILINE,
>                        &error,         /* for error message */
>                        &erroffset,     /* for error offset */
>                        0);             /* use default character tables */
>     if (!re) Rcpp::stop("pcre_compile failed (offset: %d), %s\n",
> erroffset, error);
>
>     unsigned int offset = 0;
>     unsigned int len    = strlen(str);
>     while (offset < len && (rc = pcre_exec(re, 0, str, len, offset, 0,
> ovector, sizeof(ovector))) >= 0) {
>         for(int i = 0; i < rc; ++i) {
>             Rprintf("%2d: %.*s\n", i, ovector[2*i+1] - ovector[2*i], str +
> ovector[2*i]);
>         }
>         offset = ovector[1];
>     }
> }
>
> /*** R
> foo()
> */
> ------------------------------------------------------------
> -----------------
>
> and, lo and behold, produces the same output demonstrating that, yes,
> Veronica, we do get pcre for free:
>
>     R> library(Rcpp)
>     R> sourceCpp("/tmp/oliver.cpp")
>
>     R> foo()
>      0: From:regular.expressions at example.com <javascript:;>
>      1: regular.expressions
>      2: example.com
>      0: From:exddd at 43434.com <javascript:;>
>      1: exddd
>      2: 43434.com
>      0: From:7853456 at exgem.com <javascript:;>
>      1: 7853456
>      2: exgem.com
>     R>
>
> Your package will probably want to a litmus test in configure to see if
> this
> really holds on the platform it is currently being built on.
>
> Dirk
>
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
> <javascript:;>
>
>

	[[alternative HTML version deleted]]


From edd at debian.org  Thu Aug 11 01:51:35 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Wed, 10 Aug 2016 18:51:35 -0500
Subject: [R-pkg-devel] Accessing R's linked PCRE library from inside a
	package
In-Reply-To: <CADRwj9_LSrxckKxRhbsoNZEfsWvCd7Gu5UmtA9udzXYPD=TGsA@mail.gmail.com>
References: <CADRwj98rHW_K2R71o0AUeYshowf-v4SGWnFvm19OeXdzMfF=uw@mail.gmail.com>
	<22443.47240.693510.337607@max.nulle.part>
	<CADRwj9_LSrxckKxRhbsoNZEfsWvCd7Gu5UmtA9udzXYPD=TGsA@mail.gmail.com>
Message-ID: <22443.48647.700080.43985@max.nulle.part>


On 10 August 2016 at 19:35, Oliver Keyes wrote:
| Neat; thanks Dirk! Will be interesting to see if I can get that finnagled on
| Windows when I get back to Boston.

Come to think about it, there is a bit of good fortune in my use as I

 - don't need to bother with include flags as pcre as a 'system library'
   so header are found
   
 - don't need to worry about version skew as there is only one pcre version
   on the system, and the header and library match

which will not generally be true in other, less developer-friendly environs.
But hey, that's your problem and not mine :)  

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From mcf2000 at gmail.com  Thu Aug 11 03:42:27 2016
From: mcf2000 at gmail.com (Marcelo Carvalho Fernandes)
Date: Wed, 10 Aug 2016 22:42:27 -0300
Subject: [R-pkg-devel] Source code of an existing package
Message-ID: <96D4F620-2F4E-46AE-ACAD-7DD97A831A73@gmail.com>

Hi all!

I am interested in seeing the source code of the boot.ci() function of the boot package.

Is it possible to have such source code? How?

Thanks in advance,

---
Marcelo Carvalho Fernandes

From bbolker at gmail.com  Thu Aug 11 04:14:44 2016
From: bbolker at gmail.com (Ben Bolker)
Date: Wed, 10 Aug 2016 22:14:44 -0400
Subject: [R-pkg-devel] Source code of an existing package
In-Reply-To: <96D4F620-2F4E-46AE-ACAD-7DD97A831A73@gmail.com>
References: <96D4F620-2F4E-46AE-ACAD-7DD97A831A73@gmail.com>
Message-ID: <24820eb9-37cb-d2af-cc3c-5736d423c8d9@gmail.com>


 Easiest way:

  library(boot)
  boot.ci

Alternatively, go to https://cran.r-project.org/package=boot ,
download the tarball, unpack it, and look around in the R/ directory.

On 16-08-10 09:42 PM, Marcelo Carvalho Fernandes wrote:
> Hi all!
> 
> I am interested in seeing the source code of the boot.ci() function of the boot package.
> 
> Is it possible to have such source code? How?
> 
> Thanks in advance,
> 
> ---
> Marcelo Carvalho Fernandes
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>


From edd at debian.org  Thu Aug 11 04:34:07 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Wed, 10 Aug 2016 21:34:07 -0500
Subject: [R-pkg-devel] Source code of an existing package
In-Reply-To: <24820eb9-37cb-d2af-cc3c-5736d423c8d9@gmail.com>
References: <96D4F620-2F4E-46AE-ACAD-7DD97A831A73@gmail.com>
	<24820eb9-37cb-d2af-cc3c-5736d423c8d9@gmail.com>
Message-ID: <22443.58399.146728.17802@max.nulle.part>


On 10 August 2016 at 22:14, Ben Bolker wrote:
| 
|  Easiest way:
| 
|   library(boot)
|   boot.ci
| 
| Alternatively, go to https://cran.r-project.org/package=boot ,
| download the tarball, unpack it, and look around in the R/ directory.

Uwe Ligges wrote an 'R Help Desk' piece in R News about this -- see pages 43
to 45 here:
   https://www.r-project.org/doc/Rnews/Rnews_2006-4.pdf

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From hhoeflin at gmail.com  Thu Aug 11 06:57:05 2016
From: hhoeflin at gmail.com (Holger Hoefling)
Date: Thu, 11 Aug 2016 06:57:05 +0200
Subject: [R-pkg-devel] Source code of an existing package
In-Reply-To: <96D4F620-2F4E-46AE-ACAD-7DD97A831A73@gmail.com>
References: <96D4F620-2F4E-46AE-ACAD-7DD97A831A73@gmail.com>
Message-ID: <CAFDswJuujzvDb7pMeC0XK8v7ptP2_13c4gFROgnCxhSFL5-Pbg@mail.gmail.com>

Hi,

If you are interested in the source code of an entire package in its
original form - you can also download the .tar.gz version of the package
from CRAN. In a .tar.gz, you find the sources, unlike the .zip for windows,
which is already compiled.

If you are under windows, you can use a program such as 7-zip to unzip the
.tar.gz (which is mostly used on unix systems).

The R code of the package is in the R subfolder

In your case, the function boot.ci, is in

R/bootfuns.q

and starts in the latest version on line 859

Best

Holger

On Thu, Aug 11, 2016 at 3:42 AM, Marcelo Carvalho Fernandes <
mcf2000 at gmail.com> wrote:

> Hi all!
>
> I am interested in seeing the source code of the boot.ci() function of
> the boot package.
>
> Is it possible to have such source code? How?
>
> Thanks in advance,
>
> ---
> Marcelo Carvalho Fernandes
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>

	[[alternative HTML version deleted]]


From tim.appelhans at gmail.com  Thu Aug 11 08:51:44 2016
From: tim.appelhans at gmail.com (Tim Appelhans)
Date: Thu, 11 Aug 2016 08:51:44 +0200
Subject: [R-pkg-devel] Source code of an existing package
In-Reply-To: <CAFDswJuujzvDb7pMeC0XK8v7ptP2_13c4gFROgnCxhSFL5-Pbg@mail.gmail.com>
References: <96D4F620-2F4E-46AE-ACAD-7DD97A831A73@gmail.com>
	<CAFDswJuujzvDb7pMeC0XK8v7ptP2_13c4gFROgnCxhSFL5-Pbg@mail.gmail.com>
Message-ID: <57AC2080.3000202@gmail.com>

Hi,
I always use metacran to access package sources.
https://github.com/cran/boot

Tim

On 11.08.2016 06:57, Holger Hoefling wrote:
> Hi,
>
> If you are interested in the source code of an entire package in its
> original form - you can also download the .tar.gz version of the package
> from CRAN. In a .tar.gz, you find the sources, unlike the .zip for windows,
> which is already compiled.
>
> If you are under windows, you can use a program such as 7-zip to unzip the
> .tar.gz (which is mostly used on unix systems).
>
> The R code of the package is in the R subfolder
>
> In your case, the function boot.ci, is in
>
> R/bootfuns.q
>
> and starts in the latest version on line 859
>
> Best
>
> Holger
>
> On Thu, Aug 11, 2016 at 3:42 AM, Marcelo Carvalho Fernandes <
> mcf2000 at gmail.com> wrote:
>
>> Hi all!
>>
>> I am interested in seeing the source code of the boot.ci() function of
>> the boot package.
>>
>> Is it possible to have such source code? How?
>>
>> Thanks in advance,
>>
>> ---
>> Marcelo Carvalho Fernandes
>> ______________________________________________
>> R-package-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel

-- 
#####################################
Tim Appelhans
Department of Geography
Environmental Informatics
Philipps Universit?t Marburg
Deutschhausstra?e 12
Raum 00A08
35032 Marburg (Paketpost: 35037 Marburg)
Germany

Tel +49 (0) 6421 28-25957

http://environmentalinformatics-marburg.de/


From bob at rud.is  Sat Aug 13 18:34:52 2016
From: bob at rud.is (Bob Rudis)
Date: Sat, 13 Aug 2016 12:34:52 -0400
Subject: [R-pkg-devel] [Learning] the secret of Win[dows C-backed packages]
Message-ID: <CAA-FpKX6qiSMwAJSMfJ6zAxLUeK-0abO8P1=EZVCeYpQ222yCA@mail.gmail.com>

Hey folks,

I usually stare in awe at the C-backed packages that rely on eternal
libraries which are super-easy to get working on macOS & *nix _but_ that
also work perfectly on Windows. I fire up Windows (*maybe*) once a month to
test some of my packages but I'm curious as to what I need to do to setup a
more extended toolchain to create libraries such as are found in
https://github.com/rwinlib.

Jeroen (I think others, too) seem to effortlessly package those up and I
fully grok his "anticonf" setup and the 32-bit & 64-bit Windows library
setup. I just can't seem to actually do the building.

Why I'm asking what I'm asking (below) is that I'm working on something for
the $DAYJOB now - https://github.com/hrbrmstr/wand - that requires libmagic
and I kinda, unfortunately, actually need it to also work on Windows (it
usually doesn't matter, but this time some folks who use Windows systems at
work need to use this forthcoming package).

Rather than b[eu]g Jeroen or others for library building/packaging, I'd be
very, keenly interested in learning what else besides Rtools I need to
install to be able to make similar binary bundles to include during
installation (and to have my compiled pkgs work on Windows).

My disdain for Windows and my frustration with the super-limited toolchain
components installed with Rtools is probably contributing to my inability
to solve this on my own (no bash.exe...rly?). I used to use cygwin back in
the day but there are so many cautions in the main R docs abt compatible
versions that I'd rather not spend hours or days figuring out something
that others already have.

One example here is that I actually managed to get one of the libmagic
support packages (the regex library) built and installed on Windows (in the
toolchain /usr/local) but can't get libmagic's `configure` script to
find/use it.

I'm more than willing to write up any copious pointers folks provide into a
detailed, attributed blog post or R Journal article since this is seriously
the only bit holding me back from working on and releasing a ton of other
compilation-required packages to CRAN. I also know I'm not the only one who
gets stalled when trying to get similar things (especially those with full
Boost dependencies) to work on Windows.

thx,

-Bob

	[[alternative HTML version deleted]]


From edd at debian.org  Sat Aug 13 19:09:24 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Sat, 13 Aug 2016 12:09:24 -0500
Subject: [R-pkg-devel] [Learning] the secret of Win[dows C-backed
	packages]
In-Reply-To: <CAA-FpKX6qiSMwAJSMfJ6zAxLUeK-0abO8P1=EZVCeYpQ222yCA@mail.gmail.com>
References: <CAA-FpKX6qiSMwAJSMfJ6zAxLUeK-0abO8P1=EZVCeYpQ222yCA@mail.gmail.com>
Message-ID: <22447.21572.547288.361881@max.nulle.part>


I don't think there is a good "generally applicable" solution.  We have a
bunch of hacks. Below are three quickly picked examples from packages of mine:

RQuantLib relies on environment variables and a 'library that needs to just
be there' on the build host:

   ## The environment variable QUANTLIB_ROOT has to point to an existing build of QuantLib
   ## With R 2.12.0 and later, we also support 32 and 64 bit builds and need to differentiate
   PKG_CPPFLAGS=-I$(QUANTLIB_ROOT) -I../inst/include -I. -I$(BOOSTLIB) 
   PKG_CXXFLAGS=$(SHLIB_OPENMP_CFLAGS) -fpermissive 
   PKG_LIBS=-L$(QUANTLIB_ROOT)/lib${R_ARCH} -lQuantLib $(SHLIB_OPENMP_CFLAGS) 

RcppGSL does the same

   ## This assumes that the LIB_GSL variable points to working GSL libraries
   PKG_CPPFLAGS=-I$(LIB_GSL)/include -I../inst/include
   PKG_LIBS=-L$(LIB_GSL)/lib -lgsl -lgslcblas 

Rblpapi copies a library (for which we have 'free' binaries but no source) in
from GitHub:

   ## target to ensure tar.gz files get unpacked
   ## the opening '@' ensures operations are executed 'quietly'
   ## in order to see commands as they happens add a 'v' to the tar and cp commands
   ## curl has '-k' flag to suppress certificate warnings
   blpLibrary:
   		@if [ ! -d ../inst ]; then mkdir -p ../inst; fi
		@if [ ! -d ../blp/win/${FLV} ]; then mkdir -p ../blp/win/${FLV}; fi
		@if [ ! -f ../blp/win/${FLV}/blpHeaders.tar.gz ]; then curl -s -k -L -O https://github.com/Rblp/blp/raw/master/headers/windows/blpHeaders.tar.gz; mv blpHeaders.tar.gz ../blp/win/${FLV}; tar xfz ../blp/win/${FLV}/blpHeaders.tar.gz -C ../inst; fi
		@if [ ! -f ../blp/win/${FLV}/blpLibrary.tar.gz ]; then curl -s -k -L -O https://github.com/Rblp/blp/raw/master/win${WIN}/blpLibrary.tar.gz; mv blpLibrary.tar.gz ../blp/win/${FLV}; tar xfz ../blp/win/${FLV}/blpLibrary.tar.gz; fi
		@if [ ! -d ${FLV} ]; then mkdir -p ${FLV}; fi
		@cp blpapi3_${WIN}.dll ${FLV}
		@if [ ! -d ../inst/libs/${FLV} ]; then mkdir -p ../inst/libs/${FLV}; fi
		@cp blpapi3_${WIN}.dll ../inst/libs/${FLV}


None of that really generalizes well.  The last bit, much like the so-called
anticonf pattern, is more or less a non-standard practice exposing a security
risk by copying in code from a semi-random location which could be hijacked
or man-in-the-middle'd.

Really all this is just pretending that Windows is an envrionment on which
you can deploy proper build systems -- similar to what we are used from the
likes of dpkg/apt/yum or brew.  But in all honesty you just can't.

So I would not try to aim for something overly general.  It is Windows after all.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From bob at rud.is  Sat Aug 13 20:19:22 2016
From: bob at rud.is (Bob Rudis)
Date: Sat, 13 Aug 2016 18:19:22 +0000
Subject: [R-pkg-devel] [Learning] the secret of Win[dows C-backed
	packages]
In-Reply-To: <22447.21572.547288.361881@max.nulle.part>
References: <CAA-FpKX6qiSMwAJSMfJ6zAxLUeK-0abO8P1=EZVCeYpQ222yCA@mail.gmail.com>
	<22447.21572.547288.361881@max.nulle.part>
Message-ID: <CAA-FpKVeotzEJm-jx21x-5SOd+BUiGSF0r_d7wOEFq6K3g2xcg@mail.gmail.com>

Aye. I rly need to get back to my security & privacy "R" post. The
slipstreaming in of these binaries is somewhat frightening. Almost as
frightening as being stuck on Windows ??
On Sat, Aug 13, 2016 at 13:09 Dirk Eddelbuettel <edd at debian.org> wrote:

>
> I don't think there is a good "generally applicable" solution.  We have a
> bunch of hacks. Below are three quickly picked examples from packages of
> mine:
>
> RQuantLib relies on environment variables and a 'library that needs to just
> be there' on the build host:
>
>    ## The environment variable QUANTLIB_ROOT has to point to an existing
> build of QuantLib
>    ## With R 2.12.0 and later, we also support 32 and 64 bit builds and
> need to differentiate
>    PKG_CPPFLAGS=-I$(QUANTLIB_ROOT) -I../inst/include -I. -I$(BOOSTLIB)
>    PKG_CXXFLAGS=$(SHLIB_OPENMP_CFLAGS) -fpermissive
>    PKG_LIBS=-L$(QUANTLIB_ROOT)/lib${R_ARCH} -lQuantLib
> $(SHLIB_OPENMP_CFLAGS)
>
> RcppGSL does the same
>
>    ## This assumes that the LIB_GSL variable points to working GSL
> libraries
>    PKG_CPPFLAGS=-I$(LIB_GSL)/include -I../inst/include
>    PKG_LIBS=-L$(LIB_GSL)/lib -lgsl -lgslcblas
>
> Rblpapi copies a library (for which we have 'free' binaries but no source)
> in
> from GitHub:
>
>    ## target to ensure tar.gz files get unpacked
>    ## the opening '@' ensures operations are executed 'quietly'
>    ## in order to see commands as they happens add a 'v' to the tar and cp
> commands
>    ## curl has '-k' flag to suppress certificate warnings
>    blpLibrary:
>                 @if [ ! -d ../inst ]; then mkdir -p ../inst; fi
>                 @if [ ! -d ../blp/win/${FLV} ]; then mkdir -p
> ../blp/win/${FLV}; fi
>                 @if [ ! -f ../blp/win/${FLV}/blpHeaders.tar.gz ]; then
> curl -s -k -L -O
> https://github.com/Rblp/blp/raw/master/headers/windows/blpHeaders.tar.gz;
> mv blpHeaders.tar.gz ../blp/win/${FLV}; tar xfz
> ../blp/win/${FLV}/blpHeaders.tar.gz -C ../inst; fi
>                 @if [ ! -f ../blp/win/${FLV}/blpLibrary.tar.gz ]; then
> curl -s -k -L -O
> https://github.com/Rblp/blp/raw/master/win${WIN}/blpLibrary.tar.gz; mv
> blpLibrary.tar.gz ../blp/win/${FLV}; tar xfz
> ../blp/win/${FLV}/blpLibrary.tar.gz; fi
>                 @if [ ! -d ${FLV} ]; then mkdir -p ${FLV}; fi
>                 @cp blpapi3_${WIN}.dll ${FLV}
>                 @if [ ! -d ../inst/libs/${FLV} ]; then mkdir -p
> ../inst/libs/${FLV}; fi
>                 @cp blpapi3_${WIN}.dll ../inst/libs/${FLV}
>
>
> None of that really generalizes well.  The last bit, much like the
> so-called
> anticonf pattern, is more or less a non-standard practice exposing a
> security
> risk by copying in code from a semi-random location which could be hijacked
> or man-in-the-middle'd.
>
> Really all this is just pretending that Windows is an envrionment on which
> you can deploy proper build systems -- similar to what we are used from the
> likes of dpkg/apt/yum or brew.  But in all honesty you just can't.
>
> So I would not try to aim for something overly general.  It is Windows
> after all.
>
> Dirk
>
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>

	[[alternative HTML version deleted]]


From edd at debian.org  Sat Aug 13 20:49:18 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Sat, 13 Aug 2016 13:49:18 -0500
Subject: [R-pkg-devel] [Learning] the secret of Win[dows C-backed
	packages]
In-Reply-To: <CAA-FpKVeotzEJm-jx21x-5SOd+BUiGSF0r_d7wOEFq6K3g2xcg@mail.gmail.com>
References: <CAA-FpKX6qiSMwAJSMfJ6zAxLUeK-0abO8P1=EZVCeYpQ222yCA@mail.gmail.com>
	<22447.21572.547288.361881@max.nulle.part>
	<CAA-FpKVeotzEJm-jx21x-5SOd+BUiGSF0r_d7wOEFq6K3g2xcg@mail.gmail.com>
Message-ID: <22447.27566.209843.963884@max.nulle.part>


On 13 August 2016 at 18:19, Bob Rudis wrote:
| Aye. I rly need to get back to my security & privacy "R" post. The
| slipstreaming in of these binaries is somewhat frightening. Almost as
| frightening as being stuck on Windows ??

Right.

And the Windows side of that so-called "anticonf" [1] pattern more-or-less
establishes itself as "best practice" -- which may be defensible realizing
[2] that Windows is a fairly terrible development environment lacking any
kind of modularity or packages [3].  But then we all need to wake up, realize
it is 2016 and we may be providing binaries for maybe up to a millions users
on that platform.  By what you call "slipstreaming". Seriously?

Dirk

[1] I personally dislike that name a lot, even though I generally enjoy puns.
[2] See my earlier post in this thread.
[3] At the system level; I am unfamiliar with nu-get but add-ons failed before

| On Sat, Aug 13, 2016 at 13:09 Dirk Eddelbuettel <edd at debian.org> wrote:
| 
| 
|     I don't think there is a good "generally applicable" solution.? We have a
|     bunch of hacks. Below are three quickly picked examples from packages of
|     mine:
| 
|     RQuantLib relies on environment variables and a 'library that needs to just
|     be there' on the build host:
| 
|     ? ?## The environment variable QUANTLIB_ROOT has to point to an existing
|     build of QuantLib
|     ? ?## With R 2.12.0 and later, we also support 32 and 64 bit builds and
|     need to differentiate
|     ? ?PKG_CPPFLAGS=-I$(QUANTLIB_ROOT) -I../inst/include -I. -I$(BOOSTLIB)
|     ? ?PKG_CXXFLAGS=$(SHLIB_OPENMP_CFLAGS) -fpermissive
|     ? ?PKG_LIBS=-L$(QUANTLIB_ROOT)/lib${R_ARCH} -lQuantLib $
|     (SHLIB_OPENMP_CFLAGS)
| 
|     RcppGSL does the same
| 
|     ? ?## This assumes that the LIB_GSL variable points to working GSL
|     libraries
|     ? ?PKG_CPPFLAGS=-I$(LIB_GSL)/include -I../inst/include
|     ? ?PKG_LIBS=-L$(LIB_GSL)/lib -lgsl -lgslcblas
| 
|     Rblpapi copies a library (for which we have 'free' binaries but no source)
|     in
|     from GitHub:
| 
|     ? ?## target to ensure tar.gz files get unpacked
|     ? ?## the opening '@' ensures operations are executed 'quietly'
|     ? ?## in order to see commands as they happens add a 'v' to the tar and cp
|     commands
|     ? ?## curl has '-k' flag to suppress certificate warnings
|     ? ?blpLibrary:
|     ? ? ? ? ? ? ? ? @if [ ! -d ../inst ]; then mkdir -p ../inst; fi
|     ? ? ? ? ? ? ? ? @if [ ! -d ../blp/win/${FLV} ]; then mkdir -p ../blp/win/$
|     {FLV}; fi
|     ? ? ? ? ? ? ? ? @if [ ! -f ../blp/win/${FLV}/blpHeaders.tar.gz ]; then curl
|     -s -k -L -O https://github.com/Rblp/blp/raw/master/headers/windows/
|     blpHeaders.tar.gz; mv blpHeaders.tar.gz ../blp/win/${FLV}; tar xfz ../blp/
|     win/${FLV}/blpHeaders.tar.gz -C ../inst; fi
|     ? ? ? ? ? ? ? ? @if [ ! -f ../blp/win/${FLV}/blpLibrary.tar.gz ]; then curl
|     -s -k -L -O https://github.com/Rblp/blp/raw/master/win${WIN}/
|     blpLibrary.tar.gz; mv blpLibrary.tar.gz ../blp/win/${FLV}; tar xfz ../blp/
|     win/${FLV}/blpLibrary.tar.gz; fi
|     ? ? ? ? ? ? ? ? @if [ ! -d ${FLV} ]; then mkdir -p ${FLV}; fi
|     ? ? ? ? ? ? ? ? @cp blpapi3_${WIN}.dll ${FLV}
|     ? ? ? ? ? ? ? ? @if [ ! -d ../inst/libs/${FLV} ]; then mkdir -p ../inst/
|     libs/${FLV}; fi
|     ? ? ? ? ? ? ? ? @cp blpapi3_${WIN}.dll ../inst/libs/${FLV}
| 
| 
|     None of that really generalizes well.? The last bit, much like the
|     so-called
|     anticonf pattern, is more or less a non-standard practice exposing a
|     security
|     risk by copying in code from a semi-random location which could be hijacked
|     or man-in-the-middle'd.
| 
|     Really all this is just pretending that Windows is an envrionment on which
|     you can deploy proper build systems -- similar to what we are used from the
|     likes of dpkg/apt/yum or brew.? But in all honesty you just can't.
| 
|     So I would not try to aim for something overly general.? It is Windows
|     after all.
| 
|     Dirk
| 
|     --
|     http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
| 

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From h.wickham at gmail.com  Mon Aug 15 15:13:25 2016
From: h.wickham at gmail.com (Hadley Wickham)
Date: Mon, 15 Aug 2016 08:13:25 -0500
Subject: [R-pkg-devel] [Learning] the secret of Win[dows C-backed
	packages]
In-Reply-To: <CAA-FpKX6qiSMwAJSMfJ6zAxLUeK-0abO8P1=EZVCeYpQ222yCA@mail.gmail.com>
References: <CAA-FpKX6qiSMwAJSMfJ6zAxLUeK-0abO8P1=EZVCeYpQ222yCA@mail.gmail.com>
Message-ID: <CABdHhvG29umDMiKvY99W=F22a=0MfRLaGfiVh1pSwE6RfPmgZw@mail.gmail.com>

One other option is to include the src for libmagic inside your
package, and use that as a fallback if it's not installed on the
system. That gives linux users what they want (linking to the system
package), and windows users what they want (it just works). It only
works for simple libraries, but it looks like libmagic might qualify.

I could have sworn I did that in a package, but I can't remember which one :(

Hadley

On Sat, Aug 13, 2016 at 11:34 AM, Bob Rudis <bob at rud.is> wrote:
> Hey folks,
>
> I usually stare in awe at the C-backed packages that rely on eternal
> libraries which are super-easy to get working on macOS & *nix _but_ that
> also work perfectly on Windows. I fire up Windows (*maybe*) once a month to
> test some of my packages but I'm curious as to what I need to do to setup a
> more extended toolchain to create libraries such as are found in
> https://github.com/rwinlib.
>
> Jeroen (I think others, too) seem to effortlessly package those up and I
> fully grok his "anticonf" setup and the 32-bit & 64-bit Windows library
> setup. I just can't seem to actually do the building.
>
> Why I'm asking what I'm asking (below) is that I'm working on something for
> the $DAYJOB now - https://github.com/hrbrmstr/wand - that requires libmagic
> and I kinda, unfortunately, actually need it to also work on Windows (it
> usually doesn't matter, but this time some folks who use Windows systems at
> work need to use this forthcoming package).
>
> Rather than b[eu]g Jeroen or others for library building/packaging, I'd be
> very, keenly interested in learning what else besides Rtools I need to
> install to be able to make similar binary bundles to include during
> installation (and to have my compiled pkgs work on Windows).
>
> My disdain for Windows and my frustration with the super-limited toolchain
> components installed with Rtools is probably contributing to my inability
> to solve this on my own (no bash.exe...rly?). I used to use cygwin back in
> the day but there are so many cautions in the main R docs abt compatible
> versions that I'd rather not spend hours or days figuring out something
> that others already have.
>
> One example here is that I actually managed to get one of the libmagic
> support packages (the regex library) built and installed on Windows (in the
> toolchain /usr/local) but can't get libmagic's `configure` script to
> find/use it.
>
> I'm more than willing to write up any copious pointers folks provide into a
> detailed, attributed blog post or R Journal article since this is seriously
> the only bit holding me back from working on and releasing a ton of other
> compilation-required packages to CRAN. I also know I'm not the only one who
> gets stalled when trying to get similar things (especially those with full
> Boost dependencies) to work on Windows.
>
> thx,
>
> -Bob
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel



-- 
http://hadley.nz


From mmehan at gmail.com  Tue Aug 16 21:28:50 2016
From: mmehan at gmail.com (Mike Mehan)
Date: Tue, 16 Aug 2016 13:28:50 -0600
Subject: [R-pkg-devel] data function from utils package
Message-ID: <CAHSk02q8aZvs7XRGLZtXZnLQk43HK_-ZgG7YMmWThT6Xo1bM-Q@mail.gmail.com>

Hi,
I'm having trouble loading a csv file from my package data directory using
the data() function. We have an external file that gets updated every month
or so that we would like to include as data in our package. We are able to
import it using the data function when it is saved as an R Data file but
when we save it as a csv file it fails. I checked the help for data and it
says that it supports csv files but it says that it calls read.table with
the separator as a semi-colon instead of a comma. I checked the source code
and it also uses a semi-colon. Is this a bug? I would be really nice to be
able to use csv files since we refresh this file fairly often and I'd
rather not have to save it as an R data file each time. We also got it
working with system.file but using data() is much cleaner. Any suggestions?
Thanks,
Mike

	[[alternative HTML version deleted]]


From jfox at mcmaster.ca  Tue Aug 16 21:48:25 2016
From: jfox at mcmaster.ca (Fox, John)
Date: Tue, 16 Aug 2016 19:48:25 +0000
Subject: [R-pkg-devel] data function from utils package
In-Reply-To: <CAHSk02q8aZvs7XRGLZtXZnLQk43HK_-ZgG7YMmWThT6Xo1bM-Q@mail.gmail.com>
References: <CAHSk02q8aZvs7XRGLZtXZnLQk43HK_-ZgG7YMmWThT6Xo1bM-Q@mail.gmail.com>
Message-ID: <ACD1644AA6C67E4FBD0C350625508EC83656E48E@FHSDB2D11-2.csu.mcmaster.ca>

Dear Mike,

Perhaps it's stating the obvious, but why not save the .csv file with ";" as the delimiter using the sep argument to write.csv() or write.table(), or save as a .txt file with " " as the delimiter?

Although I don't know why ";" was chosen in preference to "," for data(), I doubt that it's a bug since the behaviour corresponds to what's in ?data, as you noted.

I hope this helps,
 John

--------------------------------------
John Fox, Professor
McMaster University
Hamilton, Ontario, Canada
Web: socserv.mcmaster.ca/jfox




> -----Original Message-----
> From: R-package-devel [mailto:r-package-devel-bounces at r-project.org] On
> Behalf Of Mike Mehan
> Sent: Tuesday, August 16, 2016 3:29 PM
> To: r-package-devel at r-project.org
> Subject: [R-pkg-devel] data function from utils package
> 
> Hi,
> I'm having trouble loading a csv file from my package data directory
> using the data() function. We have an external file that gets updated
> every month or so that we would like to include as data in our package.
> We are able to import it using the data function when it is saved as an
> R Data file but when we save it as a csv file it fails. I checked the
> help for data and it says that it supports csv files but it says that it
> calls read.table with the separator as a semi-colon instead of a comma.
> I checked the source code and it also uses a semi-colon. Is this a bug?
> I would be really nice to be able to use csv files since we refresh this
> file fairly often and I'd rather not have to save it as an R data file
> each time. We also got it working with system.file but using data() is
> much cleaner. Any suggestions?
> Thanks,
> Mike
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From hanas at uw.edu  Wed Aug 17 19:43:28 2016
From: hanas at uw.edu (Hana Sevcikova)
Date: Wed, 17 Aug 2016 10:43:28 -0700
Subject: [R-pkg-devel] data function from utils package
In-Reply-To: <ACD1644AA6C67E4FBD0C350625508EC83656E48E@FHSDB2D11-2.csu.mcmaster.ca>
References: <CAHSk02q8aZvs7XRGLZtXZnLQk43HK_-ZgG7YMmWThT6Xo1bM-Q@mail.gmail.com>
	<ACD1644AA6C67E4FBD0C350625508EC83656E48E@FHSDB2D11-2.csu.mcmaster.ca>
Message-ID: <19976f8b-f3f4-c2bb-1f39-758b7baf7d06@uw.edu>

Another option is to put an R file of the same name as your dataset into 
the "data" directory and specify how your data should be read. I use it 
whenever I need to overwrite other arguments from the default 
read.table. If you have e.g. mydata.csv, a file mydata.R would contain 
this line:

mydata <- read.table("mydata.csv", sep=",") # possibly with other args


Hana


On 16/08/2016 12:48, Fox, John wrote:
> Dear Mike,
>
> Perhaps it's stating the obvious, but why not save the .csv file
> with
";" as the delimiter using the sep argument to write.csv() or
write.table(), or save as a .txt file with " " as the delimiter?
>
> Although I don't know why ";" was chosen in preference to "," for
data(), I doubt that it's a bug since the behaviour corresponds to
what's in ?data, as you noted.
>
> I hope this helps,
>  John
>
> --------------------------------------
> John Fox, Professor
> McMaster University
> Hamilton, Ontario, Canada
> Web: socserv.mcmaster.ca/jfox
>
>
>
>
>> -----Original Message-----
>> From: R-package-devel [mailto:r-package-devel-bounces at r-project.org] On
>> Behalf Of Mike Mehan
>> Sent: Tuesday, August 16, 2016 3:29 PM
>> To: r-package-devel at r-project.org
>> Subject: [R-pkg-devel] data function from utils package
>>
>> Hi,
>> I'm having trouble loading a csv file from my package data directory
>> using the data() function. We have an external file that gets updated
>> every month or so that we would like to include as data in our package.
>> We are able to import it using the data function when it is saved as an
>> R Data file but when we save it as a csv file it fails. I checked the
>> help for data and it says that it supports csv files but it says that it
>> calls read.table with the separator as a semi-colon instead of a comma.
>> I checked the source code and it also uses a semi-colon. Is this a bug?
>> I would be really nice to be able to use csv files since we refresh this
>> file fairly often and I'd rather not have to save it as an R data file
>> each time. We also got it working with system.file but using data() is
>> much cleaner. Any suggestions?
>> Thanks,
>> Mike
>>
>> 	[[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-package-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>


From mmehan at gmail.com  Wed Aug 17 20:24:16 2016
From: mmehan at gmail.com (Mike Mehan)
Date: Wed, 17 Aug 2016 12:24:16 -0600
Subject: [R-pkg-devel] data function from utils package
In-Reply-To: <19976f8b-f3f4-c2bb-1f39-758b7baf7d06@uw.edu>
References: <CAHSk02q8aZvs7XRGLZtXZnLQk43HK_-ZgG7YMmWThT6Xo1bM-Q@mail.gmail.com>
	<ACD1644AA6C67E4FBD0C350625508EC83656E48E@FHSDB2D11-2.csu.mcmaster.ca>
	<19976f8b-f3f4-c2bb-1f39-758b7baf7d06@uw.edu>
Message-ID: <CAHSk02qfTj4B+U6A_NY8HO_6WNfF_KHGTMsZZtBEF-OJ0uYa2g@mail.gmail.com>

Hi Hana,
That works! Thanks for the great suggestion. For some reason I got an error
that it couldn't find the read.csv() function. Adding library(utils) to the
script didn't fix it. Including the namespace in the call did though.

mydata <- utils::read.csv("mydata.csv")

Thanks,
Mike


On Wed, Aug 17, 2016 at 11:43 AM, Hana Sevcikova <hanas at uw.edu> wrote:

> Another option is to put an R file of the same name as your dataset into
> the "data" directory and specify how your data should be read. I use it
> whenever I need to overwrite other arguments from the default read.table.
> If you have e.g. mydata.csv, a file mydata.R would contain this line:
>
> mydata <- read.table("mydata.csv", sep=",") # possibly with other args
>
>
> Hana
>
>
>
> On 16/08/2016 12:48, Fox, John wrote:
>
>> Dear Mike,
>>
>> Perhaps it's stating the obvious, but why not save the .csv file
>> with
>>
> ";" as the delimiter using the sep argument to write.csv() or
> write.table(), or save as a .txt file with " " as the delimiter?
>
>>
>> Although I don't know why ";" was chosen in preference to "," for
>>
> data(), I doubt that it's a bug since the behaviour corresponds to
> what's in ?data, as you noted.
>
>>
>> I hope this helps,
>>  John
>>
>> --------------------------------------
>> John Fox, Professor
>> McMaster University
>> Hamilton, Ontario, Canada
>> Web: socserv.mcmaster.ca/jfox
>>
>>
>>
>>
>> -----Original Message-----
>>> From: R-package-devel [mailto:r-package-devel-bounces at r-project.org] On
>>> Behalf Of Mike Mehan
>>> Sent: Tuesday, August 16, 2016 3:29 PM
>>> To: r-package-devel at r-project.org
>>> Subject: [R-pkg-devel] data function from utils package
>>>
>>> Hi,
>>> I'm having trouble loading a csv file from my package data directory
>>> using the data() function. We have an external file that gets updated
>>> every month or so that we would like to include as data in our package.
>>> We are able to import it using the data function when it is saved as an
>>> R Data file but when we save it as a csv file it fails. I checked the
>>> help for data and it says that it supports csv files but it says that it
>>> calls read.table with the separator as a semi-colon instead of a comma.
>>> I checked the source code and it also uses a semi-colon. Is this a bug?
>>> I would be really nice to be able to use csv files since we refresh this
>>> file fairly often and I'd rather not have to save it as an R data file
>>> each time. We also got it working with system.file but using data() is
>>> much cleaner. Any suggestions?
>>> Thanks,
>>> Mike
>>>
>>>         [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-package-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>>>
>>
>> ______________________________________________
>> R-package-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>>
>>
>

	[[alternative HTML version deleted]]


From james.f.hester at gmail.com  Thu Aug 18 15:44:42 2016
From: james.f.hester at gmail.com (Jim Hester)
Date: Thu, 18 Aug 2016 09:44:42 -0400
Subject: [R-pkg-devel] [Learning] the secret of Win[dows C-backed
	packages]
In-Reply-To: <CABdHhvG29umDMiKvY99W=F22a=0MfRLaGfiVh1pSwE6RfPmgZw@mail.gmail.com>
References: <CAA-FpKX6qiSMwAJSMfJ6zAxLUeK-0abO8P1=EZVCeYpQ222yCA@mail.gmail.com>
	<CABdHhvG29umDMiKvY99W=F22a=0MfRLaGfiVh1pSwE6RfPmgZw@mail.gmail.com>
Message-ID: <CAD6tx94MOSr54L_xGJaLSxb=xsM_Q+4v7LeR54Cgq1n3BOaQ7g@mail.gmail.com>

It has been a few months since I was doing this for the 4.9.3 windows
toolchain, but the best way I found IIRC of getting everything working was
to install msys2 and use that as the build environment, but put the proper
Rtools toolchain first in the PATH.

On Mon, Aug 15, 2016 at 9:13 AM, Hadley Wickham <h.wickham at gmail.com> wrote:

> One other option is to include the src for libmagic inside your
> package, and use that as a fallback if it's not installed on the
> system. That gives linux users what they want (linking to the system
> package), and windows users what they want (it just works). It only
> works for simple libraries, but it looks like libmagic might qualify.
>
> I could have sworn I did that in a package, but I can't remember which one
> :(
>
> Hadley
>
> On Sat, Aug 13, 2016 at 11:34 AM, Bob Rudis <bob at rud.is> wrote:
> > Hey folks,
> >
> > I usually stare in awe at the C-backed packages that rely on eternal
> > libraries which are super-easy to get working on macOS & *nix _but_ that
> > also work perfectly on Windows. I fire up Windows (*maybe*) once a month
> to
> > test some of my packages but I'm curious as to what I need to do to
> setup a
> > more extended toolchain to create libraries such as are found in
> > https://github.com/rwinlib.
> >
> > Jeroen (I think others, too) seem to effortlessly package those up and I
> > fully grok his "anticonf" setup and the 32-bit & 64-bit Windows library
> > setup. I just can't seem to actually do the building.
> >
> > Why I'm asking what I'm asking (below) is that I'm working on something
> for
> > the $DAYJOB now - https://github.com/hrbrmstr/wand - that requires
> libmagic
> > and I kinda, unfortunately, actually need it to also work on Windows (it
> > usually doesn't matter, but this time some folks who use Windows systems
> at
> > work need to use this forthcoming package).
> >
> > Rather than b[eu]g Jeroen or others for library building/packaging, I'd
> be
> > very, keenly interested in learning what else besides Rtools I need to
> > install to be able to make similar binary bundles to include during
> > installation (and to have my compiled pkgs work on Windows).
> >
> > My disdain for Windows and my frustration with the super-limited
> toolchain
> > components installed with Rtools is probably contributing to my inability
> > to solve this on my own (no bash.exe...rly?). I used to use cygwin back
> in
> > the day but there are so many cautions in the main R docs abt compatible
> > versions that I'd rather not spend hours or days figuring out something
> > that others already have.
> >
> > One example here is that I actually managed to get one of the libmagic
> > support packages (the regex library) built and installed on Windows (in
> the
> > toolchain /usr/local) but can't get libmagic's `configure` script to
> > find/use it.
> >
> > I'm more than willing to write up any copious pointers folks provide
> into a
> > detailed, attributed blog post or R Journal article since this is
> seriously
> > the only bit holding me back from working on and releasing a ton of other
> > compilation-required packages to CRAN. I also know I'm not the only one
> who
> > gets stalled when trying to get similar things (especially those with
> full
> > Boost dependencies) to work on Windows.
> >
> > thx,
> >
> > -Bob
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-package-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-package-devel
>
>
>
> --
> http://hadley.nz
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>

	[[alternative HTML version deleted]]


From glennmschultz at me.com  Mon Aug 22 00:31:39 2016
From: glennmschultz at me.com (Glenn Schultz)
Date: Sun, 21 Aug 2016 22:31:39 +0000 (GMT)
Subject: [R-pkg-devel] Reference Classes
Message-ID: <f44f9138-bbed-4683-885b-7c82bbda8d28@me.com>

All,

My package BondLab is written in S4. ?I need to build recursive tree to create human readable mortgage payment waterfalls in Bond Lab. ?I am simply asking if the below idea is doable

The current waterfall implementation is a list of lists in a dataframe and payment rules are iterated over the data frame with a call to source which is the script used to allocate principal and interest (standard practice in MBS structured finance) This works fine but suffers from two drawbacks:

1) The source script is bespoke to the deal.
2) The source script is not human readable - in this case human readable means intuitive. ?That is without examining/following procedural code.

So, I think a recursive tree is better. ?

I have tested this idea on data.tree and it works well. ?However, data.tree uses R6, which lives in the S3 world and forcing S4 classes into S3 does not seem a particularly good idea. ?My research thus far has led me to believe that I can use S4 ReferenceClass to build a recursive tree which whose nodes (leafs?) would contain a class I have created called TrancheDetails and whose root is always ?Deal".

For example, I have dput below a class TrancheDetails which is one of 5 tranches classes belonging to FNMA 2016-53 - each with unique payment rules. ?I am thinking something along the lines of the following. ?Tranche is a leaf and Deal is the root (I am still learning about trees). ?With this scheme I can now create methods whose functional representation is the waterfall payment rules. ?I have done this successfully with data.tree on a mock deal set-up using the package. ?The real goal is to be able to load TrancheDetails which is the complete data representation of the Tranche (investor bond) within a REMIC with methods for principal and interest allocation.

Before I go down this road is my understanding of ReferenceClass correct and can I build a recursive tree with ReferenceClasses? ?I am very close to the dream of creating open source analytics and human readable waterfalls for mortgage and asset backed securities and I know the answer lies in R I just have to unlock it.


My initial thoughts:

?setRefClass("Tranche",
? ? ? ? ? ? ? contains = "TrancheDetails")
??
? setRefClass("Deal",
? ? ? ? ? ? ? contains = "Tranche")

methods to initialize the tree ?

new("TrancheDetails"
? ? , DealName = "FNMA2016053"
? ? , TrancheNumber = "1"
? ? , NumberofComponents = 0
? ? , ComponentofTranches = "0"
? ? , TrancheName = "053-AF"
? ? , TranchePrincipal = "pass-through"
? ? , TranchePrincipalDesc = "PT"
? ? , TrancheInterestDesc = "FLT"
? ? , TrancheOtherDescription = ""
? ? , Cusip = "3136AS4X1"
? ? , TrancheOrigBal = 38400349
? ? , TrancheInterest = "FLT"
? ? , TrancheCoupon = 0.95
? ? , AccrualRate = 0
? ? , TreasuryMaturity = 0
? ? , TreasuryYield = 0
? ? , TreasurySpread = 0
? ? , TrancheYield = 0
? ? , TranchePrice = 0
? ? , TrancheProceedsWithInterest = 0
? ? , TrancheAvgLife = 7.03937
? ? , TrancheDuration = 4.70661
? ? , TrancheDatedDate = "07-25-2016"
? ? , TrancheFirstPmtDate = "08-25-2016"
? ? , TrancheLastPmtDate = "02-25-2045"
? ? , TrancheNextPmtDate = "08-25-2016"
? ? , TrancheFinalPmtDate = "08-25-2046"
? ? , Delay = 0
? ? , InterestPmtFrequency = 12
? ? , PrinPmtFrequency = 12
? ? , PacLowBand = 0
? ? , PacHighBand = 0
? ? , FloaterIndex = "LIBOR1BBA"
? ? , InitialIndexValue = 0.45
? ? , FloaterMargin = 0.5
? ? , FloaterMultiplier = 1
? ? , FloaterCap = 6.5
? ? , FloaterFloor = 0.5
? ? , FloaterInitialCoupon = 0.95
? ? , FloaterResetFrequency = 12
? ? , FloaterFirstResetDate = "08-25-2016"
? ? , FloaterFormula = function (Cap, Floor, Margin, Index, Multiplier)?
{
? ? min(Cap, max((Index * Multiplier) + Margin, Floor))
}
? ? , Group = 1
? ? , TrancheType = "character"
? ? , Schedule = FALSE
? ? , Fixed = FALSE
)

From russell-lenth at uiowa.edu  Mon Aug 22 21:15:55 2016
From: russell-lenth at uiowa.edu (Lenth, Russell V)
Date: Mon, 22 Aug 2016 19:15:55 +0000
Subject: [R-pkg-devel] Software ecosystems survey
Message-ID: <CO2PR04MB2214709995E5BDC564FF6C3EF1E80@CO2PR04MB2214.namprd04.prod.outlook.com>

Package developers,

I am acquainted with one of the authors of an interesting article on how software developers respond to, and manage, evolutionary changes in various multi-developer computing "ecosystems". The article has some preliminary results based on interviews with small numbers of developers in R/CRAN, Eclipse, and Node.js/npm. These three communities place different priorities regarding stability, access to end users, developer ease, etc.

You can access the article by following a link in the website http://breakingapis.org.

The authors are now interested in expanding their study to more respondents and to more ecosystems. It seems to me that several members of this package-developer group might be interested in weighing-in and providing more reliable information on R package developers' culture. If so, just visit the above site and click on the link for taking the survey. 

Russ

Russell V. Lenth  -  Professor Emeritus
Department of Statistics and Actuarial Science   
The University of Iowa  -  Iowa City, IA 52242  USA   
Voice (319)335-0712 (Dept. office)  -  FAX (319)335-3017


From vineethawarriyar.kod at ucalgary.ca  Mon Aug 22 22:43:08 2016
From: vineethawarriyar.kod at ucalgary.ca (Vineetha Warriyar Kodalore Vijayan)
Date: Mon, 22 Aug 2016 20:43:08 +0000
Subject: [R-pkg-devel] How to create choices in a function call.
Message-ID: <BY2PR01MB1781E9DA5D4F37B9680A64E097E80@BY2PR01MB1781.prod.exchangelabs.com>

Dear R package developers,

I'm trying to create a small R package that gives me an epidemic from different epidemic models. I have imported the source codes from fortran for different models, say epidata1(),epidata2() and so on and it works fine. My question here is, how I can do the same by calling one function in R, which gives me options to input different model formulas and corresponding parameters.
I'm relatively new in R programming and package building. I googled a lot and read about S3 and S4 methods, but really
couldn't figure out  how/where to start. I would really appreciate any help/guidance.

Thank you,
Vineetha

	[[alternative HTML version deleted]]


From drjimlemon at gmail.com  Tue Aug 23 01:25:09 2016
From: drjimlemon at gmail.com (Jim Lemon)
Date: Tue, 23 Aug 2016 09:25:09 +1000
Subject: [R-pkg-devel] How to create choices in a function call.
In-Reply-To: <BY2PR01MB1781E9DA5D4F37B9680A64E097E80@BY2PR01MB1781.prod.exchangelabs.com>
References: <BY2PR01MB1781E9DA5D4F37B9680A64E097E80@BY2PR01MB1781.prod.exchangelabs.com>
Message-ID: <CA+8X3fV5HeOXFG_1sn62MQoXA3x41wLs6VAJCywdDa0DfkCvPQ@mail.gmail.com>

Hi Vineetha,
It sounds like you want the "do.call" function and an argument in your
"one function" to specify the function that you want to call.

Jim


On Tue, Aug 23, 2016 at 6:43 AM, Vineetha Warriyar Kodalore Vijayan
<vineethawarriyar.kod at ucalgary.ca> wrote:
> Dear R package developers,
>
> I'm trying to create a small R package that gives me an epidemic from different epidemic models. I have imported the source codes from fortran for different models, say epidata1(),epidata2() and so on and it works fine. My question here is, how I can do the same by calling one function in R, which gives me options to input different model formulas and corresponding parameters.
> I'm relatively new in R programming and package building. I googled a lot and read about S3 and S4 methods, but really
> couldn't figure out  how/where to start. I would really appreciate any help/guidance.
>
> Thank you,
> Vineetha
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From seandavi at gmail.com  Tue Aug 23 15:13:56 2016
From: seandavi at gmail.com (Sean Davis)
Date: Tue, 23 Aug 2016 09:13:56 -0400
Subject: [R-pkg-devel] Wrapping a third-party c++ library
Message-ID: <461AEBF4-BE01-4A33-A693-1100E3B8C399@gmail.com>

I am trying to wrap a third-party toolkit that provides a C++ API.  The code is open source and includes a license that allows me to include it directly in an R package.  Right now, I am happy if I can get ANY build (linux, windows, or Mac) working.  The rough build process looks like that given here (starting at the highlighted line):

https://github.com/seandavi/SRA2R/blob/master/inst/docker/install_ngs_sdk.sh#L22

Unfortunately, these configure scripts are not standard autoconfig flavor, so they seem pretty fragile (even with a ?prefix, they try to install stuff into system libraries).  My goal is to include the source of the two partner libraries and build shared libraries in the R installation hierarchy.  I simply do not have enough experience using configure scripts to know how to translate what I have noted above into something that would be expected to get the installation right in the r package directory and allow linking.

Any concrete suggestions about how to move this forward are much appreciated.

Thanks,
Sean

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <https://stat.ethz.ch/pipermail/r-package-devel/attachments/20160823/76bcb036/attachment.bin>

From edd at debian.org  Tue Aug 23 16:59:57 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Tue, 23 Aug 2016 09:59:57 -0500
Subject: [R-pkg-devel] Wrapping a third-party c++ library
In-Reply-To: <461AEBF4-BE01-4A33-A693-1100E3B8C399@gmail.com>
References: <461AEBF4-BE01-4A33-A693-1100E3B8C399@gmail.com>
Message-ID: <22460.25837.802830.143870@max.nulle.part>


hi Sean,

On 23 August 2016 at 09:13, Sean Davis wrote:
| I am trying to wrap a third-party toolkit that provides a C++ API.  The code is open source and includes a license that allows me to include it directly in an R package.  Right now, I am happy if I can get ANY build (linux, windows, or Mac) working.  The rough build process looks like that given here (starting at the highlighted line):
| 
| https://github.com/seandavi/SRA2R/blob/master/inst/docker/install_ngs_sdk.sh#L22
| 
| Unfortunately, these configure scripts are not standard autoconfig flavor, so they seem pretty fragile (even with a ?prefix, they try to install stuff into system libraries).  My goal is to include the source of the two partner libraries and build shared libraries in the R installation hierarchy.  I simply do not have enough experience using configure scripts to know how to translate what I have noted above into something that would be expected to get the installation right in the r package directory and allow linking.
| 
| Any concrete suggestions about how to move this forward are much appreciated.

Local shared libraries is hard(est). I would not start there.

System shared libraries is easy (just ask all the database packages, graphics
formats packages etc pp) -- but you then push the burden onto your users to
actually *have* these system libraries.  Not easy with "obscure" science stuff.

Middle ground: _static_ library in your package.  Tweak and bend the required
libraries til they cooperate, then adjust.  This has been done since time
immortal, see eg the Matrix package and its several subdirectories.  Still
not trivial, but doable.

Easiest 'dirty' solution: throw all source files into your package's src/ and
hope for the best.  Works for small packages. 

Long story short: for something complicated like this, maybe a Docker
container is the best you can do :-/ 

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From seandavi at gmail.com  Tue Aug 23 17:13:11 2016
From: seandavi at gmail.com (Sean Davis)
Date: Tue, 23 Aug 2016 11:13:11 -0400
Subject: [R-pkg-devel] Wrapping a third-party c++ library
In-Reply-To: <22460.25837.802830.143870@max.nulle.part>
References: <461AEBF4-BE01-4A33-A693-1100E3B8C399@gmail.com>
	<22460.25837.802830.143870@max.nulle.part>
Message-ID: <C9A17F0E-5B3E-4698-AC76-37819FB6B8C1@gmail.com>

Thanks for the reply and feedback, Dirk.

> On Aug 23, 2016, at 10:59 AM, Dirk Eddelbuettel <edd at debian.org> wrote:
> 
> 
> hi Sean,
> 
> On 23 August 2016 at 09:13, Sean Davis wrote:
> | I am trying to wrap a third-party toolkit that provides a C++ API.  The code is open source and includes a license that allows me to include it directly in an R package.  Right now, I am happy if I can get ANY build (linux, windows, or Mac) working.  The rough build process looks like that given here (starting at the highlighted line):
> |
> | https://github.com/seandavi/SRA2R/blob/master/inst/docker/install_ngs_sdk.sh#L22
> |
> | Unfortunately, these configure scripts are not standard autoconfig flavor, so they seem pretty fragile (even with a ?prefix, they try to install stuff into system libraries).  My goal is to include the source of the two partner libraries and build shared libraries in the R installation hierarchy.  I simply do not have enough experience using configure scripts to know how to translate what I have noted above into something that would be expected to get the installation right in the r package directory and allow linking.
> |
> | Any concrete suggestions about how to move this forward are much appreciated.
> 
> Local shared libraries is hard(est). I would not start there.
> 
> System shared libraries is easy (just ask all the database packages, graphics
> formats packages etc pp) -- but you then push the burden onto your users to
> actually *have* these system libraries.  Not easy with "obscure" science stuff.

It is complicated further by the fact that the group who develops this software distributes it as binaries to many users.

> Middle ground: _static_ library in your package.  Tweak and bend the required
> libraries til they cooperate, then adjust.  This has been done since time
> immortal, see eg the Matrix package and its several subdirectories.  Still
> not trivial, but doable.

Probably beyond my patience level, but?.

> Easiest 'dirty' solution: throw all source files into your package's src/ and
> hope for the best.  Works for small packages.

Yeah, I have tried that in the past and perhaps after some cleanup the code can get there.

> Long story short: for something complicated like this, maybe a Docker
> container is the best you can do :-/

Yeah, docker is what I have been living with for months and it is a great solution for development, but moving that paradigm the the standard scientific HPC environment just isn?t happening despite all the problems it would potentially bypass.

Nice to know that, while my R foo is limited compared to others on this list, I am not crazy to think that this might be hard.

Sean


> 
> Dirk
> 
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <https://stat.ethz.ch/pipermail/r-package-devel/attachments/20160823/e75a8a47/attachment.bin>

From kasperdanielhansen at gmail.com  Tue Aug 23 17:35:44 2016
From: kasperdanielhansen at gmail.com (Kasper Daniel Hansen)
Date: Tue, 23 Aug 2016 11:35:44 -0400
Subject: [R-pkg-devel] Wrapping a third-party c++ library
In-Reply-To: <C9A17F0E-5B3E-4698-AC76-37819FB6B8C1@gmail.com>
References: <461AEBF4-BE01-4A33-A693-1100E3B8C399@gmail.com>
	<22460.25837.802830.143870@max.nulle.part>
	<C9A17F0E-5B3E-4698-AC76-37819FB6B8C1@gmail.com>
Message-ID: <CAC2h7uup6Y3f+DDonPx7OvnJmQtQQPyHb2KrYoe+D6XqO9nhXA@mail.gmail.com>

Remember there are no rules for a configure script, there is only the
tradition that it is a script you invoke prior to make.  "Hand-written"
configure scripts can do anything they want.  In this case, I had a 2s look
at the configure script in the ngs project which ultimately are a series of
"konfigure.perl" scripts which may be hand written.  It is hard to even
know what options the script supports without reading the code. My perl is
rusty but the perl script seems to reference build-prefix and prefix.
Also, see the wiki
  https://github.com/ncbi/ngs/wiki/Building-and-Installing-from-Source
You should look carefully at ./configure --help, but I am sure you know all
this.

This could indeed be painful.  Probably doable, assuming infinite time
though.

Best,
Kasper



On Tue, Aug 23, 2016 at 11:13 AM, Sean Davis <seandavi at gmail.com> wrote:

> Thanks for the reply and feedback, Dirk.
>
> > On Aug 23, 2016, at 10:59 AM, Dirk Eddelbuettel <edd at debian.org> wrote:
> >
> >
> > hi Sean,
> >
> > On 23 August 2016 at 09:13, Sean Davis wrote:
> > | I am trying to wrap a third-party toolkit that provides a C++ API.
> The code is open source and includes a license that allows me to include it
> directly in an R package.  Right now, I am happy if I can get ANY build
> (linux, windows, or Mac) working.  The rough build process looks like that
> given here (starting at the highlighted line):
> > |
> > | https://github.com/seandavi/SRA2R/blob/master/inst/docker/
> install_ngs_sdk.sh#L22
> > |
> > | Unfortunately, these configure scripts are not standard autoconfig
> flavor, so they seem pretty fragile (even with a ?prefix, they try to
> install stuff into system libraries).  My goal is to include the source of
> the two partner libraries and build shared libraries in the R installation
> hierarchy.  I simply do not have enough experience using configure scripts
> to know how to translate what I have noted above into something that would
> be expected to get the installation right in the r package directory and
> allow linking.
> > |
> > | Any concrete suggestions about how to move this forward are much
> appreciated.
> >
> > Local shared libraries is hard(est). I would not start there.
> >
> > System shared libraries is easy (just ask all the database packages,
> graphics
> > formats packages etc pp) -- but you then push the burden onto your users
> to
> > actually *have* these system libraries.  Not easy with "obscure" science
> stuff.
>
> It is complicated further by the fact that the group who develops this
> software distributes it as binaries to many users.
>
> > Middle ground: _static_ library in your package.  Tweak and bend the
> required
> > libraries til they cooperate, then adjust.  This has been done since time
> > immortal, see eg the Matrix package and its several subdirectories.
> Still
> > not trivial, but doable.
>
> Probably beyond my patience level, but?.
>
> > Easiest 'dirty' solution: throw all source files into your package's
> src/ and
> > hope for the best.  Works for small packages.
>
> Yeah, I have tried that in the past and perhaps after some cleanup the
> code can get there.
>
> > Long story short: for something complicated like this, maybe a Docker
> > container is the best you can do :-/
>
> Yeah, docker is what I have been living with for months and it is a great
> solution for development, but moving that paradigm the the standard
> scientific HPC environment just isn?t happening despite all the problems it
> would potentially bypass.
>
> Nice to know that, while my R foo is limited compared to others on this
> list, I am not crazy to think that this might be hard.
>
> Sean
>
>
> >
> > Dirk
> >
> > --
> > http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>

	[[alternative HTML version deleted]]


From edd at debian.org  Tue Aug 23 17:36:53 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Tue, 23 Aug 2016 10:36:53 -0500
Subject: [R-pkg-devel] Wrapping a third-party c++ library
In-Reply-To: <C9A17F0E-5B3E-4698-AC76-37819FB6B8C1@gmail.com>
References: <461AEBF4-BE01-4A33-A693-1100E3B8C399@gmail.com>
	<22460.25837.802830.143870@max.nulle.part>
	<C9A17F0E-5B3E-4698-AC76-37819FB6B8C1@gmail.com>
Message-ID: <22460.28053.491645.600799@max.nulle.part>


On 23 August 2016 at 11:13, Sean Davis wrote:
| Thanks for the reply and feedback, Dirk.

Pleasure!
 
| > On Aug 23, 2016, at 10:59 AM, Dirk Eddelbuettel <edd at debian.org> wrote:
| > Local shared libraries is hard(est). I would not start there.

I missed one line here: "Hard(est) because you have to communicate with
dynamic linker."  For eg RInside we do that and encode the path via rpath,
but that is eg frowned upon by Debian because it makes your binary (or
library) non relocatable as those paths remain fixed../

| > System shared libraries is easy (just ask all the database packages, graphics
| > formats packages etc pp) -- but you then push the burden onto your users to
| > actually *have* these system libraries.  Not easy with "obscure" science stuff.
| 
| It is complicated further by the fact that the group who develops this software distributes it as binaries to many users.

Eeeek.
 
| > Middle ground: _static_ library in your package.  Tweak and bend the required
| > libraries til they cooperate, then adjust.  This has been done since time
| > immortal, see eg the Matrix package and its several subdirectories.  Still
| > not trivial, but doable.
| 
| Probably beyond my patience level, but?.
| 
| > Easiest 'dirty' solution: throw all source files into your package's src/ and
| > hope for the best.  Works for small packages.
| 
| Yeah, I have tried that in the past and perhaps after some cleanup the code can get there.
| 
| > Long story short: for something complicated like this, maybe a Docker
| > container is the best you can do :-/
| 
| Yeah, docker is what I have been living with for months and it is a great solution for development, but moving that paradigm the the standard scientific HPC environment just isn?t happening despite all the problems it would potentially bypass.
| 
| Nice to know that, while my R foo is limited compared to others on this list, I am not crazy to think that this might be hard.

Sadly, it really is hard, and made harder by the fact that we have some many
choices -- and then OS-depedencies.

I have been thinking about creating a tutorial for Rcpp users on this but so
far have not yet figured out how to do it all well enough to be worth it.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From mark.vanderloo at gmail.com  Thu Aug 25 11:20:54 2016
From: mark.vanderloo at gmail.com (Mark van der Loo)
Date: Thu, 25 Aug 2016 09:20:54 +0000
Subject: [R-pkg-devel] Compiler choice on CRAN (R-windows-oldrel)
Message-ID: <CAOKDuOh=Q8FhAjcMsWOCuSXFUZtZa68NmbzCSb6XiV2n4YXJ8A@mail.gmail.com>

Dear listers,


Compilation of my gower pkg fails on R-oldrel-windows. I am pretty sure
that this is because it uses gcc 4.6.3 which has limited support for OpenMP
(the errors are the same as I got on the old travis-ci build environment,
see my related question[1]).

Now, according to the Rtools page[2], since R3.2.2 "Both the gcc 4.6.3
toolchain and a toolchain based on gcc 4.9.3 and mingw-w64 v3 are now
included." Not sure what that says about CRAN, but I'm hoping/guessing it
uses Rtools the same way as we do.

So I guess I have the following options:

- make my package depend on R>=3.3
- Alter my code (as kindly suggested by Ott Toomet in [1])
- Tell CRAN to use the modern compiler.

Obviously, the latter would be easiest. Is this is even possible? For a
local installation I could set an environment variable[3], but how about
doing this at CRAN?

Thanks,
Mark


[1] https://stat.ethz.ch/pipermail/r-package-devel/2016q3/000983.html
[2] https://cran.r-project.org/bin/windows/Rtools/
[3]
https://cran.r-project.org/doc/manuals/r-release/R-admin.html#Customizing-package-compilation

	[[alternative HTML version deleted]]


From pdalgd at gmail.com  Thu Aug 25 12:17:28 2016
From: pdalgd at gmail.com (peter dalgaard)
Date: Thu, 25 Aug 2016 12:17:28 +0200
Subject: [R-pkg-devel] Compiler choice on CRAN (R-windows-oldrel)
In-Reply-To: <CAOKDuOh=Q8FhAjcMsWOCuSXFUZtZa68NmbzCSb6XiV2n4YXJ8A@mail.gmail.com>
References: <CAOKDuOh=Q8FhAjcMsWOCuSXFUZtZa68NmbzCSb6XiV2n4YXJ8A@mail.gmail.com>
Message-ID: <DF92271A-88E6-4596-91DA-67F1B4FDF571@gmail.com>

I don't have hard info on ABI compatibility between gcc versions, but there have been issues in the past, at least with with gfortran.

Now, many people/schools will have R-3.2.x installed, built with gcc 4.6.y. We cannot retroactively recompile their installation, nor expect them to install a new version built with gcc 4.9.z. This raises a specific question and a generic one:

- specific: Will a package binary of gower built with 4.9 work with R built with 4.6?
- generic: Is is sufficiently likely that a given package if compiled with a different compiler version that CRAN would consider having a mechanism to specify a particular compiler version?

I suspect that the answer to the second question is no.

Whether to condition on R >= 3.3 is a good idea largely depends on two things

- the user base (would they upgrade R anyways?)
- are there other packages that depends on gower? (CRAN keeps only the newest version of a package so requiring a newer R could affect users with less aggressive update policies. This already happened when the pbkrtest package update rendered the car package unloadable.)

You do have a 4th option: conditionalize the _code_ on the R version, then remove old-style code when 3.2.x becomes history.

-pd

On 25 Aug 2016, at 11:20 , Mark van der Loo <mark.vanderloo at gmail.com> wrote:

> Dear listers,
> 
> 
> Compilation of my gower pkg fails on R-oldrel-windows. I am pretty sure
> that this is because it uses gcc 4.6.3 which has limited support for OpenMP
> (the errors are the same as I got on the old travis-ci build environment,
> see my related question[1]).
> 
> Now, according to the Rtools page[2], since R3.2.2 "Both the gcc 4.6.3
> toolchain and a toolchain based on gcc 4.9.3 and mingw-w64 v3 are now
> included." Not sure what that says about CRAN, but I'm hoping/guessing it
> uses Rtools the same way as we do.
> 
> So I guess I have the following options:
> 
> - make my package depend on R>=3.3
> - Alter my code (as kindly suggested by Ott Toomet in [1])
> - Tell CRAN to use the modern compiler.
> 
> Obviously, the latter would be easiest. Is this is even possible? For a
> local installation I could set an environment variable[3], but how about
> doing this at CRAN?
> 
> Thanks,
> Mark
> 
> 
> [1] https://stat.ethz.ch/pipermail/r-package-devel/2016q3/000983.html
> [2] https://cran.r-project.org/bin/windows/Rtools/
> [3]
> https://cran.r-project.org/doc/manuals/r-release/R-admin.html#Customizing-package-compilation
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From mark.vanderloo at gmail.com  Thu Aug 25 13:14:59 2016
From: mark.vanderloo at gmail.com (Mark van der Loo)
Date: Thu, 25 Aug 2016 11:14:59 +0000
Subject: [R-pkg-devel] Compiler choice on CRAN (R-windows-oldrel)
In-Reply-To: <DF92271A-88E6-4596-91DA-67F1B4FDF571@gmail.com>
References: <CAOKDuOh=Q8FhAjcMsWOCuSXFUZtZa68NmbzCSb6XiV2n4YXJ8A@mail.gmail.com>
	<DF92271A-88E6-4596-91DA-67F1B4FDF571@gmail.com>
Message-ID: <CAOKDuOhb4nz=pM8dMAMz+OHcjdtmXARc8dtX22tTGrKPwJsk8A@mail.gmail.com>

Thank you Peter, good points.

Good to know for sure (or a.s.) that compiler specification at CRAN is not
an option. The 4th option is interesting as well. I may just do that.

Thanks again!
Mark









Op do 25 aug. 2016 om 12:17 schreef peter dalgaard <pdalgd at gmail.com>:

> I don't have hard info on ABI compatibility between gcc versions, but
> there have been issues in the past, at least with with gfortran.
>
> Now, many people/schools will have R-3.2.x installed, built with gcc
> 4.6.y. We cannot retroactively recompile their installation, nor expect
> them to install a new version built with gcc 4.9.z. This raises a specific
> question and a generic one:
>
> - specific: Will a package binary of gower built with 4.9 work with R
> built with 4.6?
> - generic: Is is sufficiently likely that a given package if compiled with
> a different compiler version that CRAN would consider having a mechanism to
> specify a particular compiler version?
>
> I suspect that the answer to the second question is no.
>
> Whether to condition on R >= 3.3 is a good idea largely depends on two
> things
>
> - the user base (would they upgrade R anyways?)
> - are there other packages that depends on gower? (CRAN keeps only the
> newest version of a package so requiring a newer R could affect users with
> less aggressive update policies. This already happened when the pbkrtest
> package update rendered the car package unloadable.)
>
> You do have a 4th option: conditionalize the _code_ on the R version, then
> remove old-style code when 3.2.x becomes history.
>
> -pd
>
> On 25 Aug 2016, at 11:20 , Mark van der Loo <mark.vanderloo at gmail.com>
> wrote:
>
> > Dear listers,
> >
> >
> > Compilation of my gower pkg fails on R-oldrel-windows. I am pretty sure
> > that this is because it uses gcc 4.6.3 which has limited support for
> OpenMP
> > (the errors are the same as I got on the old travis-ci build environment,
> > see my related question[1]).
> >
> > Now, according to the Rtools page[2], since R3.2.2 "Both the gcc 4.6.3
> > toolchain and a toolchain based on gcc 4.9.3 and mingw-w64 v3 are now
> > included." Not sure what that says about CRAN, but I'm hoping/guessing it
> > uses Rtools the same way as we do.
> >
> > So I guess I have the following options:
> >
> > - make my package depend on R>=3.3
> > - Alter my code (as kindly suggested by Ott Toomet in [1])
> > - Tell CRAN to use the modern compiler.
> >
> > Obviously, the latter would be easiest. Is this is even possible? For a
> > local installation I could set an environment variable[3], but how about
> > doing this at CRAN?
> >
> > Thanks,
> > Mark
> >
> >
> > [1] https://stat.ethz.ch/pipermail/r-package-devel/2016q3/000983.html
> > [2] https://cran.r-project.org/bin/windows/Rtools/
> > [3]
> >
> https://cran.r-project.org/doc/manuals/r-release/R-admin.html#Customizing-package-compilation
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-package-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-package-devel
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
>

	[[alternative HTML version deleted]]


From ligges at statistik.tu-dortmund.de  Thu Aug 25 14:44:31 2016
From: ligges at statistik.tu-dortmund.de (Uwe Ligges)
Date: Thu, 25 Aug 2016 14:44:31 +0200
Subject: [R-pkg-devel] Compiler choice on CRAN (R-windows-oldrel)
In-Reply-To: <CAOKDuOhb4nz=pM8dMAMz+OHcjdtmXARc8dtX22tTGrKPwJsk8A@mail.gmail.com>
References: <CAOKDuOh=Q8FhAjcMsWOCuSXFUZtZa68NmbzCSb6XiV2n4YXJ8A@mail.gmail.com>
	<DF92271A-88E6-4596-91DA-67F1B4FDF571@gmail.com>
	<CAOKDuOhb4nz=pM8dMAMz+OHcjdtmXARc8dtX22tTGrKPwJsk8A@mail.gmail.com>
Message-ID: <ada8b2d1-edea-ed13-e06e-f8f152f0f352@statistik.tu-dortmund.de>



On 25.08.2016 13:14, Mark van der Loo wrote:
> Thank you Peter, good points.
>
> Good to know for sure (or a.s.) that compiler specification at CRAN is not
> an option. The 4th option is interesting as well. I may just do that.
>
> Thanks again!
> Mark

For Windows, indeed, you are tight to gcc 4.6.3 for R < 3.3.0 and to gcc 
4.9.3 for R >= 3.3.0. If your package fails for gcc 4.6.3 we can live 
with it.

Same for the other platform CRAN runs checks for, typically there is one 
compiler (as specified on the CRAN web pages).

Best,
Uwe Ligges





>
>
>
>
>
>
>
>
> Op do 25 aug. 2016 om 12:17 schreef peter dalgaard <pdalgd at gmail.com>:
>
>> I don't have hard info on ABI compatibility between gcc versions, but
>> there have been issues in the past, at least with with gfortran.
>>
>> Now, many people/schools will have R-3.2.x installed, built with gcc
>> 4.6.y. We cannot retroactively recompile their installation, nor expect
>> them to install a new version built with gcc 4.9.z. This raises a specific
>> question and a generic one:
>>
>> - specific: Will a package binary of gower built with 4.9 work with R
>> built with 4.6?
>> - generic: Is is sufficiently likely that a given package if compiled with
>> a different compiler version that CRAN would consider having a mechanism to
>> specify a particular compiler version?
>>
>> I suspect that the answer to the second question is no.
>>
>> Whether to condition on R >= 3.3 is a good idea largely depends on two
>> things
>>
>> - the user base (would they upgrade R anyways?)
>> - are there other packages that depends on gower? (CRAN keeps only the
>> newest version of a package so requiring a newer R could affect users with
>> less aggressive update policies. This already happened when the pbkrtest
>> package update rendered the car package unloadable.)
>>
>> You do have a 4th option: conditionalize the _code_ on the R version, then
>> remove old-style code when 3.2.x becomes history.
>>
>> -pd
>>
>> On 25 Aug 2016, at 11:20 , Mark van der Loo <mark.vanderloo at gmail.com>
>> wrote:
>>
>>> Dear listers,
>>>
>>>
>>> Compilation of my gower pkg fails on R-oldrel-windows. I am pretty sure
>>> that this is because it uses gcc 4.6.3 which has limited support for
>> OpenMP
>>> (the errors are the same as I got on the old travis-ci build environment,
>>> see my related question[1]).
>>>
>>> Now, according to the Rtools page[2], since R3.2.2 "Both the gcc 4.6.3
>>> toolchain and a toolchain based on gcc 4.9.3 and mingw-w64 v3 are now
>>> included." Not sure what that says about CRAN, but I'm hoping/guessing it
>>> uses Rtools the same way as we do.
>>>
>>> So I guess I have the following options:
>>>
>>> - make my package depend on R>=3.3
>>> - Alter my code (as kindly suggested by Ott Toomet in [1])
>>> - Tell CRAN to use the modern compiler.
>>>
>>> Obviously, the latter would be easiest. Is this is even possible? For a
>>> local installation I could set an environment variable[3], but how about
>>> doing this at CRAN?
>>>
>>> Thanks,
>>> Mark
>>>
>>>
>>> [1] https://stat.ethz.ch/pipermail/r-package-devel/2016q3/000983.html
>>> [2] https://cran.r-project.org/bin/windows/Rtools/
>>> [3]
>>>
>> https://cran.r-project.org/doc/manuals/r-release/R-admin.html#Customizing-package-compilation
>>>
>>>       [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-package-devel at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>>
>> --
>> Peter Dalgaard, Professor,
>> Center for Statistics, Copenhagen Business School
>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>> Phone: (+45)38153501
>> Office: A 4.23
>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>
>>
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>


From lucasmation at gmail.com  Thu Aug 25 14:47:42 2016
From: lucasmation at gmail.com (Lucas Ferreira Mation)
Date: Thu, 25 Aug 2016 09:47:42 -0300
Subject: [R-pkg-devel] robust download function in R (similar to wget)?
Message-ID: <CAA+7z9GNCzoddZC_-+BrYT=jtRTebcdaB-dQ6aC8NsU5as4e3A@mail.gmail.com>

I am creating this package <https://github.com/lucasmation/microdadosBrasil>
that has to download data from some sources that are a bit
unstable/unreliable. The problem is described in this issue
<https://github.com/lucasmation/microdadosBrasil/issues/56>.

Is there a more "robust" download fucntion in R?
Something similar to wget, that would:

- where there are errors, repeat the download a few times before giving up,
preferably, using partial data on a file being downloaded from previous
attempts
- check the integrity of the downloaded file

As this has to be embedded in an R package, the solution needs to be OS
independent and require no installation of external software by the user.

regards
Lucas

	[[alternative HTML version deleted]]


From josh.m.ulrich at gmail.com  Thu Aug 25 15:24:30 2016
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Thu, 25 Aug 2016 08:24:30 -0500
Subject: [R-pkg-devel] robust download function in R (similar to wget)?
In-Reply-To: <CAA+7z9GNCzoddZC_-+BrYT=jtRTebcdaB-dQ6aC8NsU5as4e3A@mail.gmail.com>
References: <CAA+7z9GNCzoddZC_-+BrYT=jtRTebcdaB-dQ6aC8NsU5as4e3A@mail.gmail.com>
Message-ID: <CAPPM_gQ1V0SBYMCVH+5E1M48JHHcWb5aRj1r_sySKSBLwZB9Rg@mail.gmail.com>

Try downloader: https://cran.r-project.org/package=downloader

On Thu, Aug 25, 2016 at 7:47 AM, Lucas Ferreira Mation
<lucasmation at gmail.com> wrote:
> I am creating this package <https://github.com/lucasmation/microdadosBrasil>
> that has to download data from some sources that are a bit
> unstable/unreliable. The problem is described in this issue
> <https://github.com/lucasmation/microdadosBrasil/issues/56>.
>
> Is there a more "robust" download fucntion in R?
> Something similar to wget, that would:
>
> - where there are errors, repeat the download a few times before giving up,
> preferably, using partial data on a file being downloaded from previous
> attempts
> - check the integrity of the downloaded file
>
> As this has to be embedded in an R package, the solution needs to be OS
> independent and require no installation of external software by the user.
>
> regards
> Lucas
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel



-- 
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com
R/Finance 2016 | www.rinfinance.com


From mark.vanderloo at gmail.com  Thu Aug 25 15:42:26 2016
From: mark.vanderloo at gmail.com (Mark van der Loo)
Date: Thu, 25 Aug 2016 13:42:26 +0000
Subject: [R-pkg-devel] Compiler choice on CRAN (R-windows-oldrel)
In-Reply-To: <ada8b2d1-edea-ed13-e06e-f8f152f0f352@statistik.tu-dortmund.de>
References: <CAOKDuOh=Q8FhAjcMsWOCuSXFUZtZa68NmbzCSb6XiV2n4YXJ8A@mail.gmail.com>
	<DF92271A-88E6-4596-91DA-67F1B4FDF571@gmail.com>
	<CAOKDuOhb4nz=pM8dMAMz+OHcjdtmXARc8dtX22tTGrKPwJsk8A@mail.gmail.com>
	<ada8b2d1-edea-ed13-e06e-f8f152f0f352@statistik.tu-dortmund.de>
Message-ID: <CAOKDuOj9yLiQx53mM4Nb-JL0HQyRbDNgqtxfMrnGFamhWggwiA@mail.gmail.com>

Thanks Uwe. Very clear.

I'll post the solution I chose, so people can find it later. The problem is
that GCC <= 4.6.3 (at least) does not implement OpenMP reduction statements.

So now I do something like this:

#ifdef _OPENMP
#include <omp.h>
#endif

#ifdef __GNUC__
#if __GNUC__ <= 4 & __GNUC_MINOR__ <= 6
#else
#define HAS_REDUCTION
#endif
#endif

/* more code */

  #ifdef HAS_REDUCTION
  #pragma omp parallel for reduction(min:imin), reduction(max:imax)
  #endif
  for (int i=0; i<nx; i++){
    /*loop content*/
  }


This means that the loop does not get parallelized on systems compiling
with gcc <= 4.6.x

Best,
Mark






Op do 25 aug. 2016 om 14:44 schreef Uwe Ligges <
ligges at statistik.tu-dortmund.de>:

>
>
> On 25.08.2016 13:14, Mark van der Loo wrote:
> > Thank you Peter, good points.
> >
> > Good to know for sure (or a.s.) that compiler specification at CRAN is
> not
> > an option. The 4th option is interesting as well. I may just do that.
> >
> > Thanks again!
> > Mark
>
> For Windows, indeed, you are tight to gcc 4.6.3 for R < 3.3.0 and to gcc
> 4.9.3 for R >= 3.3.0. If your package fails for gcc 4.6.3 we can live
> with it.
>
> Same for the other platform CRAN runs checks for, typically there is one
> compiler (as specified on the CRAN web pages).
>
> Best,
> Uwe Ligges
>
>
>
>
>
> >
> >
> >
> >
> >
> >
> >
> >
> > Op do 25 aug. 2016 om 12:17 schreef peter dalgaard <pdalgd at gmail.com>:
> >
> >> I don't have hard info on ABI compatibility between gcc versions, but
> >> there have been issues in the past, at least with with gfortran.
> >>
> >> Now, many people/schools will have R-3.2.x installed, built with gcc
> >> 4.6.y. We cannot retroactively recompile their installation, nor expect
> >> them to install a new version built with gcc 4.9.z. This raises a
> specific
> >> question and a generic one:
> >>
> >> - specific: Will a package binary of gower built with 4.9 work with R
> >> built with 4.6?
> >> - generic: Is is sufficiently likely that a given package if compiled
> with
> >> a different compiler version that CRAN would consider having a
> mechanism to
> >> specify a particular compiler version?
> >>
> >> I suspect that the answer to the second question is no.
> >>
> >> Whether to condition on R >= 3.3 is a good idea largely depends on two
> >> things
> >>
> >> - the user base (would they upgrade R anyways?)
> >> - are there other packages that depends on gower? (CRAN keeps only the
> >> newest version of a package so requiring a newer R could affect users
> with
> >> less aggressive update policies. This already happened when the pbkrtest
> >> package update rendered the car package unloadable.)
> >>
> >> You do have a 4th option: conditionalize the _code_ on the R version,
> then
> >> remove old-style code when 3.2.x becomes history.
> >>
> >> -pd
> >>
> >> On 25 Aug 2016, at 11:20 , Mark van der Loo <mark.vanderloo at gmail.com>
> >> wrote:
> >>
> >>> Dear listers,
> >>>
> >>>
> >>> Compilation of my gower pkg fails on R-oldrel-windows. I am pretty sure
> >>> that this is because it uses gcc 4.6.3 which has limited support for
> >> OpenMP
> >>> (the errors are the same as I got on the old travis-ci build
> environment,
> >>> see my related question[1]).
> >>>
> >>> Now, according to the Rtools page[2], since R3.2.2 "Both the gcc 4.6.3
> >>> toolchain and a toolchain based on gcc 4.9.3 and mingw-w64 v3 are now
> >>> included." Not sure what that says about CRAN, but I'm hoping/guessing
> it
> >>> uses Rtools the same way as we do.
> >>>
> >>> So I guess I have the following options:
> >>>
> >>> - make my package depend on R>=3.3
> >>> - Alter my code (as kindly suggested by Ott Toomet in [1])
> >>> - Tell CRAN to use the modern compiler.
> >>>
> >>> Obviously, the latter would be easiest. Is this is even possible? For a
> >>> local installation I could set an environment variable[3], but how
> about
> >>> doing this at CRAN?
> >>>
> >>> Thanks,
> >>> Mark
> >>>
> >>>
> >>> [1] https://stat.ethz.ch/pipermail/r-package-devel/2016q3/000983.html
> >>> [2] https://cran.r-project.org/bin/windows/Rtools/
> >>> [3]
> >>>
> >>
> https://cran.r-project.org/doc/manuals/r-release/R-admin.html#Customizing-package-compilation
> >>>
> >>>       [[alternative HTML version deleted]]
> >>>
> >>> ______________________________________________
> >>> R-package-devel at r-project.org mailing list
> >>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
> >>
> >> --
> >> Peter Dalgaard, Professor,
> >> Center for Statistics, Copenhagen Business School
> >> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> >> Phone: (+45)38153501
> >> Office: A 4.23
> >> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> >>
> >>
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-package-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-package-devel
> >
>

	[[alternative HTML version deleted]]


From edd at debian.org  Thu Aug 25 15:56:58 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Thu, 25 Aug 2016 08:56:58 -0500
Subject: [R-pkg-devel] robust download function in R (similar to wget)?
In-Reply-To: <CAPPM_gQ1V0SBYMCVH+5E1M48JHHcWb5aRj1r_sySKSBLwZB9Rg@mail.gmail.com>
References: <CAA+7z9GNCzoddZC_-+BrYT=jtRTebcdaB-dQ6aC8NsU5as4e3A@mail.gmail.com>
	<CAPPM_gQ1V0SBYMCVH+5E1M48JHHcWb5aRj1r_sySKSBLwZB9Rg@mail.gmail.com>
Message-ID: <22462.63786.698390.231207@max.nulle.part>


On 25 August 2016 at 08:24, Joshua Ulrich wrote:
| Try downloader: https://cran.r-project.org/package=downloader

Also, if you really want wget / know how to parameterise wget you can
... just depend on _wget itself_ which you can

a) test for via Sys.which("wget")

b) select as an option for download.file() and hence all file access.

Dirk

| On Thu, Aug 25, 2016 at 7:47 AM, Lucas Ferreira Mation
| <lucasmation at gmail.com> wrote:
| > I am creating this package <https://github.com/lucasmation/microdadosBrasil>
| > that has to download data from some sources that are a bit
| > unstable/unreliable. The problem is described in this issue
| > <https://github.com/lucasmation/microdadosBrasil/issues/56>.
| >
| > Is there a more "robust" download fucntion in R?
| > Something similar to wget, that would:
| >
| > - where there are errors, repeat the download a few times before giving up,
| > preferably, using partial data on a file being downloaded from previous
| > attempts
| > - check the integrity of the downloaded file
| >
| > As this has to be embedded in an R package, the solution needs to be OS
| > independent and require no installation of external software by the user.
| >
| > regards
| > Lucas
| >
| >         [[alternative HTML version deleted]]
| >
| > ______________________________________________
| > R-package-devel at r-project.org mailing list
| > https://stat.ethz.ch/mailman/listinfo/r-package-devel
| 
| 
| 
| -- 
| Joshua Ulrich  |  about.me/joshuaulrich
| FOSS Trading  |  www.fosstrading.com
| R/Finance 2016 | www.rinfinance.com
| 
| ______________________________________________
| R-package-devel at r-project.org mailing list
| https://stat.ethz.ch/mailman/listinfo/r-package-devel

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From bob at rud.is  Thu Aug 25 16:33:05 2016
From: bob at rud.is (Bob Rudis)
Date: Thu, 25 Aug 2016 10:33:05 -0400
Subject: [R-pkg-devel] robust download function in R (similar to wget)?
In-Reply-To: <22462.63786.698390.231207@max.nulle.part>
References: <CAA+7z9GNCzoddZC_-+BrYT=jtRTebcdaB-dQ6aC8NsU5as4e3A@mail.gmail.com>
	<CAPPM_gQ1V0SBYMCVH+5E1M48JHHcWb5aRj1r_sySKSBLwZB9Rg@mail.gmail.com>
	<22462.63786.698390.231207@max.nulle.part>
Message-ID: <CAA-FpKWXrUHehRydYUpu5pH3UV+Ma+fQ38g7Gd5ZZO_7za-HmQ@mail.gmail.com>

libcurl (which the RCurl & curl packages are built on) do not inherently
have retry or resume partial capabilities, but those could be packaged up
into a "robustdownloader" package. There's no guarantee of wget or curl
binaries being on a system (especially Windows, even with an Rtools
installation, rly great platform there). Windows does have a PowerShell
`wget` alias for `Invoke-WebRequest` but it's woefully less powerful than
wget-proper and doesn't support the features you need and it relies on
PowerShell).

I'd suggest the creation of a separate package for robust downloading and
then relying on that or keep the solution you've got by PR #56.

On Thu, Aug 25, 2016 at 9:56 AM, Dirk Eddelbuettel <edd at debian.org> wrote:

>
> On 25 August 2016 at 08:24, Joshua Ulrich wrote:
> | Try downloader: https://cran.r-project.org/package=downloader
>
> Also, if you really want wget / know how to parameterise wget you can
> ... just depend on _wget itself_ which you can
>
> a) test for via Sys.which("wget")
>
> b) select as an option for download.file() and hence all file access.
>
> Dirk
>
> | On Thu, Aug 25, 2016 at 7:47 AM, Lucas Ferreira Mation
> | <lucasmation at gmail.com> wrote:
> | > I am creating this package <https://github.com/
> lucasmation/microdadosBrasil>
> | > that has to download data from some sources that are a bit
> | > unstable/unreliable. The problem is described in this issue
> | > <https://github.com/lucasmation/microdadosBrasil/issues/56>.
> | >
> | > Is there a more "robust" download fucntion in R?
> | > Something similar to wget, that would:
> | >
> | > - where there are errors, repeat the download a few times before
> giving up,
> | > preferably, using partial data on a file being downloaded from previous
> | > attempts
> | > - check the integrity of the downloaded file
> | >
> | > As this has to be embedded in an R package, the solution needs to be OS
> | > independent and require no installation of external software by the
> user.
> | >
> | > regards
> | > Lucas
> | >
> | >         [[alternative HTML version deleted]]
> | >
> | > ______________________________________________
> | > R-package-devel at r-project.org mailing list
> | > https://stat.ethz.ch/mailman/listinfo/r-package-devel
> |
> |
> |
> | --
> | Joshua Ulrich  |  about.me/joshuaulrich
> | FOSS Trading  |  www.fosstrading.com
> | R/Finance 2016 | www.rinfinance.com
> |
> | ______________________________________________
> | R-package-devel at r-project.org mailing list
> | https://stat.ethz.ch/mailman/listinfo/r-package-devel
>
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>

	[[alternative HTML version deleted]]


From jfox at mcmaster.ca  Fri Sep  2 17:42:46 2016
From: jfox at mcmaster.ca (Fox, John)
Date: Fri, 2 Sep 2016 15:42:46 +0000
Subject: [R-pkg-devel] multiple bibentry()s in CITATION
Message-ID: <ACD1644AA6C67E4FBD0C350625508EC836572E5C@FHSDB2D11-2.csu.mcmaster.ca>

Dear list members,

I've noticed that citation(package="pkg") generates both a text citation and a BiBTeX entry when the CITATION file contains a single call to bibentry() or citEntry(), but that only text citations are shown if there are multiple calls to bibentry() or citEntry(). 

Is this behaviour intentional? In my opinion, it's useful always to show the BiBTeX (although it's available through toBibtex(citation(package="pkg")) ).

The Writing R Extensions manual says, "A CITATION file will contain *calls* [my emphasis] to function bibentry."

Thanks,
 John

--------------------------------------
John Fox, Professor
McMaster University
Hamilton, Ontario, Canada
Web: socserv.mcmaster.ca/jfox


From csardi.gabor at gmail.com  Mon Sep 12 12:00:25 2016
From: csardi.gabor at gmail.com (=?UTF-8?B?R8OhYm9yIENzw6FyZGk=?=)
Date: Mon, 12 Sep 2016 11:00:25 +0100
Subject: [R-pkg-devel] Some windows binaries missing from PACKAGES, 3.3 & 3.4
Message-ID: <CABtg=K=BhJhaS2sHq0wK8dsfc3TEcTdHFy4VbiS_KyLwRY-tDg@mail.gmail.com>

Dear all,

I accidentally noticed that some windows binary packages are missing
from PACKAGES and PACKAGES.gz. I have seen it for 3.3 and 3.4, but not
for 3.2, although I haven't systematically checked it.

This includes packages that haven't been updated for a while, e.g. my
pkgconfig package seems to have a binary build for 3.3:
https://cran.r-project.org/web/packages/pkgconfig/

But it is missing from the PACKAGES file:
https://cran.r-project.org/bin/windows/contrib/3.3/PACKAGES

It looks like the PACKAGES files were simply truncated, and much of it
is missing.

FYI.
G?bor


From ligges at statistik.tu-dortmund.de  Mon Sep 12 13:18:16 2016
From: ligges at statistik.tu-dortmund.de (Uwe Ligges)
Date: Mon, 12 Sep 2016 13:18:16 +0200
Subject: [R-pkg-devel] Some windows binaries missing from PACKAGES,
	3.3 & 3.4
In-Reply-To: <CABtg=K=BhJhaS2sHq0wK8dsfc3TEcTdHFy4VbiS_KyLwRY-tDg@mail.gmail.com>
References: <CABtg=K=BhJhaS2sHq0wK8dsfc3TEcTdHFy4VbiS_KyLwRY-tDg@mail.gmail.com>
Message-ID: <9ff86a3a-6df2-f761-460a-56176d66e16f@statistik.tu-dortmund.de>

I guess they got corrupted during some system problems on winbuilder 
last night, new (complete) versions are already waiting to be synced by 
the CRAN master server (without manual interaction).

Best,
Uwe



On 12.09.2016 12:00, G?bor Cs?rdi wrote:
> Dear all,
>
> I accidentally noticed that some windows binary packages are missing
> from PACKAGES and PACKAGES.gz. I have seen it for 3.3 and 3.4, but not
> for 3.2, although I haven't systematically checked it.
>
> This includes packages that haven't been updated for a while, e.g. my
> pkgconfig package seems to have a binary build for 3.3:
> https://cran.r-project.org/web/packages/pkgconfig/
>
> But it is missing from the PACKAGES file:
> https://cran.r-project.org/bin/windows/contrib/3.3/PACKAGES
>
> It looks like the PACKAGES files were simply truncated, and much of it
> is missing.
>
> FYI.
> G?bor
>


From bgunter at comcast.net  Mon Sep 12 20:01:20 2016
From: bgunter at comcast.net (Bert Gunter)
Date: Mon, 12 Sep 2016 11:01:20 -0700
Subject: [R-pkg-devel] vignette issues
Message-ID: <54F75889-4D75-42A7-A583-539B843CD367@comcast.net>

Folks:

My stripless package passed all cran checks and built without issues.

But I received the following message from the Windows build:

---------
Error in loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]]) : 
there is no package called ?lme4'

Quitting from lines 108-111 (stripless_vignette.Rmd) 
Error: processing vignette 'stripless_vignette.Rmd' failed with diagnostics:
object 'hsb' not found
Execution halted
-------------

I do not have any reference to lme4 in my package or vignette. So is this the dependency from the faraway package, which my vignette uses (a couple of its datasets) and which does depend on lme4? If so, do I have to move faraway from my ?suggests? to ?imports? or ?depends, which I read as contrary to what the R extensions manual says. If so, this sounds like a bug to me ? why should I be responsible for such dependencies, which could be endless?

2nd: ?hsb? is in the faraway package.  I state specifically in the vignette that the package needs to be installed, and I have the following code in the vignette (using rmarkdown  and knitr):

```{r, echo = FALSE,message= FALSE }
if(!require(faraway, quietly = TRUE)){
 cat("\n, The **faraway** package must be installed to run",
 "subsequent examples in this vignette.\n",sep = "")
}
```
I don?t think I should install the package automatically, as this seems an inappropriate intrusion on the user.  I do make the compiled pdf version available in /docs. What is ?appropropriate behavior? for me to avoid these warnings?

Best,
Bert

Bert Gunter


From murdoch.duncan at gmail.com  Mon Sep 12 21:07:15 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Mon, 12 Sep 2016 15:07:15 -0400
Subject: [R-pkg-devel] vignette issues
In-Reply-To: <54F75889-4D75-42A7-A583-539B843CD367@comcast.net>
References: <54F75889-4D75-42A7-A583-539B843CD367@comcast.net>
Message-ID: <264f222e-586b-ccab-0493-95b9f93d46de@gmail.com>

On 12/09/2016 2:01 PM, Bert Gunter wrote:
> Folks:
>
> My stripless package passed all cran checks and built without issues.
>
> But I received the following message from the Windows build:
>
> ---------
> Error in loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]]) :
> there is no package called ?lme4'
>
> Quitting from lines 108-111 (stripless_vignette.Rmd)
> Error: processing vignette 'stripless_vignette.Rmd' failed with diagnostics:
> object 'hsb' not found
> Execution halted
> -------------
>
> I do not have any reference to lme4 in my package or vignette. So is this the dependency from the faraway package, which my vignette uses (a couple of its datasets) and which does depend on lme4? If so, do I have to move faraway from my ?suggests? to ?imports? or ?depends, which I read as contrary to what the R extensions manual says. If so, this sounds like a bug to me ? why should I be responsible for such dependencies, which could be endless?
>
> 2nd: ?hsb? is in the faraway package.  I state specifically in the vignette that the package needs to be installed, and I have the following code in the vignette (using rmarkdown  and knitr):
>
> ```{r, echo = FALSE,message= FALSE }
> if(!require(faraway, quietly = TRUE)){
>   cat("\n, The **faraway** package must be installed to run",
>   "subsequent examples in this vignette.\n",sep = "")
> }
> ```
> I don?t think I should install the package automatically, as this seems an inappropriate intrusion on the user.  I do make the compiled pdf version available in /docs. What is ?appropropriate behavior? for me to avoid these warnings?

I agree you shouldn't install anything automatically.  If your vignette 
depends on faraway and it isn't present, I think it's reasonable to fail 
at that point:  use "stop()" rather than just "cat()" for the message.  
Normally Win-builder should have all the mainstream packages installed, 
so this won't be a problem for them, though it might be one for some of 
your users:  but your message should make clear to them what to do to 
fix it.

The message "there is no package called ?lme4'"suggests things are not 
"normal" on Win-builder.  If this is running under R-devel, that happens 
from time to time.  For example, yesterday I introduced a change that 
contained some errors; it may have caused lme4 to fail (though I hadn't 
noticed that on my system, I wasn't looking for it).  This kind of 
problem is generally inconvenient but at least it is transient.

If you got that error on a version earlier than R-devel, then it's 
probably worth asking about it, perhaps first looking at the CRAN page 
for lme4 to see if there's information there about what might have gone 
wrong.

Duncan Murdoch


From mathurin.dorel at charite.de  Wed Sep 14 14:52:16 2016
From: mathurin.dorel at charite.de (Dorel, Mathurin)
Date: Wed, 14 Sep 2016 12:52:16 +0000
Subject: [R-pkg-devel] Validate CRAN package using a linked library
Message-ID: <0A43BCCEF86A904CBA3333608816C9D41F9FD3BD@s-mx14-mb0102.charite.de>

Hi,

I developed a package using the symbolic calculus C library ginac (http://www.ginac.de/<https://email.charite.de/owa/redir.aspx?REF=fSvQ3yE_XkDlPenE4F0MzYwBnO23griAuHvI5OZfSugms-XfndzTCAFodHRwOi8vd3d3LmdpbmFjLmRlLw..>).
I want to submit my package to CRAN, but the library is not installed on CRAN computers
so the C/C++ code does not compile on CRAN winbuilder (http://win-builder.r-project.org/upload.aspx<https://email.charite.de/owa/redir.aspx?REF=KMGXFEO-FDxPH92uJokI4LhZLoWd8IY1gdu9k7Wswrcms-XfndzTCAFodHRwOi8vd2luLWJ1aWxkZXIuci1wcm9qZWN0Lm9yZy91cGxvYWQuYXNweA..>).

What would be an appropriate solution? Should I ask the CRAN administrators to install ginac on
their test machines, or should I submit a source package in the style of BH which would provided
a compiled version of the ginac library that I could link to?

Best,
Mathurin Dorel

	[[alternative HTML version deleted]]


From bgunter at comcast.net  Wed Sep 14 21:37:40 2016
From: bgunter at comcast.net (Bert Gunter)
Date: Wed, 14 Sep 2016 12:37:40 -0700
Subject: [R-pkg-devel] Validate CRAN package using a linked library
In-Reply-To: <0A43BCCEF86A904CBA3333608816C9D41F9FD3BD@s-mx14-mb0102.charite.de>
References: <0A43BCCEF86A904CBA3333608816C9D41F9FD3BD@s-mx14-mb0102.charite.de>
Message-ID: <A20CA7A1-5F92-4B43-8502-189C89E7450F@comcast.net>

Are you aware of Ryacas or rSymPy ??  If not, does it really add anything to these? If so, feel free to ignore.

Cheers,
Bert


Bert Gunter

"The trouble with having an open mind is that people keep coming along and sticking things into it.?
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )



> On Sep 14, 2016, at 5:52 AM, Dorel, Mathurin <mathurin.dorel at charite.de> wrote:
> 
> Hi,
> 
> I developed a package using the symbolic calculus C library ginac (http://www.ginac.de/<https://email.charite.de/owa/redir.aspx?REF=fSvQ3yE_XkDlPenE4F0MzYwBnO23griAuHvI5OZfSugms-XfndzTCAFodHRwOi8vd3d3LmdpbmFjLmRlLw..>).
> I want to submit my package to CRAN, but the library is not installed on CRAN computers
> so the C/C++ code does not compile on CRAN winbuilder (http://win-builder.r-project.org/upload.aspx<https://email.charite.de/owa/redir.aspx?REF=KMGXFEO-FDxPH92uJokI4LhZLoWd8IY1gdu9k7Wswrcms-XfndzTCAFodHRwOi8vd2luLWJ1aWxkZXIuci1wcm9qZWN0Lm9yZy91cGxvYWQuYXNweA..>).
> 
> What would be an appropriate solution? Should I ask the CRAN administrators to install ginac on
> their test machines, or should I submit a source package in the style of BH which would provided
> a compiled version of the ginac library that I could link to?
> 
> Best,
> Mathurin Dorel
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From edd at debian.org  Wed Sep 14 22:02:27 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Wed, 14 Sep 2016 15:02:27 -0500
Subject: [R-pkg-devel] Validate CRAN package using a linked library
In-Reply-To: <0A43BCCEF86A904CBA3333608816C9D41F9FD3BD@s-mx14-mb0102.charite.de>
References: <0A43BCCEF86A904CBA3333608816C9D41F9FD3BD@s-mx14-mb0102.charite.de>
Message-ID: <22489.44243.6114.945101@max.nulle.part>


On 14 September 2016 at 12:52, Dorel, Mathurin wrote:
| I developed a package using the symbolic calculus C library ginac (http://www.ginac.de/<https://email.charite.de/owa/redir.aspx?REF=fSvQ3yE_XkDlPenE4F0MzYwBnO23griAuHvI5OZfSugms-XfndzTCAFodHRwOi8vd3d3LmdpbmFjLmRlLw..>).
| I want to submit my package to CRAN, but the library is not installed on CRAN computers
| so the C/C++ code does not compile on CRAN winbuilder (http://win-builder.r-project.org/upload.aspx<https://email.charite.de/owa/redir.aspx?REF=KMGXFEO-FDxPH92uJokI4LhZLoWd8IY1gdu9k7Wswrcms-XfndzTCAFodHRwOi8vd2luLWJ1aWxkZXIuci1wcm9qZWN0Lm9yZy91cGxvYWQuYXNweA..>).
| 
| What would be an appropriate solution? Should I ask the CRAN administrators to install ginac on
| their test machines, or should I submit a source package in the style of BH which would provided
| a compiled version of the ginac library that I could link to?

Note that BH is _headers-only_ and hence works by LinkingTo: (which despite
its name is NOT used for linking)  which covers "most" of the Boost
functionality (but eg not Boost graph used in RBGL on BioC).

In general the problem you describe is "hard". See Writing R Extensions, and
use of SystemRequirements, plus possibly use of configure to detect library
presence at the compile-time of you package.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From plummerm at iarc.fr  Wed Sep 14 22:38:22 2016
From: plummerm at iarc.fr (Martyn Plummer)
Date: Wed, 14 Sep 2016 20:38:22 +0000
Subject: [R-pkg-devel] Validate CRAN package using a linked library
In-Reply-To: <22489.44243.6114.945101@max.nulle.part>
References: <0A43BCCEF86A904CBA3333608816C9D41F9FD3BD@s-mx14-mb0102.charite.de>,
	<22489.44243.6114.945101@max.nulle.part>
Message-ID: <1473885442702.31721@iarc.fr>

Most people who want to interface to an external library embed the source code of the library in their R package. I see that ginac is a C++ library which creates additional problems. Only a few R packages  interface to an external C++ library (e.g. the interfaces to SYMPHONY, gdal,  QuantLib, and JAGS).

Windows is a problem because the toolchain used by R uses static linking to the C++ runtime. This has two  side effects:

1)  Both the R package and the external DLL must be built with the same toolchain. So you can't just ask CRAN to install the Windows binary from the ginac web site.

2) You can't throw an exception across DLL boundaries.

As Dirk says, this is hard.

Martyn
________________________________________
From: R-package-devel <r-package-devel-bounces at r-project.org> on behalf of Dirk Eddelbuettel <edd at debian.org>
Sent: 14 September 2016 22:02
To: Dorel, Mathurin
Cc: r-package-devel at r-project.org
Subject: Re: [R-pkg-devel] Validate CRAN package using a linked library

On 14 September 2016 at 12:52, Dorel, Mathurin wrote:
| I developed a package using the symbolic calculus C library ginac (http://www.ginac.de/<https://email.charite.de/owa/redir.aspx?REF=fSvQ3yE_XkDlPenE4F0MzYwBnO23griAuHvI5OZfSugms-XfndzTCAFodHRwOi8vd3d3LmdpbmFjLmRlLw..>).
| I want to submit my package to CRAN, but the library is not installed on CRAN computers
| so the C/C++ code does not compile on CRAN winbuilder (http://win-builder.r-project.org/upload.aspx<https://email.charite.de/owa/redir.aspx?REF=KMGXFEO-FDxPH92uJokI4LhZLoWd8IY1gdu9k7Wswrcms-XfndzTCAFodHRwOi8vd2luLWJ1aWxkZXIuci1wcm9qZWN0Lm9yZy91cGxvYWQuYXNweA..>).
|
| What would be an appropriate solution? Should I ask the CRAN administrators to install ginac on
| their test machines, or should I submit a source package in the style of BH which would provided
| a compiled version of the ginac library that I could link to?

Note that BH is _headers-only_ and hence works by LinkingTo: (which despite
its name is NOT used for linking)  which covers "most" of the Boost
functionality (but eg not Boost graph used in RBGL on BioC).

In general the problem you describe is "hard". See Writing R Extensions, and
use of SystemRequirements, plus possibly use of configure to detect library
presence at the compile-time of you package.

Dirk

--
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org

______________________________________________
R-package-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-package-devel
-----------------------------------------------------------------------
This message and its attachments are strictly confidenti...{{dropped:8}}


From edd at debian.org  Wed Sep 14 23:54:10 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Wed, 14 Sep 2016 16:54:10 -0500
Subject: [R-pkg-devel] Validate CRAN package using a linked library
In-Reply-To: <1473885442702.31721@iarc.fr>
References: <0A43BCCEF86A904CBA3333608816C9D41F9FD3BD@s-mx14-mb0102.charite.de>
	<22489.44243.6114.945101@max.nulle.part>
	<1473885442702.31721@iarc.fr>
Message-ID: <22489.50946.561123.906893@max.nulle.part>


On 14 September 2016 at 20:38, Martyn Plummer wrote:
| Most people who want to interface to an external library embed the source code of the library in their R package. I see that ginac is a C++ library which creates additional problems. Only a few R packages  interface to an external C++ library (e.g. the interfaces to SYMPHONY, gdal,  QuantLib, and JAGS).

No, there are lots more these days; look eg at many of the packages Jeroen
has added in the last year or two. 

I also have several few more, and/or helped a few.  nloptr is an example I
like because Jelmer and I generalized it to _either_ use embedded source
(slower build) or use the system library where present (ie Debian/Ubuntu).
 
| Windows is a problem because the toolchain used by R uses static linking to the C++ runtime. This has two  side effects:
| 
| 1)  Both the R package and the external DLL must be built with the same toolchain. So you can't just ask CRAN to install the Windows binary from the ginac web site.
| 
| 2) You can't throw an exception across DLL boundaries.
| 
| As Dirk says, this is hard.

Yes.  And getting libraries to Windows in a sane way is still an open
problem.  Some of us cheat by pulling prebuilt DLLs from, say, GitHub during
build time.  Works, but is more or less an open barn door waiting for trouble.

So in general: "it depends". But no shortcuts.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From paul.buerkner at gmail.com  Thu Sep 15 12:29:36 2016
From: paul.buerkner at gmail.com (Paul Buerkner)
Date: Thu, 15 Sep 2016 12:29:36 +0200
Subject: [R-pkg-devel] R CMD Check warning about vigentte dates
Message-ID: <CAGoSky-GYcsR_DcmEAX2hBp0b=tq4DxFfHu0MesOzL1D7pSd0w@mail.gmail.com>

Dear list,

I recently submitted a new version of my package (brms) to CRAN. It was
accepted by the CRAN team, but multiple operating systems (mainly unix) now
complain about

"Files in the 'vignettes' directory newer than all files in 'inst/doc':"

I have checked and all the files in "inst/doc" have a newer date than in
"vignettes". Also,
the error does not occur when running R CMD Check --as-cran locally or on
winbuilder.

I am very grateful for any ideas how to fix that.

- Paul

	[[alternative HTML version deleted]]


From mathurin.dorel at charite.de  Thu Sep 15 18:04:22 2016
From: mathurin.dorel at charite.de (Dorel, Mathurin)
Date: Thu, 15 Sep 2016 16:04:22 +0000
Subject: [R-pkg-devel] Validate CRAN package using a linked library
In-Reply-To: <22489.50946.561123.906893@max.nulle.part>
References: <0A43BCCEF86A904CBA3333608816C9D41F9FD3BD@s-mx14-mb0102.charite.de>
	<22489.44243.6114.945101@max.nulle.part>
	<1473885442702.31721@iarc.fr>,
	<22489.50946.561123.906893@max.nulle.part>
Message-ID: <0A43BCCEF86A904CBA3333608816C9D41F9FD65D@s-mx14-mb0102.charite.de>

Thanks for your replies,

I was not aware that LinkingTo was only a static linking. So no BH-like solution.
But how does the DLL pulling work then (I won't use it, it does not sound like a good practice but I'm curious)

I'll looked at nloptr, it looks like an elegant solution, I'll try that.

Mathurin

________________________________________
De : Dirk Eddelbuettel [edd at debian.org]
Envoy? : mercredi 14 septembre 2016 23:54
? : Martyn Plummer
Cc : Dirk Eddelbuettel; Dorel, Mathurin; r-package-devel at r-project.org
Objet : Re: [R-pkg-devel] Validate CRAN package using a linked library

On 14 September 2016 at 20:38, Martyn Plummer wrote:
| Most people who want to interface to an external library embed the source code of the library in their R package. I see that ginac is a C++ library which creates additional problems. Only a few R packages  interface to an external C++ library (e.g. the interfaces to SYMPHONY, gdal,  QuantLib, and JAGS).

No, there are lots more these days; look eg at many of the packages Jeroen
has added in the last year or two.

I also have several few more, and/or helped a few.  nloptr is an example I
like because Jelmer and I generalized it to _either_ use embedded source
(slower build) or use the system library where present (ie Debian/Ubuntu).

| Windows is a problem because the toolchain used by R uses static linking to the C++ runtime. This has two  side effects:
|
| 1)  Both the R package and the external DLL must be built with the same toolchain. So you can't just ask CRAN to install the Windows binary from the ginac web site.
|
| 2) You can't throw an exception across DLL boundaries.
|
| As Dirk says, this is hard.

Yes.  And getting libraries to Windows in a sane way is still an open
problem.  Some of us cheat by pulling prebuilt DLLs from, say, GitHub during
build time.  Works, but is more or less an open barn door waiting for trouble.

So in general: "it depends". But no shortcuts.

Dirk

--
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From murdoch.duncan at gmail.com  Thu Sep 15 19:00:11 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Thu, 15 Sep 2016 13:00:11 -0400
Subject: [R-pkg-devel] R CMD Check warning about vigentte dates
In-Reply-To: <CAGoSky-GYcsR_DcmEAX2hBp0b=tq4DxFfHu0MesOzL1D7pSd0w@mail.gmail.com>
References: <CAGoSky-GYcsR_DcmEAX2hBp0b=tq4DxFfHu0MesOzL1D7pSd0w@mail.gmail.com>
Message-ID: <df28f593-5456-9b0a-e7f7-628fa1fd9da2@gmail.com>

On 15/09/2016 6:29 AM, Paul Buerkner wrote:
> Dear list,
>
> I recently submitted a new version of my package (brms) to CRAN. It was
> accepted by the CRAN team, but multiple operating systems (mainly unix) now
> complain about
>
> "Files in the 'vignettes' directory newer than all files in 'inst/doc':"
>
> I have checked and all the files in "inst/doc" have a newer date than in
> "vignettes". Also,
> the error does not occur when running R CMD Check --as-cran locally or on
> winbuilder.
>
> I am very grateful for any ideas how to fix that.

This is a new test in R-devel, and it's still undergoing some 
refinement.  It has issued some false warnings when there are problems 
reading the modification time of a file -- not all files have valid times.

I think those are now fixed (as of revision 71254); if you're seeing 
problems using a newer version, I'd appreciate seeing a copy of the 
tarball that causes them.

Duncan Murdoch


From williamcmay at live.com  Fri Sep 16 22:53:09 2016
From: williamcmay at live.com (William May)
Date: Fri, 16 Sep 2016 20:53:09 +0000
Subject: [R-pkg-devel] automated testing for an SSH tunneling package?
Message-ID: <BY2PR13MB0823E756DE088847830CDA89CEF30@BY2PR13MB0823.namprd13.prod.outlook.com>

I wrote an SSH tunneling package (it's on Github here<https://github.com/wmay/tunnelr>). It runs on Mac, Linux, and Windows, at least in the environments I've been able to test. I would like to get it on CRAN if it's possible, but writing automated tests for this package is nightmarish.

Typically, connecting to a server through the package requires manually entering a password, which I don't think I can automate. (I don't want to allow the package to enter passwords itself for security reasons.) An alternative is to set up public and private rsa keys so that no password is required. That option also gets complicated.

I could imagine setting up a server solely for testing this, with a user that has no password, though that sounds scary. But then what happens if the server goes down?

A second challenge applies specifically to Windows, which is the platform I'm most concerned about. I'm relying on PuTTY for SSH in Windows. Is there a way for that to be tested on CRAN?

Should I even worry about CRAN testing for this? Will CRAN accept this package without tests?

And I was surprised that an SSH tunneling package didn't already exist (I found it really convenient to control SSH tunneling from within R). Is there another reason it doesn't exist yet, or is it just the testing challenges?

- Will

	[[alternative HTML version deleted]]


From bob at rud.is  Sat Sep 17 00:25:28 2016
From: bob at rud.is (Bob Rudis)
Date: Fri, 16 Sep 2016 18:25:28 -0400
Subject: [R-pkg-devel] automated testing for an SSH tunneling package?
In-Reply-To: <BY2PR13MB0823E756DE088847830CDA89CEF30@BY2PR13MB0823.namprd13.prod.outlook.com>
References: <BY2PR13MB0823E756DE088847830CDA89CEF30@BY2PR13MB0823.namprd13.prod.outlook.com>
Message-ID: <CAA-FpKXPZfiUpwfdgbYJ-KMo2f2hnUC7X-muGefuLKpoWFMPeA@mail.gmail.com>

I'm not sure where Jeroen is on this - https://github.com/jeroenooms/ssh -
but it might make more sense to dovetail off of it than rely on binaries
being available on systems. That's doable, but (IMO) fraught with peril.

On Fri, Sep 16, 2016 at 4:53 PM, William May <williamcmay at live.com> wrote:

> I wrote an SSH tunneling package (it's on Github here<
> https://github.com/wmay/tunnelr>). It runs on Mac, Linux, and Windows, at
> least in the environments I've been able to test. I would like to get it on
> CRAN if it's possible, but writing automated tests for this package is
> nightmarish.
>
> Typically, connecting to a server through the package requires manually
> entering a password, which I don't think I can automate. (I don't want to
> allow the package to enter passwords itself for security reasons.) An
> alternative is to set up public and private rsa keys so that no password is
> required. That option also gets complicated.
>
> I could imagine setting up a server solely for testing this, with a user
> that has no password, though that sounds scary. But then what happens if
> the server goes down?
>
> A second challenge applies specifically to Windows, which is the platform
> I'm most concerned about. I'm relying on PuTTY for SSH in Windows. Is there
> a way for that to be tested on CRAN?
>
> Should I even worry about CRAN testing for this? Will CRAN accept this
> package without tests?
>
> And I was surprised that an SSH tunneling package didn't already exist (I
> found it really convenient to control SSH tunneling from within R). Is
> there another reason it doesn't exist yet, or is it just the testing
> challenges?
>
> - Will
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>

	[[alternative HTML version deleted]]


From jlisic at gmail.com  Sat Sep 17 01:52:36 2016
From: jlisic at gmail.com (Jonathan Lisic)
Date: Fri, 16 Sep 2016 19:52:36 -0400
Subject: [R-pkg-devel] automated testing for an SSH tunneling package?
In-Reply-To: <CAA-FpKXPZfiUpwfdgbYJ-KMo2f2hnUC7X-muGefuLKpoWFMPeA@mail.gmail.com>
References: <BY2PR13MB0823E756DE088847830CDA89CEF30@BY2PR13MB0823.namprd13.prod.outlook.com>
	<CAA-FpKXPZfiUpwfdgbYJ-KMo2f2hnUC7X-muGefuLKpoWFMPeA@mail.gmail.com>
Message-ID: <2D103083-52FA-4E45-88B2-D64F9A6A4C73@gmail.com>

I don?t think there is any specific requirement for automated tests on CRAN; there 
is also no requirement on CRAN to have a windows version.  The current 
https://cran.r-project.org/web/packages/ssh.utils/index.html
package certainly does not.  That being said, I?m always a fan of inclusion, and 
would love to see some R utilities on windows for ssh.

The official CRAN policy is:

Package authors should make all reasonable efforts to provide cross-platform portable 
code. Packages will not normally be accepted that do not run on at least two of the major 
R platforms. Cases for Windows-only packages will be considered, but CRAN may not be 
the most appropriate place to host them.


I would also agree that getting Jeroen?s package up and running would be great, 
but is admittedly a much steeper hill to climb. 

Cheers,

Jonathan 


> On Sep 16, 2016, at 6:25 PM, Bob Rudis <bob at rud.is> wrote:
> 
> I'm not sure where Jeroen is on this - https://github.com/jeroenooms/ssh -
> but it might make more sense to dovetail off of it than rely on binaries
> being available on systems. That's doable, but (IMO) fraught with peril.
> 
> On Fri, Sep 16, 2016 at 4:53 PM, William May <williamcmay at live.com> wrote:
> 
>> I wrote an SSH tunneling package (it's on Github here<
>> https://github.com/wmay/tunnelr>). It runs on Mac, Linux, and Windows, at
>> least in the environments I've been able to test. I would like to get it on
>> CRAN if it's possible, but writing automated tests for this package is
>> nightmarish.
>> 
>> Typically, connecting to a server through the package requires manually
>> entering a password, which I don't think I can automate. (I don't want to
>> allow the package to enter passwords itself for security reasons.) An
>> alternative is to set up public and private rsa keys so that no password is
>> required. That option also gets complicated.
>> 
>> I could imagine setting up a server solely for testing this, with a user
>> that has no password, though that sounds scary. But then what happens if
>> the server goes down?
>> 
>> A second challenge applies specifically to Windows, which is the platform
>> I'm most concerned about. I'm relying on PuTTY for SSH in Windows. Is there
>> a way for that to be tested on CRAN?
>> 
>> Should I even worry about CRAN testing for this? Will CRAN accept this
>> package without tests?
>> 
>> And I was surprised that an SSH tunneling package didn't already exist (I
>> found it really convenient to control SSH tunneling from within R). Is
>> there another reason it doesn't exist yet, or is it just the testing
>> challenges?
>> 
>> - Will
>> 
>>        [[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-package-devel at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From berryboessenkool at hotmail.com  Tue Sep 20 16:22:19 2016
From: berryboessenkool at hotmail.com (Berry Boessenkool)
Date: Tue, 20 Sep 2016 14:22:19 +0000
Subject: [R-pkg-devel] doc url to vignette
Message-ID: <DB5PR0401MB19905F1EED03C60CB43D107AD5F70@DB5PR0401MB1990.eurprd04.prod.outlook.com>


How can I link to a certain page on CRAN without getting flagged for non-canonical CRAN URL forms?

I currently use \url{https://cran.r-project.org/web/packages/roxygen2/vignettes/rd.html}



Found the following (possibly) invalid URLs:
  URL: https://cran.r-project.org/web/packages/roxygen2/vignettes/rd.html
    From: man/createDoc.Rd
    Status: 200
    Message: OK
    CRAN URL not in canonical form


  The canonical URL of the CRAN page for a package is
    https://CRAN.R-project.org/package=pkgname



Thanks ahead,

Berry

---------------------------------

	[[alternative HTML version deleted]]


From ligges at statistik.tu-dortmund.de  Tue Sep 20 17:36:43 2016
From: ligges at statistik.tu-dortmund.de (Uwe Ligges)
Date: Tue, 20 Sep 2016 17:36:43 +0200
Subject: [R-pkg-devel] doc url to vignette
In-Reply-To: <DB5PR0401MB19905F1EED03C60CB43D107AD5F70@DB5PR0401MB1990.eurprd04.prod.outlook.com>
References: <DB5PR0401MB19905F1EED03C60CB43D107AD5F70@DB5PR0401MB1990.eurprd04.prod.outlook.com>
Message-ID: <225956e2-c7b6-5b9c-b32d-2d2ec5b3ec87@statistik.tu-dortmund.de>



On 20.09.2016 16:22, Berry Boessenkool wrote:
>
> How can I link to a certain page on CRAN without getting flagged for non-canonical CRAN URL forms?
>
> I currently use \url{https://cran.r-project.org/web/packages/roxygen2/vignettes/rd.html}
>
>
>
> Found the following (possibly) invalid URLs:
>   URL: https://cran.r-project.org/web/packages/roxygen2/vignettes/rd.html
>     From: man/createDoc.Rd
>     Status: 200
>     Message: OK
>     CRAN URL not in canonical form
>
>
>   The canonical URL of the CRAN page for a package is
>     https://CRAN.R-project.org/package=pkgname


In case you want to link to the web version of the vignette, you cannot, 
make it better than above, as far as I can see. Just say so in your 
submission comment.

Best,
Uwe Ligges

>
>
> Thanks ahead,
>
> Berry
>
> ---------------------------------
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>


From goran.brostrom at umu.se  Wed Sep 21 13:17:06 2016
From: goran.brostrom at umu.se (=?UTF-8?Q?G=c3=b6ran_Brostr=c3=b6m?=)
Date: Wed, 21 Sep 2016 13:17:06 +0200
Subject: [R-pkg-devel] Mis-spelled word with winbuilder
Message-ID: <3ff34898-6bd2-162e-1052-638c65f763df@umu.se>

I'm checking my package with winbuilder and get one NOTE:

* checking CRAN incoming feasibility ... NOTE
Maintainer: 'G?ran Brostr?m <goran.brostrom at umu.se>'

Possibly mis-spelled words in DESCRIPTION:
   piecewise (9:43)

How should it be spelled? I have googled 'piecewise' and it seems to be 
widely used with that spelling.

Thanks, G?ran


From murdoch.duncan at gmail.com  Wed Sep 21 13:34:04 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Wed, 21 Sep 2016 07:34:04 -0400
Subject: [R-pkg-devel] Mis-spelled word with winbuilder
In-Reply-To: <3ff34898-6bd2-162e-1052-638c65f763df@umu.se>
References: <3ff34898-6bd2-162e-1052-638c65f763df@umu.se>
Message-ID: <8378cbf1-0ac3-a893-78e0-172a909885ed@gmail.com>

On 21/09/2016 7:17 AM, G?ran Brostr?m wrote:
> I'm checking my package with winbuilder and get one NOTE:
>
> * checking CRAN incoming feasibility ... NOTE
> Maintainer: 'G?ran Brostr?m <goran.brostrom at umu.se>'
>
> Possibly mis-spelled words in DESCRIPTION:
>    piecewise (9:43)
>
> How should it be spelled? I have googled 'piecewise' and it seems to be
> widely used with that spelling.

That's fine, it's just that it's not in Win-builder's reference 
dictionary.  There are quite a few technical words missing there, so we 
get a number of false positives. You'll also see reports about proper names.

CRAN asks that software names be quoted (in single quotes).  In 
particular, R package names should be quoted.

Proper names of people and things other than software do not need to be 
quoted.

Duncan Murdoch


From S.Ellison at LGCGroup.com  Wed Sep 21 13:57:20 2016
From: S.Ellison at LGCGroup.com (S Ellison)
Date: Wed, 21 Sep 2016 12:57:20 +0100
Subject: [R-pkg-devel] doc url to vignette
In-Reply-To: <DB5PR0401MB19905F1EED03C60CB43D107AD5F70@DB5PR0401MB1990.eurprd04.prod.outlook.com>
References: <DB5PR0401MB19905F1EED03C60CB43D107AD5F70@DB5PR0401MB1990.eurprd04.prod.outlook.com>
Message-ID: <1A8C1289955EF649A09086A153E2672403FE6774B7@GBTEDVPEXCMB04.corp.lgc-group.com>

> How can I link to a certain page on CRAN without getting flagged for non-
> canonical CRAN URL forms?

In the interests of avoiding something that may change in future if CRAN is restructured, would it be sufficient to include the link to the vignette on the project home page you put in the DESCRIPTION file URL?

Or perhaps <heresy>you could sidestep cran URL checking by using a bit.ly link pointed at your vignette, or similar redirect</heresy>... that might even be easier to maintain if you move your vignette.

Steve Ellison



*******************************************************************
This email and any attachments are confidential. Any use...{{dropped:8}}


From murdoch.duncan at gmail.com  Wed Sep 21 14:20:50 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Wed, 21 Sep 2016 08:20:50 -0400
Subject: [R-pkg-devel] doc url to vignette
In-Reply-To: <1A8C1289955EF649A09086A153E2672403FE6774B7@GBTEDVPEXCMB04.corp.lgc-group.com>
References: <DB5PR0401MB19905F1EED03C60CB43D107AD5F70@DB5PR0401MB1990.eurprd04.prod.outlook.com>
	<1A8C1289955EF649A09086A153E2672403FE6774B7@GBTEDVPEXCMB04.corp.lgc-group.com>
Message-ID: <c74b78f5-9c43-d00e-f6fe-de9a7b6b1b82@gmail.com>

On 21/09/2016 7:57 AM, S Ellison wrote:
> > How can I link to a certain page on CRAN without getting flagged for non-
> > canonical CRAN URL forms?
>
> In the interests of avoiding something that may change in future if CRAN is restructured, would it be sufficient to include the link to the vignette on the project home page you put in the DESCRIPTION file URL?
>
> Or perhaps <heresy>you could sidestep cran URL checking by using a bit.ly link pointed at your vignette, or similar redirect</heresy>... that might even be easier to maintain if you move your vignette.

In other words, try to mislead CRAN.  If you are caught doing that, you 
won't get much sympathy in the future.

Why not just link to the copy of the vignette that is distributed with 
the package?  That will work even if your Internet connection doesn't.  
Just use a relative URL.  To link from vignette1.html to vignette2.html, 
use URL "vignette2.html".  They'll be installed in the same directory 
when the package is installed, so the relative link will work.

Duncan Murdoch


From ligges at statistik.tu-dortmund.de  Wed Sep 21 15:00:15 2016
From: ligges at statistik.tu-dortmund.de (Uwe Ligges)
Date: Wed, 21 Sep 2016 15:00:15 +0200
Subject: [R-pkg-devel] doc url to vignette
In-Reply-To: <c74b78f5-9c43-d00e-f6fe-de9a7b6b1b82@gmail.com>
References: <DB5PR0401MB19905F1EED03C60CB43D107AD5F70@DB5PR0401MB1990.eurprd04.prod.outlook.com>
	<1A8C1289955EF649A09086A153E2672403FE6774B7@GBTEDVPEXCMB04.corp.lgc-group.com>
	<c74b78f5-9c43-d00e-f6fe-de9a7b6b1b82@gmail.com>
Message-ID: <cc564b50-6642-7b9f-4ae1-38c8f54d670e@statistik.tu-dortmund.de>

Update:

The https://cran.r-project.org/package=NAME/.... syntax works now and is 
accepted.

Best,
Uwe Ligges



On 21.09.2016 14:20, Duncan Murdoch wrote:
> On 21/09/2016 7:57 AM, S Ellison wrote:
>> > How can I link to a certain page on CRAN without getting flagged for
>> non-
>> > canonical CRAN URL forms?
>>
>> In the interests of avoiding something that may change in future if
>> CRAN is restructured, would it be sufficient to include the link to
>> the vignette on the project home page you put in the DESCRIPTION file
>> URL?
>>
>> Or perhaps <heresy>you could sidestep cran URL checking by using a
>> bit.ly link pointed at your vignette, or similar redirect</heresy>...
>> that might even be easier to maintain if you move your vignette.
>
> In other words, try to mislead CRAN.  If you are caught doing that, you
> won't get much sympathy in the future.
>
> Why not just link to the copy of the vignette that is distributed with
> the package?  That will work even if your Internet connection doesn't.
> Just use a relative URL.  To link from vignette1.html to vignette2.html,
> use URL "vignette2.html".  They'll be installed in the same directory
> when the package is installed, so the relative link will work.
>
> Duncan Murdoch
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


From berryboessenkool at hotmail.com  Wed Sep 21 16:40:38 2016
From: berryboessenkool at hotmail.com (Berry Boessenkool)
Date: Wed, 21 Sep 2016 14:40:38 +0000
Subject: [R-pkg-devel] doc url to vignette
In-Reply-To: <cc564b50-6642-7b9f-4ae1-38c8f54d670e@statistik.tu-dortmund.de>
References: <DB5PR0401MB19905F1EED03C60CB43D107AD5F70@DB5PR0401MB1990.eurprd04.prod.outlook.com>
	<1A8C1289955EF649A09086A153E2672403FE6774B7@GBTEDVPEXCMB04.corp.lgc-group.com>
	<c74b78f5-9c43-d00e-f6fe-de9a7b6b1b82@gmail.com>,
	<cc564b50-6642-7b9f-4ae1-38c8f54d670e@statistik.tu-dortmund.de>
Message-ID: <DB5PR0401MB19903FBC8884DBF68DD04DD6D5F60@DB5PR0401MB1990.eurprd04.prod.outlook.com>


Thanks to all writers.

I'll sum up so people reading this later (e.g. me) find everything quickly.

TOPIC:

Link from Rd manuals to other vignettes and documentation via URL.



You can now reference to a vignette in another package (thanks, Uwe!) e.g.:

\url{https://cran.r-project.org/package=roxygen2/vignettes/rd.html}


If the vignette is in your own package, you can use the relative link that will also work off-line.
> To link from vignette1.html to vignette2.html,
> use URL "vignette2.html".  They'll be installed in the same directory


You should not use bit.ly links etc to circumvent CRAN checks.

If all else fails, add a note to the submission comment and hope the CRAN team accepts it.


Regards,
Berry

-------------------------------------





________________________________
From: Uwe Ligges <ligges at statistik.tu-dortmund.de>
Sent: Wednesday, September 21, 2016 3:00 PM
To: Duncan Murdoch; S Ellison; Berry Boessenkool; R package devel
Subject: Re: [R-pkg-devel] doc url to vignette

Update:

The https://cran.r-project.org/package=NAME/.... syntax works now and is
accepted.

Best,
Uwe Ligges



On 21.09.2016 14:20, Duncan Murdoch wrote:
> On 21/09/2016 7:57 AM, S Ellison wrote:
>> > How can I link to a certain page on CRAN without getting flagged for
>> non-
>> > canonical CRAN URL forms?
>>
>> In the interests of avoiding something that may change in future if
>> CRAN is restructured, would it be sufficient to include the link to
>> the vignette on the project home page you put in the DESCRIPTION file
>> URL?
>>
>> Or perhaps <heresy>you could sidestep cran URL checking by using a
>> bit.ly link pointed at your vignette, or similar redirect</heresy>...
>> that might even be easier to maintain if you move your vignette.
>
> In other words, try to mislead CRAN.  If you are caught doing that, you
> won't get much sympathy in the future.
>
> Why not just link to the copy of the vignette that is distributed with
> the package?  That will work even if your Internet connection doesn't.
> Just use a relative URL.  To link from vignette1.html to vignette2.html,
> use URL "vignette2.html".  They'll be installed in the same directory
> when the package is installed, so the relative link will work.
>
> Duncan Murdoch
>
> ______________________________________________


How can I link to a certain page on CRAN without getting flagged for non-canonical CRAN URL forms?
I currently use \url{https://cran.r-project.org/web/packages/roxygen2/vignettes/rd.html}

Found the following (possibly) invalid URLs:
  URL: https://cran.r-project.org/web/packages/roxygen2/vignettes/rd.html
    From: man/createDoc.Rd
    Status: 200
    Message: OK
    CRAN URL not in canonical form

  The canonical URL of the CRAN page for a package is
    https://CRAN.R-project.org/package=pkgname

Thanks ahead,

Berry

> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel

	[[alternative HTML version deleted]]


From S.Ellison at LGCGroup.com  Thu Sep 22 23:28:29 2016
From: S.Ellison at LGCGroup.com (S Ellison)
Date: Thu, 22 Sep 2016 22:28:29 +0100
Subject: [R-pkg-devel] Mis-spelled word with winbuilder
In-Reply-To: <3ff34898-6bd2-162e-1052-638c65f763df@umu.se>
References: <3ff34898-6bd2-162e-1052-638c65f763df@umu.se>
Message-ID: <1A8C1289955EF649A09086A153E2672403FE7A2E7A@GBTEDVPEXCMB04.corp.lgc-group.com>

> I have googled 'piecewise' and it seems to be
> widely used with that spelling.

... because that is the only correct spelling of 'piecewise' in English...

Butu I see Duncan Murdoch has explained why it was flagged; not all English words appear in all English dictionaries.

In fact, not all English words appear in _any_ English dictionary. Even the OED does not claim to have much more than two thirds (175k out of at least 250k) (https://en.oxforddictionaries.com/explore/how-many-words-are-there-in-the-english-language ) and that is not even a fifth of the Global Language Monitor estimate (http://www.languagemonitor.com/number-of-words/number-of-words-in-the-english-language-1008879/). 


Steve E


*******************************************************************
This email and any attachments are confidential. Any use...{{dropped:8}}


From analekta at gmail.com  Fri Sep 30 15:46:18 2016
From: analekta at gmail.com (Costas Tsirogiannis)
Date: Fri, 30 Sep 2016 15:46:18 +0200
Subject: [R-pkg-devel] C++11: which is currently the most portable option?
Message-ID: <CAEBhQo1151Vf37rJ9bLOstqSh-uUmX3SeaCYvHd4L9J5v1vfXQ@mail.gmail.com>

Greetings,

I am developing a package that uses C++ code, and I want to use some
classes from the C++11 standard. In fact I just want to use std::thread
which is supported even by the old weird -std=c++0x option. Since the
support of the C++11 standard increases more and more as time goes by,  I
would like to ask what is the best flag that I should use in the Makevars
file so as to make my package portable with as many as possible available
compilers? Should it be std=c++0x or std=c++11, or some other option ?

thanks,

--Constantinos

	[[alternative HTML version deleted]]


From cdetermanjr at gmail.com  Fri Sep 30 16:16:48 2016
From: cdetermanjr at gmail.com (Charles Determan)
Date: Fri, 30 Sep 2016 09:16:48 -0500
Subject: [R-pkg-devel] C++11: which is currently the most portable
	option?
In-Reply-To: <CAEBhQo1151Vf37rJ9bLOstqSh-uUmX3SeaCYvHd4L9J5v1vfXQ@mail.gmail.com>
References: <CAEBhQo1151Vf37rJ9bLOstqSh-uUmX3SeaCYvHd4L9J5v1vfXQ@mail.gmail.com>
Message-ID: <CAKxd1KNeX5BXj3-prPrCAE1Ey-O5B3wpGjXCxhLeAKiJC8pxaw@mail.gmail.com>

Hi Constantinos,

I believe you could just put the following in your DESCRIPTION file so the
R version takes care of the C++11 flag.

SystemRequirements: C++11

Regards,
Charles


On Fri, Sep 30, 2016 at 8:46 AM, Costas Tsirogiannis <analekta at gmail.com>
wrote:

> Greetings,
>
> I am developing a package that uses C++ code, and I want to use some
> classes from the C++11 standard. In fact I just want to use std::thread
> which is supported even by the old weird -std=c++0x option. Since the
> support of the C++11 standard increases more and more as time goes by,  I
> would like to ask what is the best flag that I should use in the Makevars
> file so as to make my package portable with as many as possible available
> compilers? Should it be std=c++0x or std=c++11, or some other option ?
>
> thanks,
>
> --Constantinos
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel
>

	[[alternative HTML version deleted]]


From edd at debian.org  Fri Sep 30 16:50:17 2016
From: edd at debian.org (Dirk Eddelbuettel)
Date: Fri, 30 Sep 2016 09:50:17 -0500
Subject: [R-pkg-devel] C++11: which is currently the most
	portable	option?
In-Reply-To: <CAKxd1KNeX5BXj3-prPrCAE1Ey-O5B3wpGjXCxhLeAKiJC8pxaw@mail.gmail.com>
References: <CAEBhQo1151Vf37rJ9bLOstqSh-uUmX3SeaCYvHd4L9J5v1vfXQ@mail.gmail.com>
	<CAKxd1KNeX5BXj3-prPrCAE1Ey-O5B3wpGjXCxhLeAKiJC8pxaw@mail.gmail.com>
Message-ID: <22510.31657.152204.955253@max.nulle.part>


On 30 September 2016 at 09:16, Charles Determan wrote:
| I believe you could just put the following in your DESCRIPTION file so the
| R version takes care of the C++11 flag.
| 
| SystemRequirements: C++11

This is _one_ of _two_ equivalent choices, the other (which is my preference)
is to add this ti src/Makevars{,.win}

## We want C++11 
CXX_STD = CXX11

In _either case_ R will know what to do and pick -std=c++0x or -std=c++11
depending on what it saw during its compilation.  See its etc/Makeconf.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From Cameron.Ortega at dnvgl.com  Fri Sep 30 18:24:51 2016
From: Cameron.Ortega at dnvgl.com (Ortega, Cameron)
Date: Fri, 30 Sep 2016 16:24:51 +0000
Subject: [R-pkg-devel] R Packages Never Finish Check
Message-ID: <HE1PR0201MB14660C3399141B12D3BB16939FC10@HE1PR0201MB1466.eurprd02.prod.outlook.com>

Hi,

When I attempt to run Check on any package, the "checking installed package size..." Check never finishes. This is across multiple versions of R and RStudio, with every package I have attempted to run, including packages confirmed to pass Check quickly and with no issues for others.

I have attempted to run Check using the following methods:
-Check under the Build tab of RStudio
-Running devtools::check() from the RStudio console
-Running R CMD check from the command line

Has anyone experienced Check failing to progress on any step, or have any ideas about what I should try next?


This is my session info:
R version 3.3.1 (2016-06-21)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 7 x64 (build 7601) Service Pack 1

locale:
[1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United States.1252
[3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C
[5] LC_TIME=English_United States.1252

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

loaded via a namespace (and not attached):
[1] tools_3.3.1







This is a print out from the RStudio Check:
==> devtools::check()

Updating linkedata documentation
Loading linkedata
Writing NAMESPACE
Writing linkedata.Rd
Writing linke.Rd
Setting env vars ---------------------------------------------------------------
CFLAGS  : -Wall -pedantic
CXXFLAGS: -Wall -pedantic
Building linkedata -------------------------------------------------------------
"C:/PROGRA~1/R/R-33~1.1/bin/x64/R" --no-site-file --no-environ --no-save  \
  --no-restore --quiet CMD build  \
  "C:\Users\caort\Documents\Subversion\rcode\lib\src\linkedata"  \
  --no-resave-data --no-manual

* checking for file 'C:\Users\caort\Documents\Subversion\rcode\lib\src\linkedata/DESCRIPTION' ... OK
* preparing 'linkedata':
* checking DESCRIPTION meta-information ... OK
* checking for LF line-endings in source and make files
* checking for empty or unneeded directories
Removed empty directory 'linkedata/zipdta'
* looking to see if a 'data/datalist' file should be added
* building 'linkedata_0.1.0.tar.gz'

Setting env vars ---------------------------------------------------------------
_R_CHECK_CRAN_INCOMING_ : FALSE
_R_CHECK_FORCE_SUGGESTS_: FALSE
Checking linkedata -------------------------------------------------------------
"C:/PROGRA~1/R/R-33~1.1/bin/x64/R" --no-site-file --no-environ --no-save  \
  --no-restore --quiet CMD check  \
  "C:\Users\caort\AppData\Local\Temp\Rtmp8EbYiM/linkedata_0.1.0.tar.gz"  \
  --as-cran --timings --no-manual

* using log directory 'C:/Users/caort/Documents/Subversion/rcode/lib/src/linkedata.Rcheck'
* using R version 3.3.1 (2016-06-21)
* using platform: x86_64-w64-mingw32 (64-bit)
* using session charset: ISO8859-1
* using options '--no-manual --as-cran'
* checking for file 'linkedata/DESCRIPTION' ... OK
* checking extension type ... Package
* this is package 'linkedata' version '0.1.0'
* checking package namespace information ... OK
* checking package dependencies ... NOTE
Package suggested but not available for checking: 'pvsolcalcs'
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for executable files ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking whether package 'linkedata' can be installed ... OK
* checking installed package size ...





**************************************************************************************
This e-mail and any attachments thereto may contain confidential information and/or information protected by intellectual property rights for the exclusive attention of the intended addressees named above. If you have received this transmission in error, please immediately notify the sender by return e-mail and delete this message and its attachments. Unauthorized use, copying or further full or partial distribution of this e-mail or its contents is prohibited.
**************************************************************************************

	[[alternative HTML version deleted]]


From murdoch.duncan at gmail.com  Fri Sep 30 18:52:57 2016
From: murdoch.duncan at gmail.com (Duncan Murdoch)
Date: Fri, 30 Sep 2016 12:52:57 -0400
Subject: [R-pkg-devel] R Packages Never Finish Check
In-Reply-To: <HE1PR0201MB14660C3399141B12D3BB16939FC10@HE1PR0201MB1466.eurprd02.prod.outlook.com>
References: <HE1PR0201MB14660C3399141B12D3BB16939FC10@HE1PR0201MB1466.eurprd02.prod.outlook.com>
Message-ID: <589cd580-de88-cf31-3b7a-e7989da97b60@gmail.com>

On 30/09/2016 12:24 PM, Ortega, Cameron wrote:
> Hi,
>
> When I attempt to run Check on any package, the "checking installed package size..." Check never finishes. This is across multiple versions of R and RStudio, with every package I have attempted to run, including packages confirmed to pass Check quickly and with no issues for others.
>
> I have attempted to run Check using the following methods:
> -Check under the Build tab of RStudio
> -Running devtools::check() from the RStudio console
> -Running R CMD check from the command line
>
> Has anyone experienced Check failing to progress on any step, or have any ideas about what I should try next?

I've never seen that, and I run R CMD check a lot, and devtools::check 
sometimes.  So you're probably stuck debugging it yourself.

Do the usual debugging things:  simplify the process.  You're using 
devtools::check; see if the same thing happens in a terminal running R 
CMD check.  Depending on the answer to that, simplify the package down 
to almost nothing, and see if it still happens.

If you're lucky, it will only happen in devtools::check, and then you 
can see what it is doing that's different than what R CMD check does.  
If they both give the same problem, you might need to dive into the R 
sources to see what "* checking installed package size ..." really does, 
and try running code like that independently.

Duncan Murdoch

>
>
> This is my session info:
> R version 3.3.1 (2016-06-21)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows 7 x64 (build 7601) Service Pack 1
>
> locale:
> [1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United States.1252
> [3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C
> [5] LC_TIME=English_United States.1252
>
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
>
> loaded via a namespace (and not attached):
> [1] tools_3.3.1
>
>
>
>
>
>
>
> This is a print out from the RStudio Check:
> ==> devtools::check()
>
> Updating linkedata documentation
> Loading linkedata
> Writing NAMESPACE
> Writing linkedata.Rd
> Writing linke.Rd
> Setting env vars ---------------------------------------------------------------
> CFLAGS  : -Wall -pedantic
> CXXFLAGS: -Wall -pedantic
> Building linkedata -------------------------------------------------------------
> "C:/PROGRA~1/R/R-33~1.1/bin/x64/R" --no-site-file --no-environ --no-save  \
>    --no-restore --quiet CMD build  \
>    "C:\Users\caort\Documents\Subversion\rcode\lib\src\linkedata"  \
>    --no-resave-data --no-manual
>
> * checking for file 'C:\Users\caort\Documents\Subversion\rcode\lib\src\linkedata/DESCRIPTION' ... OK
> * preparing 'linkedata':
> * checking DESCRIPTION meta-information ... OK
> * checking for LF line-endings in source and make files
> * checking for empty or unneeded directories
> Removed empty directory 'linkedata/zipdta'
> * looking to see if a 'data/datalist' file should be added
> * building 'linkedata_0.1.0.tar.gz'
>
> Setting env vars ---------------------------------------------------------------
> _R_CHECK_CRAN_INCOMING_ : FALSE
> _R_CHECK_FORCE_SUGGESTS_: FALSE
> Checking linkedata -------------------------------------------------------------
> "C:/PROGRA~1/R/R-33~1.1/bin/x64/R" --no-site-file --no-environ --no-save  \
>    --no-restore --quiet CMD check  \
>    "C:\Users\caort\AppData\Local\Temp\Rtmp8EbYiM/linkedata_0.1.0.tar.gz"  \
>    --as-cran --timings --no-manual
>
> * using log directory 'C:/Users/caort/Documents/Subversion/rcode/lib/src/linkedata.Rcheck'
> * using R version 3.3.1 (2016-06-21)
> * using platform: x86_64-w64-mingw32 (64-bit)
> * using session charset: ISO8859-1
> * using options '--no-manual --as-cran'
> * checking for file 'linkedata/DESCRIPTION' ... OK
> * checking extension type ... Package
> * this is package 'linkedata' version '0.1.0'
> * checking package namespace information ... OK
> * checking package dependencies ... NOTE
> Package suggested but not available for checking: 'pvsolcalcs'
> * checking if this is a source package ... OK
> * checking if there is a namespace ... OK
> * checking for executable files ... OK
> * checking for hidden files and directories ... OK
> * checking for portable file names ... OK
> * checking whether package 'linkedata' can be installed ... OK
> * checking installed package size ...
>
>
>
>
>
> **************************************************************************************
> This e-mail and any attachments thereto may contain confidential information and/or information protected by intellectual property rights for the exclusive attention of the intended addressees named above. If you have received this transmission in error, please immediately notify the sender by return e-mail and delete this message and its attachments. Unauthorized use, copying or further full or partial distribution of this e-mail or its contents is prohibited.
> **************************************************************************************
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-package-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-package-devel


